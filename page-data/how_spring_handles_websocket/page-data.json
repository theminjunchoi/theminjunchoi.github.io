{"componentChunkName":"component---src-templates-post-jsx","path":"/how_spring_handles_websocket/","result":{"data":{"site":{"siteMetadata":{"title":"minjun.blog"}},"markdownRemark":{"id":"dd19080d-8383-5cdb-9519-2c28e9545ae2","excerpt":"how_spring_injects_httpsession 이 포스트를 읽고 오면 이해가 더 잘 됩니다! Spring에서 어떻게 WebSocket 연결을 수립할까? 그 과정을 찾아가보자. Spring에서 연결방식을 WebSocket으로 업그레이드 하는 방법 handshake 성공 후에는? 물리적 TCP 연결은 동일함 메시지들은 DispatcherServlet…","html":"<p><a href=\"/how_spring_injects_httpsession\" data-wiki-link=\"true\">how_spring_injects_httpsession</a> 이 포스트를 읽고 오면 이해가 더 잘 됩니다!</p>\n<p>Spring에서 어떻게 WebSocket 연결을 수립할까? 그 과정을 찾아가보자.</p>\n<h2>Spring에서 연결방식을 WebSocket으로 업그레이드 하는 방법</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">HTTP Request (GET /ws) \n\t↓ \nDispatcherServlet.doService() \n\t↓ \nDispatcherServlet.doDispatch() \n\t↓ \nHandlerMapping.getHandler() (여기서 WebSocketHandlerMapping 사용) \n\t↓ \nHandlerAdapter.handle() (여기서 HttpRequestHandlerAdapter 사용) \n\t↓ \nWebSocketHttpRequestHandler.handleRequest() \n\t↓ \nDefaultHandshakeHandler.doHandshake()\n\t↓ \nRequestUpgradeStrategy.upgrade() (HTTP 연결이 WebSocket 연결로 업그레이드)\n\t↓\nDispatcherServlet 완전히 빠짐\n\t↓ \n이후 모든 메시지는 WebSocket 핸들러가 직접처리</code></pre></div>\n<h3>handshake 성공 후에는?</h3>\n<ul>\n<li>물리적 TCP 연결은 동일함</li>\n<li>메시지들은 DispatcherServlet을 안거쳐감</li>\n<li>Tomcat/Jetty가 직접 WebSocket 핸들러로 라우팅</li>\n<li>Spring WebSocket 인프라가 직접 처리</li>\n</ul>\n<h3>흐름 비교</h3>\n<h4>HTTP 요청</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">TCP → Tomcat → DispatcherServlet → Controller → 응답 </code></pre></div>\n<h4>WebSocket 메시지 (handshake 성공 후)</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">TCP → Tomcat WebSocket Container → SubProtocolWebSocketHandler → \bChannelInterceptor → @MessageMapping</code></pre></div>\n<h2>클라이언트에서 서버로</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">WebSocket Frame (STOMP CONNECT)\n    ↓\nSubProtocolWebSocketHandler.handleMessage() (서블릿 컨테이너가 호출함)\n    ↓  \nStompSubProtocolHandler.handleMessageFromClient()\n    ↓\nclientInboundChannel로 Spring Message 전송\n    ↓\nChannelInterceptor (커스텀한 인터셉터가 여기서 동작!)\n    ↓\nSimpleBroker 또는 외부 브로커\n    ↓\n@MessageMapping 컨트롤러 (전후로 presend, postsend)</code></pre></div>\n<h3>SubProtocolWebSocketHandler.handleMessage() 호출</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token annotation punctuation\">@Override</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebSocketSession</span> session<span class=\"token punctuation\">,</span> <span class=\"token class-name\">WebSocketMessage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> message<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>  \n\n\t<span class=\"token comment\">// 세션 갖고오기</span>\n    <span class=\"token class-name\">WebSocketSessionHolder</span> holder <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sessions<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>holder <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       session <span class=\"token operator\">=</span> holder<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    \n    <span class=\"token comment\">// 프로토콜 핸들러 찾기 (STOMP, etc, ...)</span>\n    <span class=\"token class-name\">SubProtocolHandler</span> protocolHandler <span class=\"token operator\">=</span> <span class=\"token function\">findProtocolHandler</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\n\t<span class=\"token comment\">// 위임하기</span>\n    protocolHandler<span class=\"token punctuation\">.</span><span class=\"token function\">handleMessageFromClient</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clientInboundChannel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>holder <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       holder<span class=\"token punctuation\">.</span><span class=\"token function\">setHasHandledMessages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>StompSubProtocolHandler.handleMessageFromClient() 호출</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleMessageFromClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebSocketSession</span> session<span class=\"token punctuation\">,</span>  \n       <span class=\"token class-name\">WebSocketMessage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> webSocketMessage<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MessageChannel</span> targetChannel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token comment\">/* 위에서 생략된 내용들\n    1. WebSocket 메시지 -> ByteBuffer로 변환\n    2. STOMP 프레임 디코딩\n    3. 순서 보장처리 (하나의 메시지가 프레임단위로 쪼개져서 올 수도 있음)\n    */</span>\n\n\t<span class=\"token comment\">// 4. 각 STOMP 메시지별 처리</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> message <span class=\"token operator\">:</span> messages<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token class-name\">StompHeaderAccessor</span> headerAccessor <span class=\"token operator\">=</span>  \n             <span class=\"token class-name\">MessageHeaderAccessor</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAccessor</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StompHeaderAccessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\n       <span class=\"token class-name\">StompCommand</span> command <span class=\"token operator\">=</span> headerAccessor<span class=\"token punctuation\">.</span><span class=\"token function\">getCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token keyword\">boolean</span> isConnect <span class=\"token operator\">=</span> <span class=\"token class-name\">StompCommand</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CONNECT</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">StompCommand</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STOMP</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n       <span class=\"token keyword\">boolean</span> sent <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n\t\t  <span class=\"token comment\">// 5. 세션 정보를 Spring Message 헤더에 설정</span>\n          headerAccessor<span class=\"token punctuation\">.</span><span class=\"token function\">setSessionId</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          headerAccessor<span class=\"token punctuation\">.</span><span class=\"token function\">setSessionAttributes</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">getAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          headerAccessor<span class=\"token punctuation\">.</span><span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isConnect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n             headerAccessor<span class=\"token punctuation\">.</span><span class=\"token function\">setUserChangeCallback</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>  \n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> user <span class=\"token operator\">!=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getPrincipal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stompAuthentications<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                <span class=\"token punctuation\">}</span>  \n             <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          <span class=\"token punctuation\">}</span>  \n          headerAccessor<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SimpMessageHeaderAccessor</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HEART_BEAT_HEADER</span><span class=\"token punctuation\">,</span> headerAccessor<span class=\"token punctuation\">.</span><span class=\"token function\">getHeartbeat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          \n          <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token comment\">// 여기서 \bclientInboudChannel로 전송! </span>\n            <span class=\"token comment\">// → channelToUse.send()</span>\n            <span class=\"token comment\">// → AbstractMessageChannel.send() </span>\n            <span class=\"token comment\">// → ChannelInterceptorChain.applyPreSend() </span>\n            <span class=\"token comment\">// → ChannelInterceptor.preSend() 호출됨! (Custom)</span>\n            <span class=\"token comment\">// → 실제메시지 처리 (@MessageMapping)</span>\n            <span class=\"token comment\">// → SimpleBrokerMessageHandler의 SubscriptionRegistry에 구독정보 저장</span>\n            <span class=\"token comment\">// → ChannelInterceptorChain.applyPostSend()</span>\n            <span class=\"token comment\">// → ChannelIntercaptor.postSend() 호출됨 (Custom)</span>\n\t         <span class=\"token class-name\">SimpAttributesContextHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttributesFromMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n             sent <span class=\"token operator\">=</span> channelToUse<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>eventPublisher <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                   <span class=\"token class-name\">Principal</span> user <span class=\"token operator\">=</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isConnect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                      <span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>eventPublisher<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SessionConnectEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                   <span class=\"token punctuation\">}</span>  \n                   <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StompCommand</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SUBSCRIBE</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                      <span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>eventPublisher<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SessionSubscribeEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                   <span class=\"token punctuation\">}</span>  \n                   <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StompCommand</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UNSUBSCRIBE</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                      <span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>eventPublisher<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SessionUnsubscribeEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                   <span class=\"token punctuation\">}</span>  \n                <span class=\"token punctuation\">}</span>  \n             <span class=\"token punctuation\">}</span>  \n          <span class=\"token punctuation\">}</span>  \n          <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>  \n             <span class=\"token class-name\">SimpAttributesContextHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">resetAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          <span class=\"token punctuation\">}</span>  \n       <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>서버에서 클라이언트로!</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@Controller에서 SimpMessagingTemplate.send()\n    ↓\nclientOutboundChannel로 메시지 전송\n\t↓\nSimpleBroker 또는 외부 브로커\n    ↓\nSubProtocolWebSocketHandler.handleMessage()\n    ↓\nStompSubProtocolHandler.handleMessageToClient()\n    ↓\nWebSocket Frame으로 변환해서 클라이언트 전송 (Tomcat/Jetty에서)</code></pre></div>\n<h3>@Controller에서 SimpMessagingTemplate.send()</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@MessageMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/room/{joinCode}/update-players\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">broadcastPlayers</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@DestinationVariable</span> <span class=\"token class-name\">String</span> joinCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PlayerResponse</span><span class=\"token punctuation\">></span></span> responses <span class=\"token operator\">=</span> roomService<span class=\"token punctuation\">.</span><span class=\"token function\">getAllPlayers</span><span class=\"token punctuation\">(</span>joinCode<span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PlayerResponse</span><span class=\"token operator\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    messagingTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/topic/room/\"</span> <span class=\"token operator\">+</span> joinCode<span class=\"token punctuation\">,</span>  \n            <span class=\"token class-name\">WebSocketResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>responses<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>SimpMessagingTemplate 내부동작</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">D</span> destination<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> payload<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> headers<span class=\"token punctuation\">,</span>  \n       <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">MessagePostProcessor</span> postProcessor<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MessagingException</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token class-name\">Message</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> message <span class=\"token operator\">=</span> <span class=\"token function\">doConvert</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> headers<span class=\"token punctuation\">,</span> postProcessor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// send -> ... -> AbstractMessageChannel.send()</span>\n<span class=\"token annotation punctuation\">@Override</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> message<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Message must not be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">Message</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> messageToUse <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">ChannelInterceptorChain</span> chain <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelInterceptorChain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">boolean</span> sent <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n\n\t\t<span class=\"token comment\">// 커스텀한 interceptor의 presend 호출</span>\n       messageToUse <span class=\"token operator\">=</span> chain<span class=\"token punctuation\">.</span><span class=\"token function\">applyPreSend</span><span class=\"token punctuation\">(</span>messageToUse<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>messageToUse <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n          <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token punctuation\">}</span>  \n       \n\t\t<span class=\"token comment\">// 등록된 모든 MessageHandler들에게 메시지 전달</span>\n\t\t<span class=\"token comment\">// SubProtocolWebSocketHandler.handleMessage 호출됨</span>\n       sent <span class=\"token operator\">=</span> <span class=\"token function\">sendInternal</span><span class=\"token punctuation\">(</span>messageToUse<span class=\"token punctuation\">,</span> timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 커스텀한 interceptor의 postsend 호출</span>\n       chain<span class=\"token punctuation\">.</span><span class=\"token function\">applyPostSend</span><span class=\"token punctuation\">(</span>messageToUse<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> sent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       chain<span class=\"token punctuation\">.</span><span class=\"token function\">triggerAfterSendCompletion</span><span class=\"token punctuation\">(</span>messageToUse<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> sent<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token keyword\">return</span> sent<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       chain<span class=\"token punctuation\">.</span><span class=\"token function\">triggerAfterSendCompletion</span><span class=\"token punctuation\">(</span>messageToUse<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> sent<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ex <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MessagingException</span> messagingException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n          <span class=\"token keyword\">throw</span> messagingException<span class=\"token punctuation\">;</span>  \n       <span class=\"token punctuation\">}</span>  \n       <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageDeliveryException</span><span class=\"token punctuation\">(</span>messageToUse<span class=\"token punctuation\">,</span><span class=\"token string\">\"Failed to send message to \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token class-name\">MessageDeliveryException</span> ex2 <span class=\"token operator\">=</span>  \n             <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageDeliveryException</span><span class=\"token punctuation\">(</span>messageToUse<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Failed to send message to \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       chain<span class=\"token punctuation\">.</span><span class=\"token function\">triggerAfterSendCompletion</span><span class=\"token punctuation\">(</span>messageToUse<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> sent<span class=\"token punctuation\">,</span> ex2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token keyword\">throw</span> ex2<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>SubProtocolWebSocketHandler.handleMessage() 호출</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> message<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MessagingException</span> <span class=\"token punctuation\">{</span>  \n\n\t<span class=\"token comment\">// 1. 메시지에서 세션 id 추출</span>\n    <span class=\"token class-name\">String</span> sessionId <span class=\"token operator\">=</span> <span class=\"token function\">resolveSessionId</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sessionId <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isErrorEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n          logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Could not find session id in \"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token punctuation\">}</span>  \n       <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n\n\t<span class=\"token comment\">// 2. 해당 세션 찾기</span>\n    <span class=\"token class-name\">WebSocketSessionHolder</span> holder <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sessions<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>sessionId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>holder <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n          <span class=\"token comment\">// The broker may not have removed the session yet  </span>\n          logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No session for \"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token punctuation\">}</span>  \n       <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n    <span class=\"token class-name\">WebSocketSession</span> session <span class=\"token operator\">=</span> holder<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n      <span class=\"token comment\">// 3. 프로토콜 핸들러로 클라이언트에게 전송</span>\n     <span class=\"token function\">findProtocolHandler</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleMessageToClient</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SessionLimitExceededException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n             logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Terminating '\"</span> <span class=\"token operator\">+</span> session <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          <span class=\"token punctuation\">}</span>  \n          <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isWarnEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n             logger<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Terminating '\"</span> <span class=\"token operator\">+</span> session <span class=\"token operator\">+</span> <span class=\"token string\">\"': \"</span> <span class=\"token operator\">+</span> ex<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          <span class=\"token punctuation\">}</span>  \n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stats<span class=\"token punctuation\">.</span><span class=\"token function\">incrementLimitExceededCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          <span class=\"token function\">clearSession</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// clear first, session may be unresponsive  </span>\n          session<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token punctuation\">}</span>  \n       <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> secondException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n          logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failure while closing session \"</span> <span class=\"token operator\">+</span> sessionId <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> secondException<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token comment\">// Could be part of normal workflow (for example, browser tab closed)  </span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n          logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to send message to client in \"</span> <span class=\"token operator\">+</span> session <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>StompSubProtocolHandler.handleMessageToClient() (실제 전송)</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>  \n<span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleMessageToClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebSocketSession</span> session<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Message</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token comment\">// ... 생략</span>\n    \n    <span class=\"token comment\">// 순서 보장</span>\n    <span class=\"token class-name\">Runnable</span> task <span class=\"token operator\">=</span> <span class=\"token class-name\">OrderedMessageChannelDecorator</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNextMessageTask</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>task <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInstanceOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConcurrentWebSocketSessionDecorator</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConcurrentWebSocketSessionDecorator</span><span class=\"token punctuation\">)</span> session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setMessageCallback</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">-></span> task<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n\n\t<span class=\"token comment\">// 실제 클라이언트에게 전송</span>\n    <span class=\"token function\">sendToClient</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">,</span> accessor<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendToClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebSocketSession</span> session<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StompHeaderAccessor</span> stompAccessor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> payload<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">StompCommand</span> command <span class=\"token operator\">=</span> stompAccessor<span class=\"token punctuation\">.</span><span class=\"token function\">getCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stompEncoder<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>stompAccessor<span class=\"token punctuation\">.</span><span class=\"token function\">getMessageHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token keyword\">boolean</span> useBinary <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>session <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">SockJsSession</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>  \n             <span class=\"token class-name\">MimeTypeUtils</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_OCTET_STREAM</span><span class=\"token punctuation\">.</span><span class=\"token function\">isCompatibleWith</span><span class=\"token punctuation\">(</span>stompAccessor<span class=\"token punctuation\">.</span><span class=\"token function\">getContentType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token comment\">// Tomcat/Jetty 컨테이너로 전달</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>useBinary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n          session<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BinaryMessage</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token punctuation\">}</span>  \n       <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  \n          session<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TextMessage</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SessionLimitExceededException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token comment\">// Bad session, just get out  </span>\n       <span class=\"token keyword\">throw</span> ex<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token comment\">// Could be part of normal workflow (for example, browser tab closed)  </span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n          logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to send WebSocket message to client in session \"</span> <span class=\"token operator\">+</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token punctuation\">}</span>  \n       command <span class=\"token operator\">=</span> <span class=\"token class-name\">StompCommand</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ERROR</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StompCommand</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ERROR</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n          <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n             session<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CloseStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROTOCOL_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          <span class=\"token punctuation\">}</span>  \n          <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n             <span class=\"token comment\">// Ignore  </span>\n          <span class=\"token punctuation\">}</span>  \n       <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>핵심 포인트</h2>\n<h3>SubProtocolWebSocketHandler</h3>\n<ul>\n<li><strong>SubProtocolWebSocketHandler</strong>는 <strong>WebSocket ↔ Spring Messaging 브릿지 역할</strong>을 하는 핵심 컴포넌트임</li>\n<li>WebSocketHandler 구현\n<ul>\n<li>WebSocket 컨테이너(Tomcat/Jetty)에서 호출</li>\n<li><strong>클라이언트 → 서버</strong> 메시지 처리</li>\n<li><strong>WebSocketMessage → Spring Message</strong> 변환</li>\n</ul>\n</li>\n<li>MessageHandler 구현\n<ul>\n<li><strong>clientOutboundChannel</strong>에 구독자로 등록됨</li>\n<li><strong>서버 → 클라이언트</strong> 메시지 처리</li>\n<li><strong>Spring Message → WebSocket 프레임</strong> 변환하도록 Tomcat/Jetty 호출</li>\n</ul>\n</li>\n</ul>\n<h3>ChannelInterceptor의 Presend/PostSend</h3>\n<ul>\n<li>Input 메시지 (clientInboundChannel):\n<ul>\n<li>preSend → @MessageMapping 실행 → postSend</li>\n</ul>\n</li>\n<li>Output 메시지 (clientOutboundChannel, 컨트롤러에서 전송):\n<ul>\n<li>preSend → 클라이언트 전송 → postSend</li>\n</ul>\n</li>\n<li>그래서 채팅 하나 보내면 inbound 채널에서 preSend/postSend 한 번, outbound 채널에서 preSend/postSend 또 한 번 실행됨</li>\n</ul>","frontmatter":{"title":"How Spring Handles WebSocket","date":"2025년 08월 12일 09:08","updated":"2025년 10월 15일 09:10","tags":["spring","CoffeeShout"],"series":"커피빵(CoffeeShout) 개발록"},"fields":{"slug":"/how_spring_handles_websocket/","readingTime":{"minutes":7.3}}},"seriesList":{"edges":[{"node":{"id":"78009f4c-9d4d-5ede-8df8-21c4b3e0827a","fields":{"slug":"/coffeeshout_ideation/"},"frontmatter":{"title":"커피빵(CoffeeShout) 기획"}}},{"node":{"id":"4b6f5513-eb5e-5e14-9f1e-49e5551e3e0a","fields":{"slug":"/coffeeshout_persona/"},"frontmatter":{"title":"커피빵(CoffeeShout) 페르소나"}}},{"node":{"id":"dfcf707f-6928-5b1d-b1f6-d48ea4b28c21","fields":{"slug":"/coffeeshout_server_tech_stack/"},"frontmatter":{"title":"커피빵(CoffeeShout) 서버 기술스택"}}},{"node":{"id":"dd19080d-8383-5cdb-9519-2c28e9545ae2","fields":{"slug":"/how_spring_handles_websocket/"},"frontmatter":{"title":"How Spring Handles WebSocket"}}},{"node":{"id":"e97246be-857f-59db-8b03-b350f11fa429","fields":{"slug":"/coffeeshout_websocket_reconnection_app_switching/"},"frontmatter":{"title":"WebSocket Reconnection on App Switching"}}},{"node":{"id":"a1219698-1514-531d-8307-8beb79ee82fb","fields":{"slug":"/coffeeshout_infra_design/"},"frontmatter":{"title":"커피빵(CoffeeShout) 분산환경 구축"}}},{"node":{"id":"357a176c-b1d7-5fae-817e-f4624994cbf1","fields":{"slug":"/how_redis_pubsub_works/"},"frontmatter":{"title":"How Redis Pub/Sub Works"}}}]},"previous":{"fields":{"slug":"/coffeeshout_server_tech_stack/"},"frontmatter":{"title":"커피빵(CoffeeShout) 서버 기술스택"}},"next":{"fields":{"slug":"/coffeeshout_websocket_reconnection_app_switching/"},"frontmatter":{"title":"WebSocket Reconnection on App Switching"}}},"pageContext":{"id":"dd19080d-8383-5cdb-9519-2c28e9545ae2","series":"커피빵(CoffeeShout) 개발록","previousPostId":"dfcf707f-6928-5b1d-b1f6-d48ea4b28c21","nextPostId":"e97246be-857f-59db-8b03-b350f11fa429"}},"staticQueryHashes":[],"slicesMap":{}}