{"componentChunkName":"component---src-templates-post-jsx","path":"/2-1. Designing principles 1~3 of MIPS ISA/","result":{"data":{"site":{"siteMetadata":{"title":"minjun.blog"}},"markdownRemark":{"id":"62397c00-742b-5787-91b0-ac2bf4f89c1b","excerpt":"contents: 0-1. CA Intro MIPS ISA What is MIPS ISA Microprocessor without Interlocked Pipelined Stages A kind of ISA Design principles Simplicity favors regularity Smaller is faster Make the common ca…","html":"<p>contents: <a href=\"/0-1.%20CA%20Intro\" data-wiki-link=\"true\">0-1. CA Intro</a></p>\n<h2>MIPS ISA</h2>\n<h3>What is MIPS ISA</h3>\n<ul>\n<li>Microprocessor without Interlocked Pipelined Stages</li>\n<li>A kind of ISA</li>\n</ul>\n<h3>Design principles</h3>\n<ol>\n<li><strong>Simplicity favors regularity</strong></li>\n<li><strong>Smaller is faster</strong></li>\n<li><strong>Make the common case fast</strong></li>\n</ol>\n<h2>Design Principle 1</h2>\n<h3>Simplicity favors regularity</h3>\n<ul>\n<li><strong>Regularity</strong>: all MIPS arithmetic instructions include <strong>a single operation &#x26; three operands</strong></li>\n<li>Regularity makes implementation simpler</li>\n<li>Simplicity enables higher performance at lower cost</li>\n</ul>\n<h3>Examples</h3>\n<ul>\n<li>add a, b, c\n<ul>\n<li><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mi>b</mi><mo>+</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">a = b + c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span></span></li>\n</ul>\n</li>\n<li>sub a, a, d\n<ul>\n<li><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mi>a</mi><mo>−</mo><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">a = a - d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span></span></li>\n</ul>\n</li>\n</ul>\n<h2>Design Principle 2</h2>\n<h3>Smaller is faster</h3>\n<ul>\n<li>Operands of MIPS arithmetic instructions must be chosen in <strong>a small number of registers</strong></li>\n<li><strong>Register</strong>: Fast locations for data</li>\n<li>32 32-bit registers in MIPS</li>\n<li>32 is <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span></span> that can be represented by using 5 bits<img src=\"/attachments/registers.jpg\" alt=\"registers.jpg\"></li>\n</ul>\n<h2>Practice 1</h2>\n<p><strong>C code:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">f <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>g <span class=\"token operator\">+</span> h<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>Compiled MIPS assembly language code:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">add $t0, $s1, $s2\nadd $t1, $s3, $s4\nsub $s0, $t0, $t1</code></pre></div>\n<h2>Memory instruction</h2>\n<h3>Memory organization</h3>\n<p>keep a small amount data in <strong>registers</strong> and other remaining, complex data in <strong>memory</strong></p>\n<ul>\n<li><strong>Load</strong> values from memory into registers</li>\n<li><strong>Store</strong> results from registers to memory</li>\n</ul>\n<h3>Address</h3>\n<p>A memory address is an index to the memory array, starting at 0\nMIPS uses byte addressing (Each address identifies an 8-bit byte)</p>\n<p><strong>But</strong>, most data items are larger than a byte. So, they use \"<strong>words</strong>\"</p>\n<ul>\n<li>In MIPS, a ward is 32 bits</li>\n<li>Registers also hold 32-bit of data</li>\n</ul>\n<h4>Alignment restrictions</h4>\n<ul>\n<li>The start address of each data should be multiple of N, where N is the size of the data</li>\n<li>In MIPS, words must start at a addresses that are multiples of 4</li>\n<li>Some data items use one or two bytes (halfword)</li>\n</ul>\n<h4>Byte ordering</h4>\n<ul>\n<li>Big endian(<strong>MIPS</strong>): place the most significant byte first and the least significant byte last</li>\n<li>Little endian: place the least significant byte first and the most significant byte last  </li>\n</ul>\n<h3>Load/Store</h3>\n<ul>\n<li><strong>lw reg1 offset(reg2)</strong>: Load 32-bit word from the memory address reg2 + offset into reg1</li>\n<li><strong>sw reg1 offset(reg2)</strong>: Store 32-bit word in reg1 at the memory address reg2 + offset</li>\n<li><strong>lh/sh</strong> and <strong>lb/sb</strong> instructions load/store halfwords and 8-bit of data</li>\n</ul>\n<h2>Practice 2</h2>\n<p><strong>C code:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">g <span class=\"token operator\">=</span> h <span class=\"token operator\">+</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li>A is an array of 4-bytes words</li>\n<li>The value of g and h are in <code class=\"language-text\">$s1</code> and <code class=\"language-text\">$s2</code></li>\n<li>The base address of A is in <code class=\"language-text\">$s3</code></li>\n</ul>\n<p><strong>Compiled MIPS assembly language code:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">lw $t0, 32($s3)\nadd $s1, $s2, $t0</code></pre></div>\n<h2>Practice 2</h2>\n<p><strong>C code:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">A<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> h<span class=\"token operator\">+</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li>A is an array of 4-bytes words</li>\n<li>The value of h is in <code class=\"language-text\">$s2</code></li>\n<li>The base address of A is in <code class=\"language-text\">$s3</code></li>\n</ul>\n<p><strong>Compiled MIPS assembly language code:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">lw $t0, 32($s3)\nadd $t0, $s2, $t0\nsw $t0, 48($s3)</code></pre></div>\n<h2>Practice 3</h2>\n<p><strong>C code:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">f <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>g <span class=\"token operator\">+</span> h<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>f, g, and h are in <code class=\"language-text\">$s0</code>, <code class=\"language-text\">$s1</code>, and <code class=\"language-text\">$2</code> respectively</li>\n<li>Halfwords i and j are sequentially stored in memory</li>\n<li>The start address of i is stored in <code class=\"language-text\">$s3</code></li>\n</ul>\n<p><strong>Compiled MIPS assembly language code:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">add $t0, $s1, $s2\nlh $t1, 0($s3)\nlh $t2, 2($s3)\nadd $t3, $t1, $t2\nsub $s2, $t0, $t3</code></pre></div>\n<h2>Design Principle 3</h2>\n<h3>Make the common case fast</h3>\n<p><strong>Common case :</strong> a program uses a small constant in an operation many times</p>\n<p><strong>Solution: support</strong></p>\n<ul>\n<li>\n<p><strong>16-bit immediate operands</strong> for handling the constants</p>\n<ul>\n<li>no need to access memory to load the constants</li>\n<li><code class=\"language-text\">addi $t0, $t0, 4</code> : addi is an add immediate instruction</li>\n</ul>\n</li>\n<li>\n<p><strong>MIPS register 0 (<code class=\"language-text\">$zero</code>)</strong> contains the constant 0</p>\n<ul>\n<li><code class=\"language-text\">add $t0, $t1, $zero</code> : move values between two registers <code class=\"language-text\">$t0</code> and <code class=\"language-text\">t1</code></li>\n</ul>\n</li>\n</ul>\n<h2>Practice 4</h2>\n<p><strong>C code:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">f <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> i <span class=\"token operator\">+</span> <span class=\"token number\">4</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">A</code> is an array of bytes and its base address is stored in <code class=\"language-text\">$s0</code></li>\n<li><code class=\"language-text\">f</code> and <code class=\"language-text\">i</code> are stored in <code class=\"language-text\">$s1</code> and <code class=\"language-text\">$s2</code> respectively</li>\n</ul>\n<p><strong>Compiled MIPS assembly language code:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">lb $t0, 10($s0)\nsub $t1, $t0, $s2\naddi $s1, $t1, 4</code></pre></div>\n<h2>Summary: MIPS ISA</h2>\n<h3>Key underlying design principles</h3>\n<ul>\n<li>Design principle 1. Simplicity favors regularity\n<ul>\n<li>All MIPS arithmetic instructions include a single operation &#x26; three operands</li>\n</ul>\n</li>\n<li>Design principle 2. Smaller is faster\n<ul>\n<li>Operands of MIPS arithmetic instructions must be chosen in a small number of registers</li>\n<li>MIPS keeps more complex data in memory and supports data transfer between memory and registers</li>\n</ul>\n</li>\n<li>Design principle 3. Make the common case faster\n<ul>\n<li>Support 16-bit immediate operands for handling small constants + <code class=\"language-text\">$zero</code></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Design principles 1~3 of MIPS ISA","date":"2024년 07월 22일 16:07","updated":"2025년 07월 10일 15:07","tags":["study","컴퓨터구조"],"series":null},"fields":{"slug":"/2-1. Designing principles 1~3 of MIPS ISA/","readingTime":{"minutes":3.985}}},"seriesList":{"edges":[{"node":{"id":"42bf5959-adba-55bb-a6ed-6347a22b7298","fields":{"slug":"/nuxt-katex/"},"frontmatter":{"title":"Nuxt content에 Mathtype 사용하기"}}},{"node":{"id":"7fc729dc-de56-5f85-a363-123afedc0e55","fields":{"slug":"/ZeroPage_지금그때_2022/"},"frontmatter":{"title":"2022 ZeroPage 지금그때"}}},{"node":{"id":"f8f7470f-000c-592f-9791-14400e103d5a","fields":{"slug":"/readme/"},"frontmatter":{"title":"README"}}},{"node":{"id":"d5272324-e922-5bdd-a8c3-90c1acb79b2f","fields":{"slug":"/why-obsidian/"},"frontmatter":{"title":"기존 블로그 대신 Obsidian을 택한 이유"}}},{"node":{"id":"4104488d-e257-5e42-896e-87f41761a795","fields":{"slug":"/0-1. CA Intro/"},"frontmatter":{"title":"Computer Architecture Intro"}}},{"node":{"id":"30fcde9e-20bd-5555-9560-ca0136d7d30f","fields":{"slug":"/0-2. CA Overview/"},"frontmatter":{"title":"CA Overview"}}},{"node":{"id":"6ce32435-2247-5f01-b7ae-30c6a72bdb9e","fields":{"slug":"/1-1. Defining Performance/"},"frontmatter":{"title":"Defining Performance"}}},{"node":{"id":"a9a2aee1-bbfd-5d10-984d-8ccc1473c416","fields":{"slug":"/1-2. Measuring Performance/"},"frontmatter":{"title":"Measuring Performance"}}},{"node":{"id":"62397c00-742b-5787-91b0-ac2bf4f89c1b","fields":{"slug":"/2-1. Designing principles 1~3 of MIPS ISA/"},"frontmatter":{"title":"Design principles 1~3 of MIPS ISA"}}},{"node":{"id":"4af0bcf6-9fee-5cf3-b1c9-b7b5835d8770","fields":{"slug":"/2-2. Design principles 4 of MIPS ISA/"},"frontmatter":{"title":"Design principles 4 of MIPS ISA"}}},{"node":{"id":"a5f532e7-7d9b-5055-b14a-aaed0a9db9d2","fields":{"slug":"/2-3. Representing Instructions in computer/"},"frontmatter":{"title":"Representing Instructions in computer"}}},{"node":{"id":"d9e769a8-0177-562e-a139-894ce27dcce6","fields":{"slug":"/2-4. Supporting procedures in computer HW/"},"frontmatter":{"title":"Supporting procedures in computer HW"}}},{"node":{"id":"739cb579-ef60-52a7-a84f-443e55d9fbd1","fields":{"slug":"/2-5. MIPS memory allocation & addressing/"},"frontmatter":{"title":"MIPS memory allocation & addressing"}}},{"node":{"id":"d87f2a2c-3c02-5edc-a6b6-e3433578add0","fields":{"slug":"/3-1. Addition and Subtraction/"},"frontmatter":{"title":"Addition and Subtraction"}}},{"node":{"id":"ebbf8c5b-a2bd-5064-a19f-6bdc33c974a4","fields":{"slug":"/3-2. Multiplication/"},"frontmatter":{"title":"Multiplication"}}},{"node":{"id":"b56fb71a-95a2-517d-9081-511b86a2f657","fields":{"slug":"/3-3. Division/"},"frontmatter":{"title":"Division"}}},{"node":{"id":"b937d69d-1c63-5872-b7ac-2b1fb0042cc4","fields":{"slug":"/4-1. Processor Overview/"},"frontmatter":{"title":"Processor Overview"}}},{"node":{"id":"ed6e43e5-a2df-59f6-be3d-c464f14c0530","fields":{"slug":"/4-2. Controlling a datapath/"},"frontmatter":{"title":"Controlling a datapath"}}},{"node":{"id":"e534d64c-5713-536b-8872-8333d169670a","fields":{"slug":"/4-3. A single-cycle datapath/"},"frontmatter":{"title":"A single-cycle datapath"}}},{"node":{"id":"a6701aa1-cb00-5e8e-b3d6-c536fab41e8b","fields":{"slug":"/4-4. Pipelining overview/"},"frontmatter":{"title":"Pipelining overview"}}},{"node":{"id":"1fcf23d9-0d39-57a9-aad6-d5354378e3e2","fields":{"slug":"/4-5. Handling hazards/"},"frontmatter":{"title":"Handling hazards"}}},{"node":{"id":"b3fc2b84-3be0-5b73-a339-cd42ef995cfc","fields":{"slug":"/4-6. Exceptions/"},"frontmatter":{"title":"Exceptions"}}},{"node":{"id":"579ead23-f5d4-5b7b-9a0f-125b86fd6678","fields":{"slug":"/5-1. Cache overview/"},"frontmatter":{"title":"Cache overview"}}},{"node":{"id":"54b7e29f-b59a-5f90-a9f7-a097eb9d71da","fields":{"slug":"/5-2. Improving cache performance/"},"frontmatter":{"title":"Improving cache performance"}}},{"node":{"id":"449ab907-aecb-5a4a-a143-ba9fe16f212b","fields":{"slug":"/5-3. Virtual memory Part 1/"},"frontmatter":{"title":"Virtual memory Part 1"}}},{"node":{"id":"f757510a-442a-55e1-a52e-52bea333756d","fields":{"slug":"/5-4. Virtual memory Part 2/"},"frontmatter":{"title":"Virtual memory Part 2"}}},{"node":{"id":"b67fe3d6-c0bd-51a6-a205-771b3f728a7d","fields":{"slug":"/interesting topic among sigchi 2024/"},"frontmatter":{"title":"sigchi 2024 관심 주제"}}},{"node":{"id":"56ad90a2-6eb5-5ba6-9785-36a854dc09c1","fields":{"slug":"/Respiratory Sound Database 유효성 분석/"},"frontmatter":{"title":"Respiratory Sound Database 유효성 분석"}}},{"node":{"id":"92c89d1b-e219-5dd0-af89-a3e7b13b5697","fields":{"slug":"/우아한테크코스_7기_BE_프리코스_1주차_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 프리코스 1주차 회고"}}},{"node":{"id":"c9026e49-4fc7-552d-9335-15b0e60c5753","fields":{"slug":"/우아한테크코스_7기_BE_프리코스_2주차_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 프리코스 2주차 회고"}}},{"node":{"id":"9f4f37ab-c5ad-5670-9f13-227e12f0ec1e","fields":{"slug":"/우아한테크코스_7기_BE_프리코스_3주차_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 프리코스 3주차 회고"}}},{"node":{"id":"455b72bd-1d68-5108-bc7a-c929a02cea02","fields":{"slug":"/우아한테크코스_7기_BE_프리코스_4주차_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 프리코스 4주차 회고"}}},{"node":{"id":"a20dad6a-f970-5208-83a9-7d6df1d9a35a","fields":{"slug":"/mobile spirometry 관련 자료/"},"frontmatter":{"title":"mobile spirometry 관련 논문"}}},{"node":{"id":"d49afac2-bf1e-5cc6-87f3-d722d867bcd4","fields":{"slug":"/스마트기기 내장 마이크기반 폐질환 진단기기 개발/"},"frontmatter":{"title":"논문 요약 - 스마트기기 내장 마이크기반 폐질환 진단기기 개발"}}},{"node":{"id":"f9ec4dcc-5e06-5216-a094-b4504c8d8028","fields":{"slug":"/spirosmart/"},"frontmatter":{"title":"논문 요약 - SpiroSmart: Using a Microphone to Measure\rLung Function on a Mobile Phone"}}},{"node":{"id":"05a766d5-0438-59c4-b291-59f60607988b","fields":{"slug":"/20241122_미팅내용정리/"},"frontmatter":{"title":"11/22 폐음연구 관련 미팅 내용 정리"}}},{"node":{"id":"a3f641d2-fd6a-5e57-bc47-29eaf0b499e3","fields":{"slug":"/ZeroPage_지금그때_2024/"},"frontmatter":{"title":"2024 ZeroPage 지금그때"}}},{"node":{"id":"0c07dd55-12a1-5d8c-9e6c-c8f4d40453b3","fields":{"slug":"/폐기능검사_지침_요약/"},"frontmatter":{"title":"폐음연구 - 폐기능검사 지침 요약"}}},{"node":{"id":"398c98b1-0496-536e-aeb5-088f063ab920","fields":{"slug":"/20241220_분당서울대병원_참관/"},"frontmatter":{"title":"12/20 분당서울대병원 폐기능 검사실 참관"}}},{"node":{"id":"ae45b7bc-f495-577f-a7e1-071a99f82620","fields":{"slug":"/우테코 git/"},"frontmatter":{"title":"우아한테크코스 GitHub"}}},{"node":{"id":"85dc5324-9611-5ff8-a0f1-bf6a22eb4335","fields":{"slug":"/daily_easy_english_expression_summary/"},"frontmatter":{"title":"Daily Easy English Expression"}}},{"node":{"id":"3eb58153-afe0-5d52-a81f-2cb59b028f11","fields":{"slug":"/우아한테크코스 레벨1 고민거리와 자료들/"},"frontmatter":{"title":"우아한테크코스 레벨1 고민거리와 자료들"}}},{"node":{"id":"ea3c6223-2692-5c98-bb92-e2dc93e551c1","fields":{"slug":"/우아한테크코스_7기_BE_레벨1_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 레벨1 회고"}}},{"node":{"id":"5122772d-9cec-51cd-966a-66a9d1bb4c2d","fields":{"slug":"/spring-mvc-dispatcherservlet/"},"frontmatter":{"title":"Understanding DispatcherServlet in Spring MVC"}}},{"node":{"id":"0eaf5ac6-8b17-54cf-8c8a-b5e9cd31368b","fields":{"slug":"/how-spring-injects-httpsession/"},"frontmatter":{"title":"How Spring Injects HttpSession"}}},{"node":{"id":"e971a6f2-daaa-5ed1-a9aa-f99c52972162","fields":{"slug":"/우아한테크코스_7기_BE_레벨2_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 레벨2 회고"}}}]},"previous":{"fields":{"slug":"/1-2. Measuring Performance/"},"frontmatter":{"title":"Measuring Performance"}},"next":{"fields":{"slug":"/2-2. Design principles 4 of MIPS ISA/"},"frontmatter":{"title":"Design principles 4 of MIPS ISA"}}},"pageContext":{"id":"62397c00-742b-5787-91b0-ac2bf4f89c1b","series":null,"previousPostId":"a9a2aee1-bbfd-5d10-984d-8ccc1473c416","nextPostId":"4af0bcf6-9fee-5cf3-b1c9-b7b5835d8770"}},"staticQueryHashes":[],"slicesMap":{}}