{"componentChunkName":"component---src-templates-post-jsx","path":"/0-2. CA Overview/","result":{"data":{"site":{"siteMetadata":{"title":"minjun.blog"}},"markdownRemark":{"id":"6157f41a-d065-58ac-981a-873c63d5df39","excerpt":"contents: 0-1. CA Intro Below your program A simplified view of hardware and software Applications software Written in high-level language Systems software Compilers: translate high-level language to…","html":"<p>contents: <a href=\"/0-1.%20CA%20Intro\" data-wiki-link=\"true\">0-1. CA Intro</a></p>\n<h3>Below your program</h3>\n<p>A simplified view of hardware and software</p>\n<ul>\n<li><strong>Applications software</strong>\n<ul>\n<li>Written in high-level language</li>\n</ul>\n</li>\n<li><strong>Systems software</strong>\n<ul>\n<li><strong>Compilers</strong>: translate high-level language to machine language</li>\n<li><strong>Operating Systems</strong>\n<ul>\n<li>Handle input/output operations</li>\n<li>Manage resources (e.g., storage, memory)</li>\n<li>Schedule tasks (processes)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Hardware</strong></li>\n</ul>\n<p>    - processors memory, I/O devices\n   </p>\n<h2>Execution of programs</h2>\n<h3>Step 1: Translating language</h3>\n<ul>\n<li>From high-level language\n<ul>\n<li>Designed for specific domain</li>\n<li>Provides for productivity and portability</li>\n</ul>\n</li>\n<li>To hardware machine language\n<ul>\n<li>Binary digits</li>\n<li>Encoded instructions</li>\n</ul>\n</li>\n</ul>\n<h3>Step 2: Inputting, outputting, processing, and storing data</h3>\n<p><strong>4 Fundamental HW components</strong></p>\n<ul>\n<li>Processor\n<ul>\n<li>Datapath + control, our primary focus</li>\n</ul>\n</li>\n<li>Memory</li>\n<li>Input device\n<ul>\n<li>Keyboard, mouse, ...</li>\n</ul>\n</li>\n<li>Output device\n<ul>\n<li>Screen, speaker</li>\n</ul>\n</li>\n</ul>\n<p><strong>8 STEPS</strong></p>\n<ol>\n<li>Loading: programs are stored in memory</li>\n<li>Inputting: input device write data to memory</li>\n<li>Fetching: processor fetches instructions and data from memory</li>\n<li>Decoding: processor (control) decodes the instructions and determine what to do</li>\n<li>Executing : processor (datapath) executes the instructions &#x26; stores the computation result to memory</li>\n<li>Outputting: output device sends the result by reading output data from memory</li>\n</ol>\n<h2>Understanding program performance</h2>\n<ul>\n<li>Algorithm\n<ul>\n<li>Determines the number of operations executed</li>\n</ul>\n</li>\n<li>Programming language, compiler, and instruction set architecture (ISA)\n<ul>\n<li>Determine the number of machine instructions executed per operation</li>\n</ul>\n</li>\n<li>Processor and memory system\n<ul>\n<li>Determine how fast instructions can be executed</li>\n</ul>\n</li>\n<li>I/O system (including OS)\n<ul>\n<li>Determines how fast I/O operations are executed</li>\n</ul>\n</li>\n</ul>\n<h2>What is ISA (Instruction Set Architecture)</h2>\n<ul>\n<li>An interface between SW snd HW (includes a set of machine instruction)\n<ul>\n<li>SW is translated into the machine instructions included in the ISA</li>\n<li>HW is designed to support the instructions in ISA</li>\n</ul>\n</li>\n</ul>\n<h2>8 great ideas for designing better computer architecture</h2>\n<ul>\n<li>Design for <strong>Moore's Law</strong>\n<ul>\n<li>Anticipate where the technology will be when the design finishes</li>\n</ul>\n</li>\n<li>Provide <strong>abstraction</strong> to simplify design\n<ul>\n<li>Hide low-level details for the ease of SW development</li>\n</ul>\n</li>\n<li>Make <strong>the common case</strong> fast\n<ul>\n<li>Enhance performance of the common case instead of optimizing the rare case.</li>\n</ul>\n</li>\n<li>Perform via <strong>parallelism</strong>\n<ul>\n<li>Perform operations in parallel</li>\n</ul>\n</li>\n<li>Performance via <strong>pipelining</strong>\n<ul>\n<li>Use a particular patten of parallelism, called pipelining</li>\n</ul>\n</li>\n<li>Performance via <strong>prediction</strong>\n<ul>\n<li>Start working with prediction, stead of waiting until you know for sure</li>\n</ul>\n</li>\n<li><strong>Hierarchy</strong> of memories\n<ul>\n<li>Use the fastest, smallest, and most expensive memory at the top of the hierarchy and the slowest, largest, and cheapest memory at the bottom</li>\n<li>cache > RAM > Large SSD</li>\n</ul>\n</li>\n<li>Dependability via <strong>redundancy</strong>\n<ul>\n<li>Include redundant components that can take over when failure occurs</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"CA Overview","date":"2024년 07월 22일 14:07","updated":"2024년 10월 20일 18:10","tags":["study","컴퓨터구조"],"series":null},"fields":{"slug":"/0-2. CA Overview/","readingTime":{"minutes":2.25}}},"seriesList":{"edges":[{"node":{"id":"d3ec48ed-9d11-50ee-9b04-eafe9716e54f","fields":{"slug":"/nuxt-katex/"},"frontmatter":{"title":"Nuxt content에 Mathtype 사용하기"}}},{"node":{"id":"bfc974be-489f-5e60-936c-a4b7c25346a4","fields":{"slug":"/ZeroPage_지금그때_2022/"},"frontmatter":{"title":"2022 ZeroPage 지금그때"}}},{"node":{"id":"f8f7470f-000c-592f-9791-14400e103d5a","fields":{"slug":"/readme/"},"frontmatter":{"title":"README"}}},{"node":{"id":"0df526dc-c987-5222-8b4d-2047a9ad339f","fields":{"slug":"/why-obsidian/"},"frontmatter":{"title":"기존 블로그 대신 Obsidian을 택한 이유"}}},{"node":{"id":"7cb33a77-2599-5c14-bac0-3e29f2c9db8c","fields":{"slug":"/0-1. CA Intro/"},"frontmatter":{"title":"Computer Architecture Intro"}}},{"node":{"id":"6157f41a-d065-58ac-981a-873c63d5df39","fields":{"slug":"/0-2. CA Overview/"},"frontmatter":{"title":"CA Overview"}}},{"node":{"id":"f3396416-b746-5b19-8c4f-1a7ea8d0ddeb","fields":{"slug":"/1-1. Defining Performance/"},"frontmatter":{"title":"Defining Performance"}}},{"node":{"id":"5977ca74-78d5-58bc-9dd5-608507cd9d3c","fields":{"slug":"/1-2. Measuring Performance/"},"frontmatter":{"title":"Measuring Performance"}}},{"node":{"id":"58014b71-fc4c-59ba-9d37-8d92f8e69fd7","fields":{"slug":"/2-1. Designing principles 1~3 of MIPS ISA/"},"frontmatter":{"title":"Design principles 1~3 of MIPS ISA"}}},{"node":{"id":"5ac33a92-bd8e-5601-841c-bc09c6231861","fields":{"slug":"/2-2. Design principles 4 of MIPS ISA/"},"frontmatter":{"title":"Design principles 4 of MIPS ISA"}}},{"node":{"id":"ec03f0c5-5b8a-5938-a432-9e5e58b5a129","fields":{"slug":"/2-3. Representing Instructions in computer/"},"frontmatter":{"title":"Representing Instructions in computer"}}},{"node":{"id":"cd250cce-b172-5f38-951c-c2991d87a2ae","fields":{"slug":"/2-4. Supporting procedures in computer HW/"},"frontmatter":{"title":"Supporting procedures in computer HW"}}},{"node":{"id":"db871fc4-1bcb-551b-9ec6-e0502ea088e7","fields":{"slug":"/2-5. MIPS memory allocation & addressing/"},"frontmatter":{"title":"MIPS memory allocation & addressing"}}},{"node":{"id":"5828a22e-8af5-5b75-a19a-978b3eb412fe","fields":{"slug":"/3-1. Addition and Subtraction/"},"frontmatter":{"title":"Addition and Subtraction"}}},{"node":{"id":"a798e9ac-b43f-5faf-b715-63a7b05c3cfb","fields":{"slug":"/3-2. Multiplication/"},"frontmatter":{"title":"Multiplication"}}},{"node":{"id":"97b6a40a-f110-5ace-bacf-ca7b7592626b","fields":{"slug":"/3-3. Division/"},"frontmatter":{"title":"Division"}}},{"node":{"id":"9289f33d-d519-51fc-b997-2386f7e24c37","fields":{"slug":"/4-1. Processor Overview/"},"frontmatter":{"title":"Processor Overview"}}},{"node":{"id":"73765852-eabb-5f37-8695-5965ce72fe8a","fields":{"slug":"/4-2. Controlling a datapath/"},"frontmatter":{"title":"Controlling a datapath"}}},{"node":{"id":"1bf87b2e-2e74-5713-8a9b-e7098936f2c6","fields":{"slug":"/4-3. A single-cycle datapath/"},"frontmatter":{"title":"A single-cycle datapath"}}},{"node":{"id":"f192765f-c08d-5aac-9ad1-ea2198c91aaa","fields":{"slug":"/4-4. Pipelining overview/"},"frontmatter":{"title":"Pipelining overview"}}},{"node":{"id":"0bd1001f-2274-58b0-93bf-95250c946a53","fields":{"slug":"/4-5. Handling hazards/"},"frontmatter":{"title":"Handling hazards"}}},{"node":{"id":"bb556933-534b-53bb-8e0c-56226b4f4de9","fields":{"slug":"/4-6. Exceptions/"},"frontmatter":{"title":"Exceptions"}}},{"node":{"id":"90f5d85e-26d3-530b-ae55-a1c6baedb2a0","fields":{"slug":"/5-1. Cache overview/"},"frontmatter":{"title":"Cache overview"}}},{"node":{"id":"98db8787-c027-5459-8e47-617df9e79d42","fields":{"slug":"/5-2. Improving cache performance/"},"frontmatter":{"title":"Improving cache performance"}}},{"node":{"id":"db68c95f-0dab-5c57-a6c4-db6da4771df6","fields":{"slug":"/5-3. Virtual memory Part 1/"},"frontmatter":{"title":"Virtual memory Part 1"}}},{"node":{"id":"48c9d70b-b167-526a-b18a-1be9531b9e15","fields":{"slug":"/5-4. Virtual memory Part 2/"},"frontmatter":{"title":"Virtual memory Part 2"}}},{"node":{"id":"034a587d-35a5-5aaa-aae6-c801321793d4","fields":{"slug":"/interesting topic among sigchi 2024/"},"frontmatter":{"title":"sigchi 2024 관심 주제"}}},{"node":{"id":"1f41f381-3bd0-5019-b899-4cb0056cf4b6","fields":{"slug":"/Respiratory Sound Database 유효성 분석/"},"frontmatter":{"title":"Respiratory Sound Database 유효성 분석"}}},{"node":{"id":"d7c5b9d8-54ac-5e02-ada5-469eb2f101a4","fields":{"slug":"/우아한테크코스_7기_BE_프리코스_1주차_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 프리코스 1주차 회고"}}},{"node":{"id":"a384ae1e-9c60-5810-92d9-35b67c43c223","fields":{"slug":"/우아한테크코스_7기_BE_프리코스_2주차_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 프리코스 2주차 회고"}}},{"node":{"id":"1ff86204-2cda-5e56-9f79-96aa1a026662","fields":{"slug":"/우아한테크코스_7기_BE_프리코스_3주차_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 프리코스 3주차 회고"}}},{"node":{"id":"baeeb5ec-ca8b-5695-ad8b-1b7face6c34d","fields":{"slug":"/우아한테크코스_7기_BE_프리코스_4주차_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 프리코스 4주차 회고"}}},{"node":{"id":"90360acd-fd14-5043-b5c7-cb55e5b73296","fields":{"slug":"/mobile spirometry 관련 자료/"},"frontmatter":{"title":"mobile spirometry 관련 논문"}}},{"node":{"id":"668cea89-8010-524a-b9b7-1907ea54afed","fields":{"slug":"/스마트기기 내장 마이크기반 폐질환 진단기기 개발/"},"frontmatter":{"title":"논문 요약 - 스마트기기 내장 마이크기반 폐질환 진단기기 개발"}}},{"node":{"id":"416c4352-24cc-5107-97f2-3dc9e640201f","fields":{"slug":"/spirosmart/"},"frontmatter":{"title":"논문 요약 - SpiroSmart: Using a Microphone to Measure\rLung Function on a Mobile Phone"}}},{"node":{"id":"88624341-dccd-5d63-8a12-04fe501e7267","fields":{"slug":"/20241122_미팅내용정리/"},"frontmatter":{"title":"11/22 폐음연구 관련 미팅 내용 정리"}}},{"node":{"id":"67e41951-2729-5f5d-ac10-c47e4e865fbd","fields":{"slug":"/ZeroPage_지금그때_2024/"},"frontmatter":{"title":"2024 ZeroPage 지금그때"}}},{"node":{"id":"627aab8a-548f-5bdf-83a5-175656d0a29c","fields":{"slug":"/폐기능검사_지침_요약/"},"frontmatter":{"title":"폐음연구 - 폐기능검사 지침 요약"}}},{"node":{"id":"a1b393dc-31f5-52c0-a596-b4402519d118","fields":{"slug":"/20241220_분당서울대병원_참관/"},"frontmatter":{"title":"12/20 분당서울대병원 폐기능 검사실 참관"}}},{"node":{"id":"e168c0e2-13f0-521b-9008-b73e790b7d2d","fields":{"slug":"/우테코 git/"},"frontmatter":{"title":"우아한테크코스 GitHub"}}},{"node":{"id":"022e6256-58c3-5688-8700-00a0e1ba5632","fields":{"slug":"/daily_easy_english_expression_summary/"},"frontmatter":{"title":"Daily Easy English Expression"}}},{"node":{"id":"5d0cd7c6-7b48-52ee-b62b-323224d4a6e7","fields":{"slug":"/우아한테크코스 레벨1 고민거리와 자료들/"},"frontmatter":{"title":"우아한테크코스 레벨1 고민거리와 자료들"}}},{"node":{"id":"fd9a891c-31f2-54a9-9dd1-f5d5d20e4de3","fields":{"slug":"/우아한테크코스_7기_BE_레벨1_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 레벨1 회고"}}},{"node":{"id":"43821fcd-8636-5c6d-a114-2f00bf36be3f","fields":{"slug":"/spring-mvc-dispatcherservlet/"},"frontmatter":{"title":"Understanding DispatcherServlet in Spring MVC"}}},{"node":{"id":"6e83f990-efb8-5c09-8a25-0df6be8745b6","fields":{"slug":"/test/"},"frontmatter":{"title":"test"}}},{"node":{"id":"43f41ed9-aba4-506f-9486-e6b776de508a","fields":{"slug":"/how-spring-injects-httpsession/"},"frontmatter":{"title":"How Spring Injects HttpSession"}}}]},"previous":{"fields":{"slug":"/0-1. CA Intro/"},"frontmatter":{"title":"Computer Architecture Intro"}},"next":{"fields":{"slug":"/1-1. Defining Performance/"},"frontmatter":{"title":"Defining Performance"}}},"pageContext":{"id":"6157f41a-d065-58ac-981a-873c63d5df39","series":null,"previousPostId":"7cb33a77-2599-5c14-bac0-3e29f2c9db8c","nextPostId":"f3396416-b746-5b19-8c4f-1a7ea8d0ddeb"}},"staticQueryHashes":[],"slicesMap":{}}