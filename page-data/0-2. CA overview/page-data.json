{"componentChunkName":"component---src-templates-post-jsx","path":"/0-2. CA Overview/","result":{"data":{"site":{"siteMetadata":{"title":"minjun.blog"}},"markdownRemark":{"id":"0b650b2c-e1d8-533f-979c-7c4a2f177084","excerpt":"contents: 0-1. CA Intro Below your program A simplified view of hardware and software Applications software Written in high-level language Systems software Compilers: translate high-level language to…","html":"<p>contents: <a href=\"/0-1.%20CA%20Intro\" data-wiki-link=\"true\">0-1. CA Intro</a></p>\n<h3>Below your program</h3>\n<p>A simplified view of hardware and software</p>\n<ul>\n<li><strong>Applications software</strong>\n<ul>\n<li>Written in high-level language</li>\n</ul>\n</li>\n<li><strong>Systems software</strong>\n<ul>\n<li><strong>Compilers</strong>: translate high-level language to machine language</li>\n<li><strong>Operating Systems</strong>\n<ul>\n<li>Handle input/output operations</li>\n<li>Manage resources (e.g., storage, memory)</li>\n<li>Schedule tasks (processes)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Hardware</strong></li>\n</ul>\n<p>    - processors memory, I/O devices\n   </p>\n<h2>Execution of programs</h2>\n<h3>Step 1: Translating language</h3>\n<ul>\n<li>From high-level language\n<ul>\n<li>Designed for specific domain</li>\n<li>Provides for productivity and portability</li>\n</ul>\n</li>\n<li>To hardware machine language\n<ul>\n<li>Binary digits</li>\n<li>Encoded instructions</li>\n</ul>\n</li>\n</ul>\n<h3>Step 2: Inputting, outputting, processing, and storing data</h3>\n<p><strong>4 Fundamental HW components</strong></p>\n<ul>\n<li>Processor\n<ul>\n<li>Datapath + control, our primary focus</li>\n</ul>\n</li>\n<li>Memory</li>\n<li>Input device\n<ul>\n<li>Keyboard, mouse, ...</li>\n</ul>\n</li>\n<li>Output device\n<ul>\n<li>Screen, speaker</li>\n</ul>\n</li>\n</ul>\n<p><strong>8 STEPS</strong></p>\n<ol>\n<li>Loading: programs are stored in memory</li>\n<li>Inputting: input device write data to memory</li>\n<li>Fetching: processor fetches instructions and data from memory</li>\n<li>Decoding: processor (control) decodes the instructions and determine what to do</li>\n<li>Executing : processor (datapath) executes the instructions &#x26; stores the computation result to memory</li>\n<li>Outputting: output device sends the result by reading output data from memory</li>\n</ol>\n<h2>Understanding program performance</h2>\n<ul>\n<li>Algorithm\n<ul>\n<li>Determines the number of operations executed</li>\n</ul>\n</li>\n<li>Programming language, compiler, and instruction set architecture (ISA)\n<ul>\n<li>Determine the number of machine instructions executed per operation</li>\n</ul>\n</li>\n<li>Processor and memory system\n<ul>\n<li>Determine how fast instructions can be executed</li>\n</ul>\n</li>\n<li>I/O system (including OS)\n<ul>\n<li>Determines how fast I/O operations are executed</li>\n</ul>\n</li>\n</ul>\n<h2>What is ISA (Instruction Set Architecture)</h2>\n<ul>\n<li>An interface between SW snd HW (includes a set of machine instruction)\n<ul>\n<li>SW is translated into the machine instructions included in the ISA</li>\n<li>HW is designed to support the instructions in ISA</li>\n</ul>\n</li>\n</ul>\n<h2>8 great ideas for designing better computer architecture</h2>\n<ul>\n<li>Design for <strong>Moore's Law</strong>\n<ul>\n<li>Anticipate where the technology will be when the design finishes</li>\n</ul>\n</li>\n<li>Provide <strong>abstraction</strong> to simplify design\n<ul>\n<li>Hide low-level details for the ease of SW development</li>\n</ul>\n</li>\n<li>Make <strong>the common case</strong> fast\n<ul>\n<li>Enhance performance of the common case instead of optimizing the rare case.</li>\n</ul>\n</li>\n<li>Perform via <strong>parallelism</strong>\n<ul>\n<li>Perform operations in parallel</li>\n</ul>\n</li>\n<li>Performance via <strong>pipelining</strong>\n<ul>\n<li>Use a particular patten of parallelism, called pipelining</li>\n</ul>\n</li>\n<li>Performance via <strong>prediction</strong>\n<ul>\n<li>Start working with prediction, stead of waiting until you know for sure</li>\n</ul>\n</li>\n<li><strong>Hierarchy</strong> of memories\n<ul>\n<li>Use the fastest, smallest, and most expensive memory at the top of the hierarchy and the slowest, largest, and cheapest memory at the bottom</li>\n<li>cache > RAM > Large SSD</li>\n</ul>\n</li>\n<li>Dependability via <strong>redundancy</strong>\n<ul>\n<li>Include redundant components that can take over when failure occurs</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"CA Overview","date":"2024년 07월 22일 14:07","updated":"2024년 10월 20일 18:10","tags":["study","컴퓨터구조"],"series":null},"fields":{"slug":"/0-2. CA Overview/","readingTime":{"minutes":2.25}}},"seriesList":{"edges":[{"node":{"id":"cbe16ee9-7b41-5ddd-a23e-2bfdaa98940d","fields":{"slug":"/nuxt-katex/"},"frontmatter":{"title":"Nuxt content에 Mathtype 사용하기"}}},{"node":{"id":"a827654c-d261-5db3-bff4-d98d76aadbe0","fields":{"slug":"/after-jigeumgeuddae/"},"frontmatter":{"title":"2022 ZeroPage 지금그때"}}},{"node":{"id":"46aaed20-059b-5526-8cea-067a9491f32c","fields":{"slug":"/readme/"},"frontmatter":{"title":"README"}}},{"node":{"id":"25f4be38-5d7e-533d-9343-d399890cd14e","fields":{"slug":"/why-obsidian/"},"frontmatter":{"title":"기존 블로그 대신 Obsidian을 택한 이유"}}},{"node":{"id":"5d5d6131-4e89-5c1e-91ba-e66f285f51b1","fields":{"slug":"/0-1. CA Intro/"},"frontmatter":{"title":"Computer Architecture Intro"}}},{"node":{"id":"0b650b2c-e1d8-533f-979c-7c4a2f177084","fields":{"slug":"/0-2. CA Overview/"},"frontmatter":{"title":"CA Overview"}}},{"node":{"id":"b47b70aa-e8ac-5077-9959-1e864d435bb6","fields":{"slug":"/1-1. Defining Performance/"},"frontmatter":{"title":"Defining Performance"}}},{"node":{"id":"68f03ffa-5893-565d-840e-f0f6ae87f5c9","fields":{"slug":"/1-2. Measuring Performance/"},"frontmatter":{"title":"Measuring Performance"}}},{"node":{"id":"85e63ee9-5665-538b-ac43-635e8220e2d2","fields":{"slug":"/2-1. Designing principles 1~3 of MIPS ISA/"},"frontmatter":{"title":"Design principles 1~3 of MIPS ISA"}}},{"node":{"id":"2e0c3819-8874-5c1d-a775-2a6a841b21b5","fields":{"slug":"/2-2. Design principles 4 of MIPS ISA/"},"frontmatter":{"title":"Design principles 4 of MIPS ISA"}}},{"node":{"id":"0c2c4f4c-9eb8-50df-891b-1365303231f7","fields":{"slug":"/2-3. Representing Instructions in computer/"},"frontmatter":{"title":"Representing Instructions in computer"}}},{"node":{"id":"4007a96e-86f2-5259-a70c-a65c3314bfaf","fields":{"slug":"/2-4. Supporting procedures in computer HW/"},"frontmatter":{"title":"Supporting procedures in computer HW"}}},{"node":{"id":"a00646d3-2559-556c-8916-2abc285e908f","fields":{"slug":"/2-5. MIPS memory allocation & addressing/"},"frontmatter":{"title":"MIPS memory allocation & addressing"}}},{"node":{"id":"dda07f05-3192-506d-b828-88e695f76629","fields":{"slug":"/3-1. Addition and Subtraction/"},"frontmatter":{"title":"Addition and Subtraction"}}},{"node":{"id":"8c6491f5-b0a8-5e0e-b921-e7b272121ee3","fields":{"slug":"/3-2. Multiplication/"},"frontmatter":{"title":"Multiplication"}}},{"node":{"id":"6f5284e4-f1a3-599c-8a4a-ddb05289eb05","fields":{"slug":"/3-3. Division/"},"frontmatter":{"title":"Division"}}},{"node":{"id":"6abd7845-2b09-5035-9dac-4646df83dfbe","fields":{"slug":"/4-1. Processor Overview/"},"frontmatter":{"title":"Processor Overview"}}},{"node":{"id":"d464a6fe-8125-5fc7-a055-0af843f54235","fields":{"slug":"/4-2. Controlling a datapath/"},"frontmatter":{"title":"Controlling a datapath"}}},{"node":{"id":"ba9849bc-e776-5a83-993e-4e82afc0729e","fields":{"slug":"/4-3. A single-cycle datapath/"},"frontmatter":{"title":"A single-cycle datapath"}}},{"node":{"id":"182c0349-da93-5b44-bfee-5e51362c5509","fields":{"slug":"/4-4. Pipelining overview/"},"frontmatter":{"title":"Pipelining overview"}}},{"node":{"id":"f08deb14-30ad-595b-8c9d-d793785b9ce0","fields":{"slug":"/4-5. Handling hazards/"},"frontmatter":{"title":"Handling hazards"}}},{"node":{"id":"0f491438-cb0c-53b7-80ac-81d3c8508373","fields":{"slug":"/4-6. Exceptions/"},"frontmatter":{"title":"Exceptions"}}},{"node":{"id":"71a9c3b8-4bb1-5ede-aead-5834bff20a32","fields":{"slug":"/5-1. Cache overview/"},"frontmatter":{"title":"Cache overview"}}},{"node":{"id":"f46d6482-1ff7-5199-b386-b831df7f00fd","fields":{"slug":"/5-2. Improving cache performance/"},"frontmatter":{"title":"Improving cache performance"}}},{"node":{"id":"06867ecb-c90b-5f7e-b053-88ac48bd719c","fields":{"slug":"/5-3. Virtual memory Part 1/"},"frontmatter":{"title":"Virtual memory Part 1"}}},{"node":{"id":"ed0e2b20-921b-5a3b-8aad-9f84da9e48ec","fields":{"slug":"/5-4. Virtual memory Part 2/"},"frontmatter":{"title":"Virtual memory Part 2"}}},{"node":{"id":"87ccd6ac-f6b1-5543-8b35-64c214bd6af6","fields":{"slug":"/interesting topic among sigchi 2024/"},"frontmatter":{"title":"sigchi 2024 관심 주제"}}},{"node":{"id":"2bb69d39-3a4c-581b-932c-2ae84f33b664","fields":{"slug":"/Respiratory Sound Database 유효성 분석/"},"frontmatter":{"title":"Respiratory Sound Database 유효성 분석"}}},{"node":{"id":"cba62564-b5aa-5ad0-925a-51c9254c5e5c","fields":{"slug":"/우아한테크코스 7기 프리코스 1주차/"},"frontmatter":{"title":"우아한테크코스 7기 프리코스 1주차"}}}]},"previous":{"fields":{"slug":"/0-1. CA Intro/"},"frontmatter":{"title":"Computer Architecture Intro"}},"next":{"fields":{"slug":"/1-1. Defining Performance/"},"frontmatter":{"title":"Defining Performance"}}},"pageContext":{"id":"0b650b2c-e1d8-533f-979c-7c4a2f177084","series":null,"previousPostId":"5d5d6131-4e89-5c1e-91ba-e66f285f51b1","nextPostId":"b47b70aa-e8ac-5077-9959-1e864d435bb6"}},"staticQueryHashes":[],"slicesMap":{}}