{"componentChunkName":"component---src-templates-post-jsx","path":"/how-spring-injects-httpsession/","result":{"data":{"site":{"siteMetadata":{"title":"minjun.blog"}},"markdownRemark":{"id":"43f41ed9-aba4-506f-9486-e6b776de508a","excerpt":"지난 포스트에서 DispatcherServlet에 대해 공부를 했고, 요즘은 로그인 과정에 대해 배우고 있다. 그 중에서 session 로그인 과정을 공부하던 중에 의문이 생기는 코드가 있어서 이번 포스트에서는 이 코드를 실행할 때 Spring 내부에서 일어나는 일련의 과정을 알아보고자 한다. 문제 상황 테스트 코드를 보면 단순히 이메일과 비밀번호를 파라…","html":"<p>지난 포스트에서 DispatcherServlet에 대해 공부를 했고, 요즘은 로그인 과정에 대해 배우고 있다. 그 중에서 session 로그인 과정을 공부하던 중에 의문이 생기는 코드가 있어서 이번 포스트에서는 이 코드를 실행할 때 Spring 내부에서 일어나는 일련의 과정을 알아보고자 한다.</p>\n<h2>문제 상황</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// cholog, spring-auth-1 코드 중 세션 관련 일부</span>\n\n<span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login/session\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">sessionLogin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpSession</span> session<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> paramMap <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">String</span> email <span class=\"token operator\">=</span> paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token constant\">USERNAME_FIELD</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PASSWORD_FIELD</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>authService<span class=\"token punctuation\">.</span><span class=\"token function\">checkInvalidLogin</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AuthorizationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n    session<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SESSION_KEY</span><span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>  \n  \n<span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/members/me/session\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MemberResponse</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findMyInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSession</span> session<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">String</span> email <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SESSION_KEY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">MemberResponse</span> member <span class=\"token operator\">=</span> authService<span class=\"token punctuation\">.</span><span class=\"token function\">findMember</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>  \n<span class=\"token keyword\">void</span> <span class=\"token function\">sessionLogin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">String</span> cookie <span class=\"token operator\">=</span> <span class=\"token class-name\">RestAssured</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">given</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">param</span><span class=\"token punctuation\">(</span><span class=\"token constant\">USERNAME_FIELD</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">EMAIL</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">param</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PASSWORD_FIELD</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PASSWORD</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login/session\"</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">extract</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Set-Cookie\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\";\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token class-name\">MemberResponse</span> member <span class=\"token operator\">=</span> <span class=\"token class-name\">RestAssured</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">given</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cookie\"</span><span class=\"token punctuation\">,</span> cookie<span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MediaType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_JSON_VALUE</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/members/me/session\"</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">statusCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OK</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">extract</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">as</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MemberResponse</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">.</span><span class=\"token function\">getEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token constant\">EMAIL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>테스트 코드를 보면 단순히 이메일과 비밀번호를 파라미터 값으로 넘겨주고 있는데 컨트롤러의 PostMapping 해주는 코드에서는 request외에도 session을 받아주고, 메서드 내부에서도 <code class=\"language-text\">session.setAttribute(SESSION_KEY, email)</code> 을 해주고 있다.</p>\n<p>누가 메서드의 파라미터로 session까지 넣어주는걸까?</p>\n<h2>Spring MVC의 핵심 흐름</h2>\n<p><a href=\"/spring-mvc-dispatcherservlet\" data-wiki-link=\"true\">spring-mvc-dispatcherservlet</a>에서 다루었듯이 파라미터를 처리하는 역할을 담당하는 건 ArgumentResolver의 한 종류이다. Spring MVC는 컨트롤러의 메서드를 실행할 때 실제로 HandlerMethodArgumentResolver 목록을 순회하며 파라미터를 처리한다.</p>\n<p>세부 흐름은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\">DispatcherServlet\n └── HandlerAdapter\n      └── InvocableHandlerMethod\n           └── HandlerMethodArgumentResolverComposite\n                └── 각 ArgumentResolver의 <span class=\"token function\">supportsParameter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 호출\n</code></pre></div>\n<p>코드 상에서는 다음과 같은 모습으로 호출이된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// InvocableHandlerMethod.class 내부</span>\n\n<span class=\"token keyword\">protected</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getMethodArgumentValues</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NativeWebRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">ModelAndViewContainer</span> mavContainer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> providedArgs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">MethodParameter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> parameters <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethodParameters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">return</span> <span class=\"token constant\">EMPTY_ARGS</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>parameters<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  \n  \n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> parameters<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token class-name\">MethodParameter</span> parameter <span class=\"token operator\">=</span> parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  \n            parameter<span class=\"token punctuation\">.</span><span class=\"token function\">initParameterNameDiscovery</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parameterNameDiscoverer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">findProvidedArgument</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">,</span> providedArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resolvers<span class=\"token punctuation\">.</span><span class=\"token function\">supportsParameter</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token function\">formatArgumentError</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">,</span> <span class=\"token string\">\"No suitable resolver\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                <span class=\"token punctuation\">}</span>  \n  \n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n                    args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resolvers<span class=\"token punctuation\">.</span><span class=\"token function\">resolveArgument</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">,</span> mavContainer<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataBinderFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> var10<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                        <span class=\"token class-name\">String</span> exMsg <span class=\"token operator\">=</span> var10<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exMsg <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>exMsg<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">.</span><span class=\"token function\">getExecutable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toGenericString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                            logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token function\">formatArgumentError</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">,</span> exMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                        <span class=\"token punctuation\">}</span>  \n                    <span class=\"token punctuation\">}</span>  \n  \n                    <span class=\"token keyword\">throw</span> var10<span class=\"token punctuation\">;</span>  \n                <span class=\"token punctuation\">}</span>  \n            <span class=\"token punctuation\">}</span>  \n        <span class=\"token punctuation\">}</span>  \n  \n        <span class=\"token keyword\">return</span> args<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이때 HttpSession 타입을 지원해주는 게 바로 ServletRequestMethodArgumentResolver이다.</p>\n<h2>ArgumentResolver가 뭘 해주나?</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">HandlerMethodArgumentResolver</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">supportsParameter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodParameter</span> parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token annotation punctuation\">@Nullable</span>  \n    <span class=\"token class-name\">Object</span> <span class=\"token function\">resolveArgument</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodParameter</span> parameter<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">ModelAndViewContainer</span> mavContainer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NativeWebRequest</span> webRequest<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">WebDataBinderFactory</span> binderFactory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ArgumentResolver는 각 파라미터를 지원해주는지 판단하고, 변환해준다.</p>\n<h3>그 중에서 ServletRequestMethodArgumentResolver은?</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// ServletRequestMethodArgumentResolver.class</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">supportsParameter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodParameter</span> parameter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> paramType <span class=\"token operator\">=</span> parameter<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">WebRequest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span>paramType<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n    <span class=\"token class-name\">ServletRequest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span>paramType<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>   \n    <span class=\"token class-name\">MultipartRequest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span>paramType<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n    <span class=\"token class-name\">HttpSession</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span>paramType<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n    <span class=\"token class-name\">PushBuilder</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span>paramType<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n    <span class=\"token class-name\">Principal</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span>paramType<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token operator\">!</span>parameter<span class=\"token punctuation\">.</span><span class=\"token function\">hasParameterAnnotations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n    <span class=\"token class-name\">InputStream</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span>paramType<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n    <span class=\"token class-name\">Reader</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span>paramType<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> \n    <span class=\"token class-name\">HttpMethod</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token operator\">==</span> paramType <span class=\"token operator\">||</span> \n    <span class=\"token class-name\">Locale</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token operator\">==</span> paramType <span class=\"token operator\">||</span> \n    <span class=\"token class-name\">TimeZone</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token operator\">==</span> paramType <span class=\"token operator\">||</span> \n    <span class=\"token class-name\">ZoneId</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token operator\">==</span> paramType<span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Nullable</span>  \n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">resolveArgument</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> paramType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSession</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span>paramType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token class-name\">HttpSession</span> session <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>session <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>paramType<span class=\"token punctuation\">.</span><span class=\"token function\">isInstance</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token class-name\">String</span> var13 <span class=\"token operator\">=</span> paramType<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Current session is not of type [\"</span> <span class=\"token operator\">+</span> var13 <span class=\"token operator\">+</span> <span class=\"token string\">\"]: \"</span> <span class=\"token operator\">+</span> session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">return</span> session<span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그럼 다시 원래 코드로 돌아와서,</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login/session\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">sessionLogin</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpSession</span> session<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> paramMap <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">String</span> email <span class=\"token operator\">=</span> paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token constant\">USERNAME_FIELD</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PASSWORD_FIELD</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>authService<span class=\"token punctuation\">.</span><span class=\"token function\">checkInvalidLogin</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AuthorizationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n    session<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SESSION_KEY</span><span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>  </code></pre></div>\n<p>파라미터로 HttpSession을 받고 있기 때문에 ServletRequestMethodArgumentResolver.resolveArgument에서 session을 반환해줄 수 있는 것이다.</p>\n<h2>번외</h2>\n<h3>성능 이슈는 없을까?</h3>\n<p>Q. Spring MVC는 컨트롤러의 메서드를 실행할 때 실제로 HandlerMethodArgumentResolver 목록을 순회하며 파라미터를 처리한다고 했는데, HandlerMethodArgumentResolver가 많으면 매번 찾을 때마다 성능 문제가 생기지 않을까?</p>\n<p>A. Spring에서 이미 고려해주고 있다.\nHandlerMethodArgumentResolverComposite의 필드로 캐시된 값들을 관리해주고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HandlerMethodArgumentResolverComposite</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HandlerMethodArgumentResolver</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MethodParameter</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HandlerMethodArgumentResolver</span><span class=\"token punctuation\">></span></span> argumentResolverCache<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"How Spring Injects HttpSession","date":"2025년 05월 10일 09:05","updated":"2025년 05월 11일 22:05","tags":["spring"],"series":null},"fields":{"slug":"/how-spring-injects-httpsession/","readingTime":{"minutes":4.51}}},"seriesList":{"edges":[{"node":{"id":"d3ec48ed-9d11-50ee-9b04-eafe9716e54f","fields":{"slug":"/nuxt-katex/"},"frontmatter":{"title":"Nuxt content에 Mathtype 사용하기"}}},{"node":{"id":"bfc974be-489f-5e60-936c-a4b7c25346a4","fields":{"slug":"/ZeroPage_지금그때_2022/"},"frontmatter":{"title":"2022 ZeroPage 지금그때"}}},{"node":{"id":"f8f7470f-000c-592f-9791-14400e103d5a","fields":{"slug":"/readme/"},"frontmatter":{"title":"README"}}},{"node":{"id":"0df526dc-c987-5222-8b4d-2047a9ad339f","fields":{"slug":"/why-obsidian/"},"frontmatter":{"title":"기존 블로그 대신 Obsidian을 택한 이유"}}},{"node":{"id":"7cb33a77-2599-5c14-bac0-3e29f2c9db8c","fields":{"slug":"/0-1. CA Intro/"},"frontmatter":{"title":"Computer Architecture Intro"}}},{"node":{"id":"6157f41a-d065-58ac-981a-873c63d5df39","fields":{"slug":"/0-2. CA Overview/"},"frontmatter":{"title":"CA Overview"}}},{"node":{"id":"f3396416-b746-5b19-8c4f-1a7ea8d0ddeb","fields":{"slug":"/1-1. Defining Performance/"},"frontmatter":{"title":"Defining Performance"}}},{"node":{"id":"5977ca74-78d5-58bc-9dd5-608507cd9d3c","fields":{"slug":"/1-2. Measuring Performance/"},"frontmatter":{"title":"Measuring Performance"}}},{"node":{"id":"58014b71-fc4c-59ba-9d37-8d92f8e69fd7","fields":{"slug":"/2-1. Designing principles 1~3 of MIPS ISA/"},"frontmatter":{"title":"Design principles 1~3 of MIPS ISA"}}},{"node":{"id":"5ac33a92-bd8e-5601-841c-bc09c6231861","fields":{"slug":"/2-2. Design principles 4 of MIPS ISA/"},"frontmatter":{"title":"Design principles 4 of MIPS ISA"}}},{"node":{"id":"ec03f0c5-5b8a-5938-a432-9e5e58b5a129","fields":{"slug":"/2-3. Representing Instructions in computer/"},"frontmatter":{"title":"Representing Instructions in computer"}}},{"node":{"id":"cd250cce-b172-5f38-951c-c2991d87a2ae","fields":{"slug":"/2-4. Supporting procedures in computer HW/"},"frontmatter":{"title":"Supporting procedures in computer HW"}}},{"node":{"id":"db871fc4-1bcb-551b-9ec6-e0502ea088e7","fields":{"slug":"/2-5. MIPS memory allocation & addressing/"},"frontmatter":{"title":"MIPS memory allocation & addressing"}}},{"node":{"id":"5828a22e-8af5-5b75-a19a-978b3eb412fe","fields":{"slug":"/3-1. Addition and Subtraction/"},"frontmatter":{"title":"Addition and Subtraction"}}},{"node":{"id":"a798e9ac-b43f-5faf-b715-63a7b05c3cfb","fields":{"slug":"/3-2. Multiplication/"},"frontmatter":{"title":"Multiplication"}}},{"node":{"id":"97b6a40a-f110-5ace-bacf-ca7b7592626b","fields":{"slug":"/3-3. Division/"},"frontmatter":{"title":"Division"}}},{"node":{"id":"9289f33d-d519-51fc-b997-2386f7e24c37","fields":{"slug":"/4-1. Processor Overview/"},"frontmatter":{"title":"Processor Overview"}}},{"node":{"id":"73765852-eabb-5f37-8695-5965ce72fe8a","fields":{"slug":"/4-2. Controlling a datapath/"},"frontmatter":{"title":"Controlling a datapath"}}},{"node":{"id":"1bf87b2e-2e74-5713-8a9b-e7098936f2c6","fields":{"slug":"/4-3. A single-cycle datapath/"},"frontmatter":{"title":"A single-cycle datapath"}}},{"node":{"id":"f192765f-c08d-5aac-9ad1-ea2198c91aaa","fields":{"slug":"/4-4. Pipelining overview/"},"frontmatter":{"title":"Pipelining overview"}}},{"node":{"id":"0bd1001f-2274-58b0-93bf-95250c946a53","fields":{"slug":"/4-5. Handling hazards/"},"frontmatter":{"title":"Handling hazards"}}},{"node":{"id":"bb556933-534b-53bb-8e0c-56226b4f4de9","fields":{"slug":"/4-6. Exceptions/"},"frontmatter":{"title":"Exceptions"}}},{"node":{"id":"90f5d85e-26d3-530b-ae55-a1c6baedb2a0","fields":{"slug":"/5-1. Cache overview/"},"frontmatter":{"title":"Cache overview"}}},{"node":{"id":"98db8787-c027-5459-8e47-617df9e79d42","fields":{"slug":"/5-2. Improving cache performance/"},"frontmatter":{"title":"Improving cache performance"}}},{"node":{"id":"db68c95f-0dab-5c57-a6c4-db6da4771df6","fields":{"slug":"/5-3. Virtual memory Part 1/"},"frontmatter":{"title":"Virtual memory Part 1"}}},{"node":{"id":"48c9d70b-b167-526a-b18a-1be9531b9e15","fields":{"slug":"/5-4. Virtual memory Part 2/"},"frontmatter":{"title":"Virtual memory Part 2"}}},{"node":{"id":"034a587d-35a5-5aaa-aae6-c801321793d4","fields":{"slug":"/interesting topic among sigchi 2024/"},"frontmatter":{"title":"sigchi 2024 관심 주제"}}},{"node":{"id":"1f41f381-3bd0-5019-b899-4cb0056cf4b6","fields":{"slug":"/Respiratory Sound Database 유효성 분석/"},"frontmatter":{"title":"Respiratory Sound Database 유효성 분석"}}},{"node":{"id":"d7c5b9d8-54ac-5e02-ada5-469eb2f101a4","fields":{"slug":"/우아한테크코스_7기_BE_프리코스_1주차_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 프리코스 1주차 회고"}}},{"node":{"id":"a384ae1e-9c60-5810-92d9-35b67c43c223","fields":{"slug":"/우아한테크코스_7기_BE_프리코스_2주차_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 프리코스 2주차 회고"}}},{"node":{"id":"1ff86204-2cda-5e56-9f79-96aa1a026662","fields":{"slug":"/우아한테크코스_7기_BE_프리코스_3주차_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 프리코스 3주차 회고"}}},{"node":{"id":"baeeb5ec-ca8b-5695-ad8b-1b7face6c34d","fields":{"slug":"/우아한테크코스_7기_BE_프리코스_4주차_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 프리코스 4주차 회고"}}},{"node":{"id":"90360acd-fd14-5043-b5c7-cb55e5b73296","fields":{"slug":"/mobile spirometry 관련 자료/"},"frontmatter":{"title":"mobile spirometry 관련 논문"}}},{"node":{"id":"668cea89-8010-524a-b9b7-1907ea54afed","fields":{"slug":"/스마트기기 내장 마이크기반 폐질환 진단기기 개발/"},"frontmatter":{"title":"논문 요약 - 스마트기기 내장 마이크기반 폐질환 진단기기 개발"}}},{"node":{"id":"416c4352-24cc-5107-97f2-3dc9e640201f","fields":{"slug":"/spirosmart/"},"frontmatter":{"title":"논문 요약 - SpiroSmart: Using a Microphone to Measure\rLung Function on a Mobile Phone"}}},{"node":{"id":"88624341-dccd-5d63-8a12-04fe501e7267","fields":{"slug":"/20241122_미팅내용정리/"},"frontmatter":{"title":"11/22 폐음연구 관련 미팅 내용 정리"}}},{"node":{"id":"67e41951-2729-5f5d-ac10-c47e4e865fbd","fields":{"slug":"/ZeroPage_지금그때_2024/"},"frontmatter":{"title":"2024 ZeroPage 지금그때"}}},{"node":{"id":"627aab8a-548f-5bdf-83a5-175656d0a29c","fields":{"slug":"/폐기능검사_지침_요약/"},"frontmatter":{"title":"폐음연구 - 폐기능검사 지침 요약"}}},{"node":{"id":"a1b393dc-31f5-52c0-a596-b4402519d118","fields":{"slug":"/20241220_분당서울대병원_참관/"},"frontmatter":{"title":"12/20 분당서울대병원 폐기능 검사실 참관"}}},{"node":{"id":"e168c0e2-13f0-521b-9008-b73e790b7d2d","fields":{"slug":"/우테코 git/"},"frontmatter":{"title":"우아한테크코스 GitHub"}}},{"node":{"id":"022e6256-58c3-5688-8700-00a0e1ba5632","fields":{"slug":"/daily_easy_english_expression_summary/"},"frontmatter":{"title":"Daily Easy English Expression"}}},{"node":{"id":"5d0cd7c6-7b48-52ee-b62b-323224d4a6e7","fields":{"slug":"/우아한테크코스 레벨1 고민거리와 자료들/"},"frontmatter":{"title":"우아한테크코스 레벨1 고민거리와 자료들"}}},{"node":{"id":"fd9a891c-31f2-54a9-9dd1-f5d5d20e4de3","fields":{"slug":"/우아한테크코스_7기_BE_레벨1_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 레벨1 회고"}}},{"node":{"id":"43821fcd-8636-5c6d-a114-2f00bf36be3f","fields":{"slug":"/spring-mvc-dispatcherservlet/"},"frontmatter":{"title":"Understanding DispatcherServlet in Spring MVC"}}},{"node":{"id":"6e83f990-efb8-5c09-8a25-0df6be8745b6","fields":{"slug":"/test/"},"frontmatter":{"title":"test"}}},{"node":{"id":"43f41ed9-aba4-506f-9486-e6b776de508a","fields":{"slug":"/how-spring-injects-httpsession/"},"frontmatter":{"title":"How Spring Injects HttpSession"}}}]},"previous":{"fields":{"slug":"/spring-mvc-dispatcherservlet/"},"frontmatter":{"title":"Understanding DispatcherServlet in Spring MVC"}},"next":null},"pageContext":{"id":"43f41ed9-aba4-506f-9486-e6b776de508a","series":null,"previousPostId":"43821fcd-8636-5c6d-a114-2f00bf36be3f","nextPostId":null}},"staticQueryHashes":[],"slicesMap":{}}