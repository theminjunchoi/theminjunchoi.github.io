{"componentChunkName":"component---src-templates-post-jsx","path":"/how-spring-handle-websocket/","result":{"data":{"site":{"siteMetadata":{"title":"minjun.blog"}},"markdownRemark":{"id":"0822585b-79bf-5ce3-b125-90763fa797cf","excerpt":"how-spring-injects-httpsession 이 포스트를 읽고 오면 이해가 더 잘 됩니다! Spring에서 어떻게 WebSocket 연결을 수립할까? 그 과정을 찾아가보자. Spring에서 연결방식을 WebSocket으로 업그레이드 하는 방법 handshake 성공 후에는? 물리적 TCP 연결은 동일함 메시지들은 DispatcherServlet…","html":"<p><a href=\"/how-spring-injects-httpsession\" data-wiki-link=\"true\">how-spring-injects-httpsession</a> 이 포스트를 읽고 오면 이해가 더 잘 됩니다!</p>\n<p>Spring에서 어떻게 WebSocket 연결을 수립할까? 그 과정을 찾아가보자.</p>\n<h2>Spring에서 연결방식을 WebSocket으로 업그레이드 하는 방법</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">HTTP Request (GET /ws) \n\t↓ \nDispatcherServlet.doService() \n\t↓ \nDispatcherServlet.doDispatch() \n\t↓ \nHandlerMapping.getHandler() (여기서 WebSocketHandlerMapping 사용) \n\t↓ \nHandlerAdapter.handle() (여기서 HttpRequestHandlerAdapter 사용) \n\t↓ \nWebSocketHttpRequestHandler.handleRequest() \n\t↓ \nDefaultHandshakeHandler.doHandshake()\n\t↓ \nRequestUpgradeStrategy.upgrade (HTTP 연결이 WebSocket 연결로 업그레이드)\n\t↓\nDispatcherServlet 완전히 빠짐\n\t↓ \n이후 모든 메시지는 WebSocket 핸들러가 직접처리</code></pre></div>\n<h3>handshake 성공 후에는?</h3>\n<ul>\n<li>물리적 TCP 연결은 동일함</li>\n<li>메시지들은 DispatcherServlet을 안거쳐감</li>\n<li>Tomcat/Jetty가 직접 WebSocket 핸들러로 라우팅</li>\n<li>Spring WebSocket 인프라가 직접 처리</li>\n</ul>\n<h3>흐름 비교</h3>\n<h4>HTTP 요청</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">TCP → Tomcat → DispatcherServlet → Controller → 응답 </code></pre></div>\n<h4>WebSocket 메시지 (handshake 성공 후)</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">TCP → Tomcat WebSocket Container → SubProtocolWebSocketHandler → \bChannelInterceptor → @MessageMapping</code></pre></div>\n<h2>클라이언트에서 서버로</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">WebSocket Frame (STOMP CONNECT)\n    ↓\nSubProtocolWebSocketHandler.handleMessage() (서블릿 컨테이너가 호출함)\n    ↓  \nStompSubProtocolHandler.handleMessageFromClient()\n    ↓\nclientInboundChannel로 Spring Message 전송\n    ↓\nChannelInterceptor (커스텀한 인터셉터가 여기서 동작!)\n    ↓\n@MessageMapping 컨트롤러 (전후로 presend, postsend)</code></pre></div>\n<h3>SubProtocolWebSocketHandler.handleMessage() 호출</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token annotation punctuation\">@Override</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebSocketSession</span> session<span class=\"token punctuation\">,</span> <span class=\"token class-name\">WebSocketMessage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> message<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>  \n\n\t<span class=\"token comment\">// 세션 갖고오기</span>\n    <span class=\"token class-name\">WebSocketSessionHolder</span> holder <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sessions<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>holder <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       session <span class=\"token operator\">=</span> holder<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    \n    <span class=\"token comment\">// 프로토콜 핸들러 찾기 (STOMP, etc, ...)</span>\n    <span class=\"token class-name\">SubProtocolHandler</span> protocolHandler <span class=\"token operator\">=</span> <span class=\"token function\">findProtocolHandler</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\n\t<span class=\"token comment\">// 위임하기</span>\n    protocolHandler<span class=\"token punctuation\">.</span><span class=\"token function\">handleMessageFromClient</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clientInboundChannel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>holder <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       holder<span class=\"token punctuation\">.</span><span class=\"token function\">setHasHandledMessages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>StompSubProtocolHandler.handleMessageFromClient() 호출</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleMessageFromClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebSocketSession</span> session<span class=\"token punctuation\">,</span>  \n       <span class=\"token class-name\">WebSocketMessage</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> webSocketMessage<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MessageChannel</span> targetChannel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token comment\">/* 위에서 생략된 내용들\n    1. WebSocket 메시지 -> ByteBuffer로 변환\n    2. STOMP 프레임 디코딩\n    3. 순서 보장처리 (하나의 메시지가 프레임단위로 쪼개져서 올 수도 있음)\n    */</span>\n\n\t<span class=\"token comment\">// 4. 각 STOMP 메시지별 처리</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> message <span class=\"token operator\">:</span> messages<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token class-name\">StompHeaderAccessor</span> headerAccessor <span class=\"token operator\">=</span>  \n             <span class=\"token class-name\">MessageHeaderAccessor</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAccessor</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StompHeaderAccessor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\n       <span class=\"token class-name\">StompCommand</span> command <span class=\"token operator\">=</span> headerAccessor<span class=\"token punctuation\">.</span><span class=\"token function\">getCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token keyword\">boolean</span> isConnect <span class=\"token operator\">=</span> <span class=\"token class-name\">StompCommand</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CONNECT</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">StompCommand</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STOMP</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n       <span class=\"token keyword\">boolean</span> sent <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n\t\t  <span class=\"token comment\">// 5. 세션 정보를 Spring Message 헤더에 설정</span>\n          headerAccessor<span class=\"token punctuation\">.</span><span class=\"token function\">setSessionId</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          headerAccessor<span class=\"token punctuation\">.</span><span class=\"token function\">setSessionAttributes</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">getAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          headerAccessor<span class=\"token punctuation\">.</span><span class=\"token function\">setUser</span><span class=\"token punctuation\">(</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isConnect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n             headerAccessor<span class=\"token punctuation\">.</span><span class=\"token function\">setUserChangeCallback</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>  \n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> user <span class=\"token operator\">!=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getPrincipal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stompAuthentications<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                <span class=\"token punctuation\">}</span>  \n             <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          <span class=\"token punctuation\">}</span>  \n          headerAccessor<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SimpMessageHeaderAccessor</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HEART_BEAT_HEADER</span><span class=\"token punctuation\">,</span> headerAccessor<span class=\"token punctuation\">.</span><span class=\"token function\">getHeartbeat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          \n          <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token comment\">// 여기서 \bclientInboudChannel로 전송! </span>\n            <span class=\"token comment\">// → channelToUse.send()</span>\n            <span class=\"token comment\">// → AbstractMessageChannel.send() </span>\n            <span class=\"token comment\">// → ChannelInterceptorChain.applyPreSend() </span>\n            <span class=\"token comment\">// → ChannelInterceptor.preSend() 호출됨! (Custom)</span>\n            <span class=\"token comment\">// → 실제메시지 처리 (@MessageMapping)</span>\n            <span class=\"token comment\">// → SimpleBrokerMessageHandler의 SubscriptionRegistry에 구독정보 저장</span>\n            <span class=\"token comment\">// → ChannelInterceptorChain.applyPostSend()</span>\n            <span class=\"token comment\">// → ChannelIntercaptor.postSend() 호출됨 (Custom)</span>\n\t         <span class=\"token class-name\">SimpAttributesContextHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttributesFromMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n             sent <span class=\"token operator\">=</span> channelToUse<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>eventPublisher <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                   <span class=\"token class-name\">Principal</span> user <span class=\"token operator\">=</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isConnect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                      <span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>eventPublisher<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SessionConnectEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                   <span class=\"token punctuation\">}</span>  \n                   <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StompCommand</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SUBSCRIBE</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                      <span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>eventPublisher<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SessionSubscribeEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                   <span class=\"token punctuation\">}</span>  \n                   <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StompCommand</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UNSUBSCRIBE</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                      <span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>eventPublisher<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SessionUnsubscribeEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                   <span class=\"token punctuation\">}</span>  \n                <span class=\"token punctuation\">}</span>  \n             <span class=\"token punctuation\">}</span>  \n          <span class=\"token punctuation\">}</span>  \n          <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>  \n             <span class=\"token class-name\">SimpAttributesContextHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">resetAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          <span class=\"token punctuation\">}</span>  \n       <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>서버에서 클라이언트로!</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@Controller에서 SimpMessagingTemplate.send()\n    ↓\nclientOutboundChannel로 메시지 전송\n    ↓\nSubProtocolWebSocketHandler.handleMessage()\n    ↓\nStompSubProtocolHandler.handleMessageToClient()\n    ↓\nWebSocket Frame으로 변환해서 클라이언트 전송 (Tomcat/Jetty에서)</code></pre></div>\n<h3>@Controller에서 SimpMessagingTemplate.send()</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@MessageMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/room/{joinCode}/update-players\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">broadcastPlayers</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@DestinationVariable</span> <span class=\"token class-name\">String</span> joinCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">PlayerResponse</span><span class=\"token punctuation\">></span></span> responses <span class=\"token operator\">=</span> roomService<span class=\"token punctuation\">.</span><span class=\"token function\">getAllPlayers</span><span class=\"token punctuation\">(</span>joinCode<span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PlayerResponse</span><span class=\"token operator\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">)</span>  \n            <span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    messagingTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/topic/room/\"</span> <span class=\"token operator\">+</span> joinCode<span class=\"token punctuation\">,</span>  \n            <span class=\"token class-name\">WebSocketResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>responses<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>SimpMessagingTemplate 내부동작</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">D</span> destination<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> payload<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> headers<span class=\"token punctuation\">,</span>  \n       <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">MessagePostProcessor</span> postProcessor<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MessagingException</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token class-name\">Message</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> message <span class=\"token operator\">=</span> <span class=\"token function\">doConvert</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> headers<span class=\"token punctuation\">,</span> postProcessor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// send -> ... -> AbstractMessageChannel.send()</span>\n<span class=\"token annotation punctuation\">@Override</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> message<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Message must not be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">Message</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> messageToUse <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">ChannelInterceptorChain</span> chain <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelInterceptorChain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">boolean</span> sent <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n\n\t\t<span class=\"token comment\">// 커스텀한 interceptor의 presend 호출</span>\n       messageToUse <span class=\"token operator\">=</span> chain<span class=\"token punctuation\">.</span><span class=\"token function\">applyPreSend</span><span class=\"token punctuation\">(</span>messageToUse<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>messageToUse <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n          <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token punctuation\">}</span>  \n       \n\t\t<span class=\"token comment\">// 등록된 모든 MessageHandler들에게 메시지 전달</span>\n\t\t<span class=\"token comment\">// SubProtocolWebSocketHandler.handleMessage 호출됨</span>\n       sent <span class=\"token operator\">=</span> <span class=\"token function\">sendInternal</span><span class=\"token punctuation\">(</span>messageToUse<span class=\"token punctuation\">,</span> timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// 커스텀한 interceptor의 postsend 호출</span>\n       chain<span class=\"token punctuation\">.</span><span class=\"token function\">applyPostSend</span><span class=\"token punctuation\">(</span>messageToUse<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> sent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       chain<span class=\"token punctuation\">.</span><span class=\"token function\">triggerAfterSendCompletion</span><span class=\"token punctuation\">(</span>messageToUse<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> sent<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token keyword\">return</span> sent<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       chain<span class=\"token punctuation\">.</span><span class=\"token function\">triggerAfterSendCompletion</span><span class=\"token punctuation\">(</span>messageToUse<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> sent<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ex <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MessagingException</span> messagingException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n          <span class=\"token keyword\">throw</span> messagingException<span class=\"token punctuation\">;</span>  \n       <span class=\"token punctuation\">}</span>  \n       <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageDeliveryException</span><span class=\"token punctuation\">(</span>messageToUse<span class=\"token punctuation\">,</span><span class=\"token string\">\"Failed to send message to \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token class-name\">MessageDeliveryException</span> ex2 <span class=\"token operator\">=</span>  \n             <span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageDeliveryException</span><span class=\"token punctuation\">(</span>messageToUse<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Failed to send message to \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       chain<span class=\"token punctuation\">.</span><span class=\"token function\">triggerAfterSendCompletion</span><span class=\"token punctuation\">(</span>messageToUse<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> sent<span class=\"token punctuation\">,</span> ex2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token keyword\">throw</span> ex2<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>SubProtocolWebSocketHandler.handleMessage() 호출</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> message<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MessagingException</span> <span class=\"token punctuation\">{</span>  \n\n\t<span class=\"token comment\">// 1. 메시지에서 세션 id 추출</span>\n    <span class=\"token class-name\">String</span> sessionId <span class=\"token operator\">=</span> <span class=\"token function\">resolveSessionId</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sessionId <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isErrorEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n          logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Could not find session id in \"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token punctuation\">}</span>  \n       <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n\n\t<span class=\"token comment\">// 2. 해당 세션 찾기</span>\n    <span class=\"token class-name\">WebSocketSessionHolder</span> holder <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sessions<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>sessionId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>holder <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n          <span class=\"token comment\">// The broker may not have removed the session yet  </span>\n          logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No session for \"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token punctuation\">}</span>  \n       <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n  \n    <span class=\"token class-name\">WebSocketSession</span> session <span class=\"token operator\">=</span> holder<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n      <span class=\"token comment\">// 3. 프로토콜 핸들러로 클라이언트에게 전송</span>\n     <span class=\"token function\">findProtocolHandler</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleMessageToClient</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SessionLimitExceededException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n             logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Terminating '\"</span> <span class=\"token operator\">+</span> session <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          <span class=\"token punctuation\">}</span>  \n          <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isWarnEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n             logger<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Terminating '\"</span> <span class=\"token operator\">+</span> session <span class=\"token operator\">+</span> <span class=\"token string\">\"': \"</span> <span class=\"token operator\">+</span> ex<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          <span class=\"token punctuation\">}</span>  \n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stats<span class=\"token punctuation\">.</span><span class=\"token function\">incrementLimitExceededCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          <span class=\"token function\">clearSession</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// clear first, session may be unresponsive  </span>\n          session<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token punctuation\">}</span>  \n       <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> secondException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n          logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failure while closing session \"</span> <span class=\"token operator\">+</span> sessionId <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> secondException<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token comment\">// Could be part of normal workflow (for example, browser tab closed)  </span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n          logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to send message to client in \"</span> <span class=\"token operator\">+</span> session <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> message<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>StompSubProtocolHandler.handleMessageToClient() (실제 전송)</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>  \n<span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleMessageToClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebSocketSession</span> session<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Message</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token comment\">// ... 생략</span>\n    \n    <span class=\"token comment\">// 순서 보장</span>\n    <span class=\"token class-name\">Runnable</span> task <span class=\"token operator\">=</span> <span class=\"token class-name\">OrderedMessageChannelDecorator</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNextMessageTask</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>task <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInstanceOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConcurrentWebSocketSessionDecorator</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConcurrentWebSocketSessionDecorator</span><span class=\"token punctuation\">)</span> session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setMessageCallback</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">-></span> task<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n\n\t<span class=\"token comment\">// 실제 클라이언트에게 전송</span>\n    <span class=\"token function\">sendToClient</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">,</span> accessor<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendToClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebSocketSession</span> session<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StompHeaderAccessor</span> stompAccessor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> payload<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">StompCommand</span> command <span class=\"token operator\">=</span> stompAccessor<span class=\"token punctuation\">.</span><span class=\"token function\">getCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stompEncoder<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>stompAccessor<span class=\"token punctuation\">.</span><span class=\"token function\">getMessageHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token keyword\">boolean</span> useBinary <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>session <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">SockJsSession</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>  \n             <span class=\"token class-name\">MimeTypeUtils</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_OCTET_STREAM</span><span class=\"token punctuation\">.</span><span class=\"token function\">isCompatibleWith</span><span class=\"token punctuation\">(</span>stompAccessor<span class=\"token punctuation\">.</span><span class=\"token function\">getContentType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token comment\">// Tomcat/Jetty 컨테이너로 전달</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>useBinary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n          session<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BinaryMessage</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token punctuation\">}</span>  \n       <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  \n          session<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TextMessage</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SessionLimitExceededException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token comment\">// Bad session, just get out  </span>\n       <span class=\"token keyword\">throw</span> ex<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token comment\">// Could be part of normal workflow (for example, browser tab closed)  </span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n          logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to send WebSocket message to client in session \"</span> <span class=\"token operator\">+</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token punctuation\">}</span>  \n       command <span class=\"token operator\">=</span> <span class=\"token class-name\">StompCommand</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ERROR</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StompCommand</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ERROR</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n          <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n             session<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CloseStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PROTOCOL_ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          <span class=\"token punctuation\">}</span>  \n          <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n             <span class=\"token comment\">// Ignore  </span>\n          <span class=\"token punctuation\">}</span>  \n       <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>핵심 포인트</h2>\n<h3>SubProtocolWebSocketHandler</h3>\n<ul>\n<li><strong>SubProtocolWebSocketHandler</strong>는 <strong>WebSocket ↔ Spring Messaging 브릿지 역할</strong>을 하는 핵심 컴포넌트임</li>\n<li>WebSocketHandler 구현\n<ul>\n<li>WebSocket 컨테이너(Tomcat/Jetty)에서 호출</li>\n<li><strong>클라이언트 → 서버</strong> 메시지 처리</li>\n<li><strong>WebSocketMessage → Spring Message</strong> 변환</li>\n</ul>\n</li>\n<li>MessageHandler 구현\n<ul>\n<li><strong>clientOutboundChannel</strong>에 구독자로 등록됨</li>\n<li><strong>서버 → 클라이언트</strong> 메시지 처리</li>\n<li><strong>Spring Message → WebSocket 프레임</strong> 변환하도록 Tomcat/Jetty 호출</li>\n</ul>\n</li>\n</ul>\n<h3>ChannelInterceptor의 Presend/PostSend</h3>\n<ul>\n<li>Input 메시지 (clientInboundChannel):\n<ul>\n<li>preSend → @MessageMapping 실행 → postSend</li>\n</ul>\n</li>\n<li>Output 메시지 (clientOutboundChannel, 컨트롤러에서 전송):\n<ul>\n<li>preSend → 클라이언트 전송 → postSend</li>\n</ul>\n</li>\n<li>그래서 채팅 하나 보내면 inbound 채널에서 preSend/postSend 한 번, outbound 채널에서 preSend/postSend 또 한 번 실행됨</li>\n</ul>","frontmatter":{"title":"How Spring Handle WebSocket","date":"2025년 08월 12일 09:08","updated":"2025년 08월 13일 12:08","tags":["spring","CoffeeShout"],"series":null},"fields":{"slug":"/how-spring-handle-websocket/","readingTime":{"minutes":7.21}}},"seriesList":{"edges":[{"node":{"id":"42bf5959-adba-55bb-a6ed-6347a22b7298","fields":{"slug":"/nuxt-katex/"},"frontmatter":{"title":"Nuxt content에 Mathtype 사용하기"}}},{"node":{"id":"7fc729dc-de56-5f85-a363-123afedc0e55","fields":{"slug":"/ZeroPage_지금그때_2022/"},"frontmatter":{"title":"2022 ZeroPage 지금그때"}}},{"node":{"id":"f8f7470f-000c-592f-9791-14400e103d5a","fields":{"slug":"/readme/"},"frontmatter":{"title":"README"}}},{"node":{"id":"d5272324-e922-5bdd-a8c3-90c1acb79b2f","fields":{"slug":"/why-obsidian/"},"frontmatter":{"title":"기존 블로그 대신 Obsidian을 택한 이유"}}},{"node":{"id":"4104488d-e257-5e42-896e-87f41761a795","fields":{"slug":"/0-1. CA Intro/"},"frontmatter":{"title":"Computer Architecture Intro"}}},{"node":{"id":"30fcde9e-20bd-5555-9560-ca0136d7d30f","fields":{"slug":"/0-2. CA Overview/"},"frontmatter":{"title":"CA Overview"}}},{"node":{"id":"6ce32435-2247-5f01-b7ae-30c6a72bdb9e","fields":{"slug":"/1-1. Defining Performance/"},"frontmatter":{"title":"Defining Performance"}}},{"node":{"id":"a9a2aee1-bbfd-5d10-984d-8ccc1473c416","fields":{"slug":"/1-2. Measuring Performance/"},"frontmatter":{"title":"Measuring Performance"}}},{"node":{"id":"62397c00-742b-5787-91b0-ac2bf4f89c1b","fields":{"slug":"/2-1. Designing principles 1~3 of MIPS ISA/"},"frontmatter":{"title":"Design principles 1~3 of MIPS ISA"}}},{"node":{"id":"4af0bcf6-9fee-5cf3-b1c9-b7b5835d8770","fields":{"slug":"/2-2. Design principles 4 of MIPS ISA/"},"frontmatter":{"title":"Design principles 4 of MIPS ISA"}}},{"node":{"id":"a5f532e7-7d9b-5055-b14a-aaed0a9db9d2","fields":{"slug":"/2-3. Representing Instructions in computer/"},"frontmatter":{"title":"Representing Instructions in computer"}}},{"node":{"id":"d9e769a8-0177-562e-a139-894ce27dcce6","fields":{"slug":"/2-4. Supporting procedures in computer HW/"},"frontmatter":{"title":"Supporting procedures in computer HW"}}},{"node":{"id":"739cb579-ef60-52a7-a84f-443e55d9fbd1","fields":{"slug":"/2-5. MIPS memory allocation & addressing/"},"frontmatter":{"title":"MIPS memory allocation & addressing"}}},{"node":{"id":"d87f2a2c-3c02-5edc-a6b6-e3433578add0","fields":{"slug":"/3-1. Addition and Subtraction/"},"frontmatter":{"title":"Addition and Subtraction"}}},{"node":{"id":"ebbf8c5b-a2bd-5064-a19f-6bdc33c974a4","fields":{"slug":"/3-2. Multiplication/"},"frontmatter":{"title":"Multiplication"}}},{"node":{"id":"b56fb71a-95a2-517d-9081-511b86a2f657","fields":{"slug":"/3-3. Division/"},"frontmatter":{"title":"Division"}}},{"node":{"id":"b937d69d-1c63-5872-b7ac-2b1fb0042cc4","fields":{"slug":"/4-1. Processor Overview/"},"frontmatter":{"title":"Processor Overview"}}},{"node":{"id":"ed6e43e5-a2df-59f6-be3d-c464f14c0530","fields":{"slug":"/4-2. Controlling a datapath/"},"frontmatter":{"title":"Controlling a datapath"}}},{"node":{"id":"e534d64c-5713-536b-8872-8333d169670a","fields":{"slug":"/4-3. A single-cycle datapath/"},"frontmatter":{"title":"A single-cycle datapath"}}},{"node":{"id":"a6701aa1-cb00-5e8e-b3d6-c536fab41e8b","fields":{"slug":"/4-4. Pipelining overview/"},"frontmatter":{"title":"Pipelining overview"}}},{"node":{"id":"1fcf23d9-0d39-57a9-aad6-d5354378e3e2","fields":{"slug":"/4-5. Handling hazards/"},"frontmatter":{"title":"Handling hazards"}}},{"node":{"id":"b3fc2b84-3be0-5b73-a339-cd42ef995cfc","fields":{"slug":"/4-6. Exceptions/"},"frontmatter":{"title":"Exceptions"}}},{"node":{"id":"579ead23-f5d4-5b7b-9a0f-125b86fd6678","fields":{"slug":"/5-1. Cache overview/"},"frontmatter":{"title":"Cache overview"}}},{"node":{"id":"54b7e29f-b59a-5f90-a9f7-a097eb9d71da","fields":{"slug":"/5-2. Improving cache performance/"},"frontmatter":{"title":"Improving cache performance"}}},{"node":{"id":"449ab907-aecb-5a4a-a143-ba9fe16f212b","fields":{"slug":"/5-3. Virtual memory Part 1/"},"frontmatter":{"title":"Virtual memory Part 1"}}},{"node":{"id":"f757510a-442a-55e1-a52e-52bea333756d","fields":{"slug":"/5-4. Virtual memory Part 2/"},"frontmatter":{"title":"Virtual memory Part 2"}}},{"node":{"id":"b67fe3d6-c0bd-51a6-a205-771b3f728a7d","fields":{"slug":"/interesting topic among sigchi 2024/"},"frontmatter":{"title":"sigchi 2024 관심 주제"}}},{"node":{"id":"56ad90a2-6eb5-5ba6-9785-36a854dc09c1","fields":{"slug":"/Respiratory Sound Database 유효성 분석/"},"frontmatter":{"title":"Respiratory Sound Database 유효성 분석"}}},{"node":{"id":"92c89d1b-e219-5dd0-af89-a3e7b13b5697","fields":{"slug":"/우아한테크코스_7기_BE_프리코스_1주차_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 프리코스 1주차 회고"}}},{"node":{"id":"c9026e49-4fc7-552d-9335-15b0e60c5753","fields":{"slug":"/우아한테크코스_7기_BE_프리코스_2주차_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 프리코스 2주차 회고"}}},{"node":{"id":"9f4f37ab-c5ad-5670-9f13-227e12f0ec1e","fields":{"slug":"/우아한테크코스_7기_BE_프리코스_3주차_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 프리코스 3주차 회고"}}},{"node":{"id":"455b72bd-1d68-5108-bc7a-c929a02cea02","fields":{"slug":"/우아한테크코스_7기_BE_프리코스_4주차_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 프리코스 4주차 회고"}}},{"node":{"id":"a20dad6a-f970-5208-83a9-7d6df1d9a35a","fields":{"slug":"/mobile spirometry 관련 자료/"},"frontmatter":{"title":"mobile spirometry 관련 논문"}}},{"node":{"id":"d49afac2-bf1e-5cc6-87f3-d722d867bcd4","fields":{"slug":"/스마트기기 내장 마이크기반 폐질환 진단기기 개발/"},"frontmatter":{"title":"논문 요약 - 스마트기기 내장 마이크기반 폐질환 진단기기 개발"}}},{"node":{"id":"f9ec4dcc-5e06-5216-a094-b4504c8d8028","fields":{"slug":"/spirosmart/"},"frontmatter":{"title":"논문 요약 - SpiroSmart: Using a Microphone to Measure\rLung Function on a Mobile Phone"}}},{"node":{"id":"05a766d5-0438-59c4-b291-59f60607988b","fields":{"slug":"/20241122_미팅내용정리/"},"frontmatter":{"title":"11/22 폐음연구 관련 미팅 내용 정리"}}},{"node":{"id":"a3f641d2-fd6a-5e57-bc47-29eaf0b499e3","fields":{"slug":"/ZeroPage_지금그때_2024/"},"frontmatter":{"title":"2024 ZeroPage 지금그때"}}},{"node":{"id":"0c07dd55-12a1-5d8c-9e6c-c8f4d40453b3","fields":{"slug":"/폐기능검사_지침_요약/"},"frontmatter":{"title":"폐음연구 - 폐기능검사 지침 요약"}}},{"node":{"id":"398c98b1-0496-536e-aeb5-088f063ab920","fields":{"slug":"/20241220_분당서울대병원_참관/"},"frontmatter":{"title":"12/20 분당서울대병원 폐기능 검사실 참관"}}},{"node":{"id":"ae45b7bc-f495-577f-a7e1-071a99f82620","fields":{"slug":"/우테코 git/"},"frontmatter":{"title":"우아한테크코스 GitHub"}}},{"node":{"id":"85dc5324-9611-5ff8-a0f1-bf6a22eb4335","fields":{"slug":"/daily_easy_english_expression_summary/"},"frontmatter":{"title":"Daily Easy English Expression"}}},{"node":{"id":"3eb58153-afe0-5d52-a81f-2cb59b028f11","fields":{"slug":"/우아한테크코스 레벨1 고민거리와 자료들/"},"frontmatter":{"title":"우아한테크코스 레벨1 고민거리와 자료들"}}},{"node":{"id":"ea3c6223-2692-5c98-bb92-e2dc93e551c1","fields":{"slug":"/우아한테크코스_7기_BE_레벨1_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 레벨1 회고"}}},{"node":{"id":"5122772d-9cec-51cd-966a-66a9d1bb4c2d","fields":{"slug":"/spring-mvc-dispatcherservlet/"},"frontmatter":{"title":"Understanding DispatcherServlet in Spring MVC"}}},{"node":{"id":"0eaf5ac6-8b17-54cf-8c8a-b5e9cd31368b","fields":{"slug":"/how-spring-injects-httpsession/"},"frontmatter":{"title":"How Spring Injects HttpSession"}}},{"node":{"id":"e971a6f2-daaa-5ed1-a9aa-f99c52972162","fields":{"slug":"/우아한테크코스_7기_BE_레벨2_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 레벨2 회고"}}},{"node":{"id":"0822585b-79bf-5ce3-b125-90763fa797cf","fields":{"slug":"/how-spring-handle-websocket/"},"frontmatter":{"title":"How Spring Handle WebSocket"}}}]},"previous":{"fields":{"slug":"/coffeeshout_server_tech_stack/"},"frontmatter":{"title":"커피빵(CoffeeShout) 서버 기술스택"}},"next":null},"pageContext":{"id":"0822585b-79bf-5ce3-b125-90763fa797cf","series":null,"previousPostId":"dfcf707f-6928-5b1d-b1f6-d48ea4b28c21","nextPostId":null}},"staticQueryHashes":[],"slicesMap":{}}