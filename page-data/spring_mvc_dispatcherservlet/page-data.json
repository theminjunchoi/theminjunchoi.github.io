{"componentChunkName":"component---src-templates-post-jsx","path":"/spring_mvc_dispatcherservlet/","result":{"data":{"site":{"siteMetadata":{"title":"minjun.blog"}},"markdownRemark":{"id":"a1c42254-4961-53e0-88bc-06cf204ce7f6","excerpt":"Preview overview.jpg DispatcherServlet 공식문서에 따르면, Spring MVC는 다른 많은 웹 프레임워크들과 마찬가지로 Front Controller Pattern에 기반을 두고 있다. 우선 여기서 말하는 Front Controller Pattern은 뭘까? 이는 어플리케이션에서 들어오는 모든 요청을 하나의 진입점으로 모아서…","html":"<h2>Preview</h2>\n<p><img src=\"/attachments/overview.jpg\" alt=\"overview.jpg\"></p>\n<h2>DispatcherServlet</h2>\n<p><a href=\"https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-servlet.html\">공식문서</a>에 따르면, Spring MVC는 다른 많은 웹 프레임워크들과 마찬가지로 Front Controller Pattern에 기반을 두고 있다.</p>\n<p>우선 여기서 말하는 <strong>Front Controller Pattern은 뭘까?</strong> 이는 어플리케이션에서 들어오는 모든 요청을 하나의 진입점으로 모아서 처리하는 설계 방식이다. 좀 더 자세히 설명하면, 로그인은 LoginServlet에서, 회원가입은 SignupServlet에서 처리하는 게 아니라 공통된 모듈에서 처리해주는 설계방식이다.</p>\n<p>그럼 다시 <strong>Servlet은 뭘까?</strong> Servlet은 웹 요청을 받아 동적인 웹 페이지나 데이터를 만들어주는 역할을 하는 객체인데, 자바로 만든 서버측 컴포넌트 정도로 이해하고 넘어가려한다.</p>\n<p><strong>DispatcherServlet도 이 Servlet을 상속해서 만들어진 것으로, 여기서 모든 요청을 받아주고 있다.</strong> 이후 실제 처리는 여러 delegate component들이 나누어 담당하고 있다.</p>\n<p>delegate components</p>\n<ul>\n<li>Handler Mapping</li>\n<li>Handler Adapter</li>\n<li>View Resolver</li>\n<li>Exception Handler</li>\n<li>etc...</li>\n</ul>\n<h2>Spring MVC's Internal Request Handling Flow</h2>\n<ol>\n<li>DispatcherServlet이 클라이언트로부터 Request를 받는다.</li>\n<li>HandlerMapping을 통해 Request 정보에 대한 알맞은 Controller를 찾는다.</li>\n<li>Request를 Controller로 건내줄 수 있는 HandlerAdapter를 찾아서 건내준다.</li>\n<li>HandlerAdapter를 통해 Controller 메서드를 호출한다.</li>\n<li>반환값(Response)을 HandlerAdapter에게 건내준다.</li>\n<li>반환값에 따라 ResponseEntity로 감싸는 경우가 있고, 이 형식에 따라 다른 Converter가 동작한다.\n<ul>\n<li>반환값이 view 이름인 경우, ViewResolver를 통해 렌더링</li>\n<li>반환값이 데이터(json)인 경우, ResponseEntity로 감싸고 HttpMessageConverter가 작동\n<ul>\n<li>단순 문자열이면, StringHttpMessageConverter</li>\n<li>객체면, MappingJackson2HttpMessageConverter</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2>Deep Dive to Workflow</h2>\n<p><img src=\"/attachments/diagram.png\" alt=\"diagram.png\">\nDispatcherServlet은 위와 같은 계층 구조로 이루어져있다. 그래서 각 단계마다 실행되는 메서드의 위치가 다른데, 좀 더 자세히 살펴보자</p>\n<h3>1. DispatcherServlet이 클라이언트로부터 Request를 받는다.</h3>\n<p>외부에서 들어온 요청은 HttpServlet에서 구현된 service 메서드에서 처리된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GenericServlet</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">service</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletResponse</span> res<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>  \n\t    <span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">;</span>  \n\t    <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">;</span>  \n\t    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n\t        request <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">)</span>req<span class=\"token punctuation\">;</span>  \n\t        response <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">)</span>res<span class=\"token punctuation\">;</span>  \n\t    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassCastException</span> var6<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">(</span>lStrings<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http.non_http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token punctuation\">}</span>  \n\t  \n\t    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">service</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 메서드에서는 외부에서 받은 ServletRequest, ServletResponse 객체를 각각 HttpServletRequest, HttpServletResponse 객체로 캐스팅해주고 다시 서비스를 호출해주는데, 이때 호출되는 service 메서드는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GenericServlet</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">service</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> resp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>  \n\t    <span class=\"token class-name\">String</span> method <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t        <span class=\"token keyword\">long</span> lastModified <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLastModified</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastModified <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1L</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  \n\t            <span class=\"token keyword\">long</span> ifModifiedSince<span class=\"token punctuation\">;</span>  \n\t            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n\t                ifModifiedSince <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getDateHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"If-Modified-Since\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalArgumentException</span> var9<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t                ifModifiedSince <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1L</span><span class=\"token punctuation\">;</span>  \n\t            <span class=\"token punctuation\">}</span>  \n\t  \n\t            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ifModifiedSince <span class=\"token operator\">&lt;</span> lastModified <span class=\"token operator\">/</span> <span class=\"token number\">1000L</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000L</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">maybeSetLastModified</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">,</span> lastModified<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  \n\t                resp<span class=\"token punctuation\">.</span><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">304</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t            <span class=\"token punctuation\">}</span>  \n\t        <span class=\"token punctuation\">}</span>  \n\t    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HEAD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t        <span class=\"token keyword\">long</span> lastModified <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLastModified</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">maybeSetLastModified</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">,</span> lastModified<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doHead</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PUT\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPut</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DELETE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doDelete</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OPTIONS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doOptions</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TRACE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doTrace</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  \n\t        <span class=\"token class-name\">String</span> errMsg <span class=\"token operator\">=</span> lStrings<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http.method_not_implemented\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t        <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> errArgs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  \n\t        errArgs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> method<span class=\"token punctuation\">;</span>  \n\t        errMsg <span class=\"token operator\">=</span> <span class=\"token class-name\">MessageFormat</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>errMsg<span class=\"token punctuation\">,</span> errArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t        resp<span class=\"token punctuation\">.</span><span class=\"token function\">sendError</span><span class=\"token punctuation\">(</span><span class=\"token number\">501</span><span class=\"token punctuation\">,</span> errMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token punctuation\">}</span>  \n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>들어오는 Request의 종류에 따라 알맞은 doX 메서드를 각각 호출해주고 있다. 이때 doX 메서드들은 자식 클래스인 FrameworkServlet에서 구현되어있는 것들이 호출된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FrameworkServlet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServletBean</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationContextAware</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>  \n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span>  \n\t       <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>  \n\t  \n\t    <span class=\"token function\">processRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t<span class=\"token punctuation\">}</span>  \n\t  \n\t<span class=\"token annotation punctuation\">@Override</span>  \n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPost</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span>  \n\t       <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>  \n\t  \n\t    <span class=\"token function\">processRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t<span class=\"token punctuation\">}</span>  \n\t  \n\t<span class=\"token annotation punctuation\">@Override</span>  \n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doPut</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span>  \n\t       <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>  \n\t  \n\t    <span class=\"token function\">processRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// ... 다른 doX 메서드들</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>생각보다 각 doX 메서드에서 해주는 게 없었고 processRequest가 Request에 맞게 처리를 해주고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FrameworkServlet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServletBean</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplicationContextAware</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">processRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span>  \n       <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>  \n  \n    <span class=\"token comment\">// ...  </span>\n  \n\t    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n\t       <span class=\"token function\">doService</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token punctuation\">}</span>  \n\t    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">IOException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t       failureCause <span class=\"token operator\">=</span> ex<span class=\"token punctuation\">;</span>  \n\t       <span class=\"token keyword\">throw</span> ex<span class=\"token punctuation\">;</span>  \n\t    <span class=\"token punctuation\">}</span>  \n\t    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t       failureCause <span class=\"token operator\">=</span> ex<span class=\"token punctuation\">;</span>  \n\t       <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Request processing failed: \"</span> <span class=\"token operator\">+</span> ex<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token punctuation\">}</span>  \n\t  \n\t    <span class=\"token comment\">// ...</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>processRequest는 내부에서 doService를 호출하고 있고, 이 메서드는 FrameworkServlet의 자식 클래스인 DispatcherServlet에서 구현되어있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DispatcherServlet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">FrameworkServlet</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">logRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// ...</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">doDispatch</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// ...</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ...</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>또 다시 여기서 doDispatch를 호출해주고 있는데 좀 더 자세히 들여다보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DispatcherServlet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">FrameworkServlet</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doDispatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token class-name\">HttpServletRequest</span> processedRequest <span class=\"token operator\">=</span> request<span class=\"token punctuation\">;</span>  \n    <span class=\"token class-name\">HandlerExecutionChain</span> mappedHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">boolean</span> multipartRequestParsed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token class-name\">WebAsyncManager</span> asyncManager <span class=\"token operator\">=</span> <span class=\"token class-name\">WebAsyncUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAsyncManager</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token class-name\">ModelAndView</span> mv <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token class-name\">Exception</span> dispatchException <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  \n  \n       <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n          processedRequest <span class=\"token operator\">=</span> <span class=\"token function\">checkMultipart</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          multipartRequestParsed <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>processedRequest <span class=\"token operator\">!=</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n          <span class=\"token comment\">// Determine handler for the current request.  </span>\n          mappedHandler <span class=\"token operator\">=</span> <span class=\"token function\">getHandler</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mappedHandler <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n             <span class=\"token function\">noHandlerFound</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n             <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>  \n          <span class=\"token punctuation\">}</span>  \n  \n          <span class=\"token comment\">// Determine handler adapter for the current request.  </span>\n          <span class=\"token class-name\">HandlerAdapter</span> ha <span class=\"token operator\">=</span> <span class=\"token function\">getHandlerAdapter</span><span class=\"token punctuation\">(</span>mappedHandler<span class=\"token punctuation\">.</span><span class=\"token function\">getHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n          <span class=\"token comment\">// Process last-modified header, if supported by the handler.  </span>\n          <span class=\"token class-name\">String</span> method <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          <span class=\"token keyword\">boolean</span> isGet <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isGet <span class=\"token operator\">||</span> <span class=\"token class-name\">HttpMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HEAD</span><span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n             <span class=\"token keyword\">long</span> lastModified <span class=\"token operator\">=</span> ha<span class=\"token punctuation\">.</span><span class=\"token function\">getLastModified</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> mappedHandler<span class=\"token punctuation\">.</span><span class=\"token function\">getHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ServletWebRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkNotModified</span><span class=\"token punctuation\">(</span>lastModified<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> isGet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>  \n             <span class=\"token punctuation\">}</span>  \n          <span class=\"token punctuation\">}</span>  \n  \n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mappedHandler<span class=\"token punctuation\">.</span><span class=\"token function\">applyPreHandle</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n             <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>  \n          <span class=\"token punctuation\">}</span>  \n  \n          <span class=\"token comment\">// Actually invoke the handler.  </span>\n          mv <span class=\"token operator\">=</span> ha<span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> mappedHandler<span class=\"token punctuation\">.</span><span class=\"token function\">getHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  \n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>asyncManager<span class=\"token punctuation\">.</span><span class=\"token function\">isConcurrentHandlingStarted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n             <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>  \n          <span class=\"token punctuation\">}</span>  \n  \n          <span class=\"token function\">applyDefaultViewName</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> mv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          mappedHandler<span class=\"token punctuation\">.</span><span class=\"token function\">applyPostHandle</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> mv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token punctuation\">}</span>  \n       <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n          dispatchException <span class=\"token operator\">=</span> ex<span class=\"token punctuation\">;</span>  \n       <span class=\"token punctuation\">}</span>  \n       <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n          <span class=\"token comment\">// As of 4.3, we're processing Errors thrown from handler methods as well,  </span>\n          <span class=\"token comment\">// making them available for @ExceptionHandler methods and other scenarios.          dispatchException = new ServletException(\"Handler dispatch failed: \" + err, err);  </span>\n       <span class=\"token punctuation\">}</span>  \n       <span class=\"token function\">processDispatchResult</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> mappedHandler<span class=\"token punctuation\">,</span> mv<span class=\"token punctuation\">,</span> dispatchException<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token function\">triggerAfterCompletion</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> mappedHandler<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token function\">triggerAfterCompletion</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> mappedHandler<span class=\"token punctuation\">,</span>  \n             <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Handler processing failed: \"</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>asyncManager<span class=\"token punctuation\">.</span><span class=\"token function\">isConcurrentHandlingStarted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n          <span class=\"token comment\">// Instead of postHandle and afterCompletion  </span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mappedHandler <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n             mappedHandler<span class=\"token punctuation\">.</span><span class=\"token function\">applyAfterConcurrentHandlingStarted</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          <span class=\"token punctuation\">}</span>  \n          asyncManager<span class=\"token punctuation\">.</span><span class=\"token function\">setMultipartRequestParsed</span><span class=\"token punctuation\">(</span>multipartRequestParsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n       <span class=\"token punctuation\">}</span>  \n       <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  \n          <span class=\"token comment\">// Clean up any resources used by a multipart request.  </span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>multipartRequestParsed <span class=\"token operator\">||</span> asyncManager<span class=\"token punctuation\">.</span><span class=\"token function\">isMultipartRequestParsed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n             <span class=\"token function\">cleanupMultipart</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          <span class=\"token punctuation\">}</span>  \n       <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>doDispatch 메서드를 살펴보면 많은 것들을 해주고 있다.</p>\n<p>우선 HandlerMapping을 해주고, 이를 처리할 HandlerAdapter를 조회해주고 있다. 이후에 컨트롤러를 찾아 메서드들을 수행한다.</p>\n<h3>2. HandlerMapping을 통해 Request 정보에 대한 알맞은 Controller를 찾는다.</h3>\n<p>잠깐 되돌아보면, 지금까지 DispatcherServlet은 Request를 받아서 여러 메서드를 거쳐, doDispatch까지 왔다. 이제 DispatchServlet은 개발자가 만들어놓은 컨트롤러 중에서 요청을 처리할  수 컨트롤러를 찾고 해당 객체의 메서드를 호출해야하는데, 이때 컨트롤러를 찾아줄 수 있는 게 HandlerMapping이다.</p>\n<p>아래는 위 코드의 일부분을 그대로 가져왔다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doDispatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>  \n\t<span class=\"token comment\">// ...</span>\n\t\n\t<span class=\"token comment\">// Determine handler for the current request.  </span>\n\tmappedHandler <span class=\"token operator\">=</span> <span class=\"token function\">getHandler</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mappedHandler <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t\t <span class=\"token function\">noHandlerFound</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t\t <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>  \n\t<span class=\"token punctuation\">}</span> \n\n\t<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Nullable</span>  \n<span class=\"token keyword\">protected</span> <span class=\"token class-name\">HandlerExecutionChain</span> <span class=\"token function\">getHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlerMappings <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HandlerMapping</span> mapping <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlerMappings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n          <span class=\"token class-name\">HandlerExecutionChain</span> handler <span class=\"token operator\">=</span> mapping<span class=\"token punctuation\">.</span><span class=\"token function\">getHandler</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>handler <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n             <span class=\"token keyword\">return</span> handler<span class=\"token punctuation\">;</span>  \n          <span class=\"token punctuation\">}</span>  \n       <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 코드에서는 요청에 맞는 HandlerExecutionChain(mappedHandler)을 찾아주고 있다.</p>\n<p>찾아주는 방법은 다음과 같다.</p>\n<p>RequestMappingHandlerMapping은 @Controller로 어노테이트된 모든 컨트롤러를 찾아서 필드로 관리를 해주고 있다. 이 클래스는 필드로 Map&#x3C;String, Predicate&#x3C;>> pathPrefixes를 갖고 있어서, key 값에는 요청 정보, value 값에는 처리할 대상을 관리하고 있다.</p>\n<p>처리할 대상은 컨트롤러와 메서드를 담고 있는 HandlerMethod 객체이며, 요청정보로 Map에서 값을 찾고 반환할 때 HandlerExecutionChain으로 감싸서 넘겨준다.</p>\n<p>HandlerExecutionChain은 실제 HTTP 요청을 처리하는 handler(컨트롤러 메서드)와 handler 전후에 인증, 로깅 등을 처리할 수 있는 인터셉터로 이루어진다.</p>\n<h3>3. Request를 Controller로 건내줄 수 있는 HandlerAdapter를 찾아서 건내준다.</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doDispatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>  \n\n\t<span class=\"token comment\">// ...</span>\n\t\n\t<span class=\"token comment\">// Determine handler adapter for the current request.  </span>\n\t<span class=\"token class-name\">HandlerAdapter</span> ha <span class=\"token operator\">=</span> <span class=\"token function\">getHandlerAdapter</span><span class=\"token punctuation\">(</span>mappedHandler<span class=\"token punctuation\">.</span><span class=\"token function\">getHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\n\t<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">protected</span> <span class=\"token class-name\">HandlerAdapter</span> <span class=\"token function\">getHandlerAdapter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlerAdapters <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HandlerAdapter</span> adapter <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlerAdapters<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>adapter<span class=\"token punctuation\">.</span><span class=\"token function\">supports</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n             <span class=\"token keyword\">return</span> adapter<span class=\"token punctuation\">;</span>  \n          <span class=\"token punctuation\">}</span>  \n       <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No adapter for handler [\"</span> <span class=\"token operator\">+</span> handler <span class=\"token operator\">+</span>  \n          <span class=\"token string\">\"]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>HandlerExecutionChain에는 요청에 맞는 handler가 저장되어있고, 이를 통해 다음과 같이 HandlerAdapter를 조회하고 있다.</p>\n<h3>4. HandlerAdapter를 통해 Controller 메서드를 호출한다.</h3>\n<p>HandlerAdapter는 HandlerExecutionChain을 처리하는 과정에서, 내부적으로 인터셉터를 관리하여 공통적인 전/후 처리 작업을 수행한다. 예를 들어, 컨트롤러 메서드 호출 전에는 적합한 파라미터를 생성하여 전달하는 작업이 필요하고, 호출 후에는 메시지 컨버터를 사용하여 ResponseEntity의 본문을 찾아 JSON 직렬화와 같은 작업을 처리하는 과정이 필요하다.</p>\n<p>HandlerAdapter가 요청하는 코드를 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doDispatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>  \n\n\t<span class=\"token comment\">// ...</span>\n\t\n\t<span class=\"token comment\">// Actually invoke the handler.  </span>\n\tmv <span class=\"token operator\">=</span> ha<span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>processedRequest<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> mappedHandler<span class=\"token punctuation\">.</span><span class=\"token function\">getHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n\t<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이때 요청의 종류에 따라 HandlerAdapter의 종류가 달라지고, 예시로 @Controller로 어노테이트된 컨트롤러를 처리하는 RequestMappingHandlerAdapter의 코드는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractHandlerMethodAdapter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WebContentGenerator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HandlerAdapter</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Ordered</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>  \n\t<span class=\"token annotation punctuation\">@Nullable</span>  \n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>  \n\t    <span class=\"token keyword\">return</span> <span class=\"token function\">handleInternal</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HandlerMethod</span><span class=\"token punctuation\">)</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RequestMappingHandlerAdapter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractHandlerMethodAdapter</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>  \n\t<span class=\"token annotation punctuation\">@Nullable</span>  \n\t<span class=\"token keyword\">protected</span> <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">handleInternal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span>  \n\t       <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HandlerMethod</span> handlerMethod<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>  \n\t  \n\t    <span class=\"token class-name\">ModelAndView</span> mav<span class=\"token punctuation\">;</span>  \n\t    <span class=\"token function\">checkRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t  \n\t    <span class=\"token comment\">// Execute invokeHandlerMethod in synchronized block if required.  </span>\n\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>synchronizeOnSession<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t       <span class=\"token class-name\">HttpSession</span> session <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>session <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t          <span class=\"token class-name\">Object</span> mutex <span class=\"token operator\">=</span> <span class=\"token class-name\">WebUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSessionMutex</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t          <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t             mav <span class=\"token operator\">=</span> <span class=\"token function\">invokeHandlerMethod</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> handlerMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t          <span class=\"token punctuation\">}</span>  \n\t       <span class=\"token punctuation\">}</span>  \n\t       <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  \n\t          <span class=\"token comment\">// No HttpSession available -> no mutex necessary  </span>\n\t          mav <span class=\"token operator\">=</span> <span class=\"token function\">invokeHandlerMethod</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> handlerMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t       <span class=\"token punctuation\">}</span>  \n\t    <span class=\"token punctuation\">}</span>  \n\t    <span class=\"token comment\">// ...</span>\n\t    <span class=\"token keyword\">return</span> mav<span class=\"token punctuation\">;</span>  \n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서도 중요한건 invokeHandlerMethod를 호출해주고 있다는 것인데, 이를 통해 컨트롤러로 요청을 위임하고있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RequestMappingHandlerAdapter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractHandlerMethodAdapter</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@Nullable</span>  \n\t<span class=\"token keyword\">protected</span> <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">invokeHandlerMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span>  \n\t       <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HandlerMethod</span> handlerMethod<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>  \n\t  \n\t    <span class=\"token comment\">// ...</span>\n\t  \n\t    <span class=\"token class-name\">ServletWebRequest</span> webRequest <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>asyncWebRequest <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ServletWebRequest</span> <span class=\"token operator\">?</span>  \n\t          <span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletWebRequest</span><span class=\"token punctuation\">)</span> asyncWebRequest <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServletWebRequest</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t  \n\t    <span class=\"token class-name\">WebDataBinderFactory</span> binderFactory <span class=\"token operator\">=</span> <span class=\"token function\">getDataBinderFactory</span><span class=\"token punctuation\">(</span>handlerMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token class-name\">ModelFactory</span> modelFactory <span class=\"token operator\">=</span> <span class=\"token function\">getModelFactory</span><span class=\"token punctuation\">(</span>handlerMethod<span class=\"token punctuation\">,</span> binderFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t  \n\t    <span class=\"token class-name\">ServletInvocableHandlerMethod</span> invocableMethod <span class=\"token operator\">=</span> <span class=\"token function\">createInvocableHandlerMethod</span><span class=\"token punctuation\">(</span>handlerMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>argumentResolvers <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t       invocableMethod<span class=\"token punctuation\">.</span><span class=\"token function\">setHandlerMethodArgumentResolvers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>argumentResolvers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token punctuation\">}</span>  \n\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>returnValueHandlers <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t       invocableMethod<span class=\"token punctuation\">.</span><span class=\"token function\">setHandlerMethodReturnValueHandlers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>returnValueHandlers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token punctuation\">}</span>  \n\t    \n\t    <span class=\"token comment\">// ...\t  </span>\n\t    \n\t    invocableMethod<span class=\"token punctuation\">.</span><span class=\"token function\">invokeAndHandle</span><span class=\"token punctuation\">(</span>webRequest<span class=\"token punctuation\">,</span> mavContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\n\t\t<span class=\"token comment\">// ...</span>\n\t  \n\t    <span class=\"token keyword\">return</span> <span class=\"token function\">getModelAndView</span><span class=\"token punctuation\">(</span>mavContainer<span class=\"token punctuation\">,</span> modelFactory<span class=\"token punctuation\">,</span> webRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>HandlerExecutionChain에는 인터셉터를 통해 전후처리가 진행된다고 했었는데, 이 코드에서는 컨트롤러의 파라미터를 위해 ArgumentResolver가, 반환값 처리를 위해 ReturnValueHandler가 등장한다.</p>\n<p>다시 말하면 ArgumentResolver를 통해 컨트롤러의 메서드 인자값을 받고, ReturnValueHandler를 통해 컨트롤러 메서드의 반환값을 얻는 것이다.</p>\n<p>세팅이 끝나면 invokeAndHandle이 호출되고, 또 그 내부에서 invokeForRequest가 실행된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServletInvocableHandlerMethod</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">InvocableHandlerMethod</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">invokeAndHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletWebRequest</span> webRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ModelAndViewContainer</span> mavContainer<span class=\"token punctuation\">,</span>  \n\t       <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> providedArgs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>  \n\t  \n\t    <span class=\"token class-name\">Object</span> returnValue <span class=\"token operator\">=</span> <span class=\"token function\">invokeForRequest</span><span class=\"token punctuation\">(</span>webRequest<span class=\"token punctuation\">,</span> mavContainer<span class=\"token punctuation\">,</span> providedArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    \n\t    <span class=\"token comment\">// ...</span>\n\t    \n\t    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n\t       <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>returnValueHandlers<span class=\"token punctuation\">.</span><span class=\"token function\">handleReturnValue</span><span class=\"token punctuation\">(</span>  \n\t             returnValue<span class=\"token punctuation\">,</span> <span class=\"token function\">getReturnValueType</span><span class=\"token punctuation\">(</span>returnValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mavContainer<span class=\"token punctuation\">,</span> webRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token punctuation\">}</span>  \n\t    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t       <span class=\"token comment\">// ...</span>\n\t       <span class=\"token keyword\">throw</span> ex<span class=\"token punctuation\">;</span>  \n\t    <span class=\"token punctuation\">}</span>  \n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InvocableHandlerMethod</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HandlerMethod</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token annotation punctuation\">@Nullable</span>  \n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">invokeForRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NativeWebRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">ModelAndViewContainer</span> mavContainer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> providedArgs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>  \n\t    <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethodArgumentValues</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> mavContainer<span class=\"token punctuation\">,</span> providedArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token comment\">// ...</span>\n\t\t<span class=\"token class-name\">Object</span> returnValue <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">doInvoke</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token keyword\">return</span> returnValue<span class=\"token punctuation\">;</span>  \n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서는 인자로 받은 값을 받아오는게 중요하다. 우리가 사용하는 어노테이션들을 getMethodArgumentValues에서 처리가 되고 doInvoke에서 만들어진 값으로 컨트롤러의 메서드를 호출한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InvocableHandlerMethod</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HandlerMethod</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token annotation punctuation\">@Nullable</span>  \n\t<span class=\"token keyword\">protected</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">doInvoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>  \n\t    <span class=\"token class-name\">Method</span> method <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBridgedMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t  \n\t    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n\t        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">KotlinDetector</span><span class=\"token punctuation\">.</span><span class=\"token function\">isKotlinReflectPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t            <span class=\"token comment\">// ...</span>\n\t        <span class=\"token punctuation\">}</span>  \n\t  \n\t        <span class=\"token keyword\">return</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalArgumentException</span> var8<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t        <span class=\"token comment\">// ...</span>\n\t    <span class=\"token punctuation\">}</span> \n\t    <span class=\"token keyword\">return</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>자바의 리플렉션으로 컨트롤러의 메소드 객체를 가져온다. 그리고 method.invoke(this.getBean(), args)로 실제 컨트롤러에게 위임을 해주고 있다.</p>\n<h3>5. 반환값(Response)을 HandlerAdapter에게 건내준다.</h3>\n<p>그리고 다시 ServletInvocableHandlerMethod의 invokeAndHandle 메서드로 다시 돌아온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServletInvocableHandlerMethod</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">InvocableHandlerMethod</span> <span class=\"token punctuation\">{</span>\n\t\n\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">invokeAndHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServletWebRequest</span> webRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ModelAndViewContainer</span> mavContainer<span class=\"token punctuation\">,</span>  \n\t       <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> providedArgs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>  \n\t  \n\t    <span class=\"token class-name\">Object</span> returnValue <span class=\"token operator\">=</span> <span class=\"token function\">invokeForRequest</span><span class=\"token punctuation\">(</span>webRequest<span class=\"token punctuation\">,</span> mavContainer<span class=\"token punctuation\">,</span> providedArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    \n\t    <span class=\"token comment\">// ...</span>\n\t    \n\t    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n\t       <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>returnValueHandlers<span class=\"token punctuation\">.</span><span class=\"token function\">handleReturnValue</span><span class=\"token punctuation\">(</span>  \n\t             returnValue<span class=\"token punctuation\">,</span> <span class=\"token function\">getReturnValueType</span><span class=\"token punctuation\">(</span>returnValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mavContainer<span class=\"token punctuation\">,</span> webRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token punctuation\">}</span>  \n\t    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t       <span class=\"token comment\">// ...</span>\n\t       <span class=\"token keyword\">throw</span> ex<span class=\"token punctuation\">;</span>  \n\t    <span class=\"token punctuation\">}</span>  \n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>컨트톨러의 로직이 끝나고 이때 반환값은 returnValue에 담긴다. 이후에는 ReturnValueHandler에서 후 처리를 거친다.</p>\n<h3>6. 반환값에 따라 ResponseEntity로 감싸는 경우가 있고, 이 형식에 따라 다른 Converter가 동작한다.</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HandlerMethodReturnValueHandlerComposite</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HandlerMethodReturnValueHandler</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleReturnValue</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">Object</span> returnValue<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MethodParameter</span> returnType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ModelAndViewContainer</span> mavContainer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NativeWebRequest</span> webRequest<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>  \n\t    <span class=\"token class-name\">HandlerMethodReturnValueHandler</span> handler <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">selectHandler</span><span class=\"token punctuation\">(</span>returnValue<span class=\"token punctuation\">,</span> returnType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>handler <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown return value type: \"</span> <span class=\"token operator\">+</span> returnType<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  \n\t        handler<span class=\"token punctuation\">.</span><span class=\"token function\">handleReturnValue</span><span class=\"token punctuation\">(</span>returnValue<span class=\"token punctuation\">,</span> returnType<span class=\"token punctuation\">,</span> mavContainer<span class=\"token punctuation\">,</span> webRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token punctuation\">}</span>  \n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>어떤 값을 반환하느냐에 따라 HandlerMethodReturnValueHandler 구현체가 정해지고, 예를 들어 ResponseEntity 객체가 반환되는 경우 HttpEntityMethodProcessor가 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HttpEntityMethodProcessor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractMessageConverterMethodProcessor</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Override</span>  \n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleReturnValue</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">Object</span> returnValue<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MethodParameter</span> returnType<span class=\"token punctuation\">,</span>  \n\t       <span class=\"token class-name\">ModelAndViewContainer</span> mavContainer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NativeWebRequest</span> webRequest<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>  \n\t  \n\t    mavContainer<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHandled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>returnValue <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t       <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token punctuation\">}</span>  \n\t  \n\t    <span class=\"token class-name\">ServletServerHttpRequest</span> inputMessage <span class=\"token operator\">=</span> <span class=\"token function\">createInputMessage</span><span class=\"token punctuation\">(</span>webRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token class-name\">ServletServerHttpResponse</span> outputMessage <span class=\"token operator\">=</span> <span class=\"token function\">createOutputMessage</span><span class=\"token punctuation\">(</span>webRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t  \n\t    <span class=\"token class-name\">HttpEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> httpEntity<span class=\"token punctuation\">;</span>  \n\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>returnValue <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ErrorResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t       httpEntity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token punctuation\">}</span>  \n\t    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>returnValue <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ProblemDetail</span> detail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t       httpEntity <span class=\"token operator\">=</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>detail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token punctuation\">}</span>  \n\t    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  \n\t       <span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInstanceOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpEntity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> returnValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t       httpEntity <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> returnValue<span class=\"token punctuation\">;</span>  \n\t    <span class=\"token punctuation\">}</span>  \n\t  \n\t    <span class=\"token comment\">// ... </span>\n\t  \n\t    <span class=\"token comment\">// Try even with null body. ResponseBodyAdvice could get involved.  </span>\n\t    <span class=\"token function\">writeWithMessageConverters</span><span class=\"token punctuation\">(</span>httpEntity<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> returnType<span class=\"token punctuation\">,</span> inputMessage<span class=\"token punctuation\">,</span> outputMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t  \n\t    <span class=\"token comment\">// Ensure headers are flushed even if no body was written.  </span>\n\t    outputMessage<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 메서드는 응답가능한 타입인지 확인해주고 적절한 Converter와 응답을 처리할 수 있게 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractMessageConverterMethodProcessor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractMessageConverterMethodArgumentResolver</span>  \n       <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HandlerMethodReturnValueHandler</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">protected</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">writeWithMessageConverters</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> <span class=\"token class-name\">T</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MethodParameter</span> returnType<span class=\"token punctuation\">,</span>  \n       <span class=\"token class-name\">ServletServerHttpRequest</span> inputMessage<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ServletServerHttpResponse</span> outputMessage<span class=\"token punctuation\">)</span>  \n       <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpMediaTypeNotAcceptableException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpMessageNotWritableException</span> <span class=\"token punctuation\">{</span>  \n  \n\t    <span class=\"token comment\">// ...</span>\n\t  \n\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isResourceType</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> returnType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t       outputMessage<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpHeaders</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ACCEPT_RANGES</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bytes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> inputMessage<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpHeaders</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RANGE</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span>  \n\t             outputMessage<span class=\"token punctuation\">.</span><span class=\"token function\">getServletResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t          <span class=\"token class-name\">Resource</span> resource <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Resource</span><span class=\"token punctuation\">)</span> value<span class=\"token punctuation\">;</span>  \n\t          <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n\t             <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HttpRange</span><span class=\"token punctuation\">></span></span> httpRanges <span class=\"token operator\">=</span> inputMessage<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t             outputMessage<span class=\"token punctuation\">.</span><span class=\"token function\">getServletResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PARTIAL_CONTENT</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t             body <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpRange</span><span class=\"token punctuation\">.</span><span class=\"token function\">toResourceRegions</span><span class=\"token punctuation\">(</span>httpRanges<span class=\"token punctuation\">,</span> resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t             valueType <span class=\"token operator\">=</span> body<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t             targetType <span class=\"token operator\">=</span> <span class=\"token constant\">RESOURCE_REGION_LIST_TYPE</span><span class=\"token punctuation\">;</span>  \n\t          <span class=\"token punctuation\">}</span>  \n\t          <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalArgumentException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t             outputMessage<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpHeaders</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CONTENT_RANGE</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bytes */\"</span> <span class=\"token operator\">+</span> resource<span class=\"token punctuation\">.</span><span class=\"token function\">contentLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t             outputMessage<span class=\"token punctuation\">.</span><span class=\"token function\">getServletResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUESTED_RANGE_NOT_SATISFIABLE</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t          <span class=\"token punctuation\">}</span>  \n\t       <span class=\"token punctuation\">}</span>  \n\t    <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\">// ...</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>selectedMediaType <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t\tselectedMediaType <span class=\"token operator\">=</span> selectedMediaType<span class=\"token punctuation\">.</span><span class=\"token function\">removeQualityValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t  \n\t    <span class=\"token class-name\">ResolvableType</span> targetResolvableType <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  \n\t    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpMessageConverter</span> converter <span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messageConverters<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t       <span class=\"token class-name\">ConverterType</span> converterTypeToUse <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>  \n\t       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>converter <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">GenericHttpMessageConverter</span> genericConverter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>genericConverter<span class=\"token punctuation\">.</span><span class=\"token function\">canWrite</span><span class=\"token punctuation\">(</span>targetType<span class=\"token punctuation\">,</span> valueType<span class=\"token punctuation\">,</span> selectedMediaType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t             converterTypeToUse <span class=\"token operator\">=</span> <span class=\"token class-name\">ConverterType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GENERIC</span><span class=\"token punctuation\">;</span>  \n\t          <span class=\"token punctuation\">}</span>  \n\t       <span class=\"token punctuation\">}</span>  \n\t       <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>converter <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">SmartHttpMessageConverter</span> smartConverter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t          targetResolvableType <span class=\"token operator\">=</span> <span class=\"token function\">getNestedTypeIfNeeded</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResolvableType</span><span class=\"token punctuation\">.</span><span class=\"token function\">forMethodParameter</span><span class=\"token punctuation\">(</span>returnType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>smartConverter<span class=\"token punctuation\">.</span><span class=\"token function\">canWrite</span><span class=\"token punctuation\">(</span>targetResolvableType<span class=\"token punctuation\">,</span> valueType<span class=\"token punctuation\">,</span> selectedMediaType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t             converterTypeToUse <span class=\"token operator\">=</span> <span class=\"token class-name\">ConverterType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SMART</span><span class=\"token punctuation\">;</span>  \n\t          <span class=\"token punctuation\">}</span>  \n\t       <span class=\"token punctuation\">}</span>  \n\t       <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>converter<span class=\"token punctuation\">.</span><span class=\"token function\">canWrite</span><span class=\"token punctuation\">(</span>valueType<span class=\"token punctuation\">,</span> selectedMediaType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>  \n\t          converterTypeToUse <span class=\"token operator\">=</span> <span class=\"token class-name\">ConverterType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BASE</span><span class=\"token punctuation\">;</span>  \n\t       <span class=\"token punctuation\">}</span>  \n\t       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>converterTypeToUse <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t          body <span class=\"token operator\">=</span> <span class=\"token function\">getAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">beforeBodyWrite</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> returnType<span class=\"token punctuation\">,</span> selectedMediaType<span class=\"token punctuation\">,</span>  \n\t                <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpMessageConverter</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> converter<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> inputMessage<span class=\"token punctuation\">,</span> outputMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>body <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t             <span class=\"token class-name\">Object</span> theBody <span class=\"token operator\">=</span> body<span class=\"token punctuation\">;</span>  \n\t             <span class=\"token class-name\">LogFormatUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">traceDebug</span><span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">,</span> traceOn <span class=\"token operator\">-></span>  \n\t                   <span class=\"token string\">\"Writing [\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">LogFormatUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">formatValue</span><span class=\"token punctuation\">(</span>theBody<span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span>traceOn<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t             <span class=\"token function\">addContentDispositionHeader</span><span class=\"token punctuation\">(</span>inputMessage<span class=\"token punctuation\">,</span> outputMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t             <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>converterTypeToUse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t                <span class=\"token keyword\">case</span> <span class=\"token constant\">BASE</span> <span class=\"token operator\">-></span> converter<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> selectedMediaType<span class=\"token punctuation\">,</span> outputMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t                <span class=\"token keyword\">case</span> <span class=\"token constant\">GENERIC</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GenericHttpMessageConverter</span><span class=\"token punctuation\">)</span> converter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> targetType<span class=\"token punctuation\">,</span> selectedMediaType<span class=\"token punctuation\">,</span> outputMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t                <span class=\"token keyword\">case</span> <span class=\"token constant\">SMART</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SmartHttpMessageConverter</span><span class=\"token punctuation\">)</span> converter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> targetResolvableType<span class=\"token punctuation\">,</span> selectedMediaType<span class=\"token punctuation\">,</span> outputMessage<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t             <span class=\"token punctuation\">}</span>  \n\t          <span class=\"token punctuation\">}</span>  \n\t          <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  \n\t             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">isDebugEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n\t                logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nothing to write: null body\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t             <span class=\"token punctuation\">}</span>  \n\t          <span class=\"token punctuation\">}</span>  \n\t          <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>  \n\t       <span class=\"token punctuation\">}</span>  \n\t    <span class=\"token punctuation\">}</span>  \n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\">// ...</span>\n\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Summary (by ChatGPT)</h2>\n<p>Spring MVC의 <code class=\"language-text\">DispatcherServlet</code> 처리 흐름을 목록으로 정리한 내용은 다음과 같다:</p>\n<ol>\n<li><strong>DispatcherServlet</strong>:\n<ul>\n<li>클라이언트 요청을 중앙에서 처리하는 역할</li>\n<li><code class=\"language-text\">HandlerMapping</code>, <code class=\"language-text\">HandlerAdapter</code>, <code class=\"language-text\">ReturnValueHandler</code> 등 delegate components를 사용하여 요청을 처리</li>\n</ul>\n</li>\n<li><strong>HandlerExecutionChain</strong>:\n<ul>\n<li>실제 핸들러(컨트롤러 메서드)와 이를 전후로 처리할 인터셉터들을 관리</li>\n<li>요청에 맞는 핸들러와 인터셉터를 찾아 전후 처리 작업 수행</li>\n</ul>\n</li>\n<li><strong>HandlerMapping</strong>:\n<ul>\n<li>요청에 맞는 컨트롤러를 찾아 반환</li>\n</ul>\n</li>\n<li><strong>HandlerAdapter</strong>:\n<ul>\n<li>컨트롤러 메서드를 호출하기 위한 어댑터 역할</li>\n<li>적합한 <code class=\"language-text\">ArgumentResolver</code>로 파라미터를 처리하고, <code class=\"language-text\">ReturnValueHandler</code>로 반환값을 처리</li>\n</ul>\n</li>\n<li><strong>ArgumentResolver</strong>:\n<ul>\n<li>컨트롤러 메서드의 파라미터 값을 생성하여 전달</li>\n</ul>\n</li>\n<li><strong>ReturnValueHandler</strong>:\n<ul>\n<li>컨트롤러 메서드의 반환값을 처리</li>\n<li>반환값에 따라 적합한 메시지 컨버터를 사용하여 직렬화 처리</li>\n</ul>\n</li>\n<li><strong>MessageConverter</strong>:\n<ul>\n<li>반환값을 직렬화하여 클라이언트에게 전달</li>\n<li>예: <code class=\"language-text\">StringHttpMessageConverter</code>, <code class=\"language-text\">MappingJackson2HttpMessageConverter</code> 등</li>\n</ul>\n</li>\n<li><strong>최종 처리</strong>:\n<ul>\n<li>반환값이 <code class=\"language-text\">ResponseEntity</code>라면, 적합한 <code class=\"language-text\">HttpMessageConverter</code>로 직렬화하여 응답 처리</li>\n</ul>\n</li>\n</ol>","frontmatter":{"title":"Understanding DispatcherServlet in Spring MVC","date":"2025년 04월 15일 09:04","updated":"2025년 07월 10일 15:07","tags":["spring"],"series":null},"fields":{"slug":"/spring_mvc_dispatcherservlet/","readingTime":{"minutes":18.525}}},"seriesList":{"edges":[{"node":{"id":"42bf5959-adba-55bb-a6ed-6347a22b7298","fields":{"slug":"/nuxt-katex/"},"frontmatter":{"title":"Nuxt content에 Mathtype 사용하기"}}},{"node":{"id":"7fc729dc-de56-5f85-a363-123afedc0e55","fields":{"slug":"/ZeroPage_지금그때_2022/"},"frontmatter":{"title":"2022 ZeroPage 지금그때"}}},{"node":{"id":"f8f7470f-000c-592f-9791-14400e103d5a","fields":{"slug":"/readme/"},"frontmatter":{"title":"README"}}},{"node":{"id":"d5272324-e922-5bdd-a8c3-90c1acb79b2f","fields":{"slug":"/why-obsidian/"},"frontmatter":{"title":"기존 블로그 대신 Obsidian을 택한 이유"}}},{"node":{"id":"4104488d-e257-5e42-896e-87f41761a795","fields":{"slug":"/0-1. CA Intro/"},"frontmatter":{"title":"Computer Architecture Intro"}}},{"node":{"id":"30fcde9e-20bd-5555-9560-ca0136d7d30f","fields":{"slug":"/0-2. CA Overview/"},"frontmatter":{"title":"CA Overview"}}},{"node":{"id":"6ce32435-2247-5f01-b7ae-30c6a72bdb9e","fields":{"slug":"/1-1. Defining Performance/"},"frontmatter":{"title":"Defining Performance"}}},{"node":{"id":"a9a2aee1-bbfd-5d10-984d-8ccc1473c416","fields":{"slug":"/1-2. Measuring Performance/"},"frontmatter":{"title":"Measuring Performance"}}},{"node":{"id":"62397c00-742b-5787-91b0-ac2bf4f89c1b","fields":{"slug":"/2-1. Designing principles 1~3 of MIPS ISA/"},"frontmatter":{"title":"Design principles 1~3 of MIPS ISA"}}},{"node":{"id":"4af0bcf6-9fee-5cf3-b1c9-b7b5835d8770","fields":{"slug":"/2-2. Design principles 4 of MIPS ISA/"},"frontmatter":{"title":"Design principles 4 of MIPS ISA"}}},{"node":{"id":"a5f532e7-7d9b-5055-b14a-aaed0a9db9d2","fields":{"slug":"/2-3. Representing Instructions in computer/"},"frontmatter":{"title":"Representing Instructions in computer"}}},{"node":{"id":"d9e769a8-0177-562e-a139-894ce27dcce6","fields":{"slug":"/2-4. Supporting procedures in computer HW/"},"frontmatter":{"title":"Supporting procedures in computer HW"}}},{"node":{"id":"739cb579-ef60-52a7-a84f-443e55d9fbd1","fields":{"slug":"/2-5. MIPS memory allocation & addressing/"},"frontmatter":{"title":"MIPS memory allocation & addressing"}}},{"node":{"id":"d87f2a2c-3c02-5edc-a6b6-e3433578add0","fields":{"slug":"/3-1. Addition and Subtraction/"},"frontmatter":{"title":"Addition and Subtraction"}}},{"node":{"id":"ebbf8c5b-a2bd-5064-a19f-6bdc33c974a4","fields":{"slug":"/3-2. Multiplication/"},"frontmatter":{"title":"Multiplication"}}},{"node":{"id":"b56fb71a-95a2-517d-9081-511b86a2f657","fields":{"slug":"/3-3. Division/"},"frontmatter":{"title":"Division"}}},{"node":{"id":"b937d69d-1c63-5872-b7ac-2b1fb0042cc4","fields":{"slug":"/4-1. Processor Overview/"},"frontmatter":{"title":"Processor Overview"}}},{"node":{"id":"ed6e43e5-a2df-59f6-be3d-c464f14c0530","fields":{"slug":"/4-2. Controlling a datapath/"},"frontmatter":{"title":"Controlling a datapath"}}},{"node":{"id":"e534d64c-5713-536b-8872-8333d169670a","fields":{"slug":"/4-3. A single-cycle datapath/"},"frontmatter":{"title":"A single-cycle datapath"}}},{"node":{"id":"a6701aa1-cb00-5e8e-b3d6-c536fab41e8b","fields":{"slug":"/4-4. Pipelining overview/"},"frontmatter":{"title":"Pipelining overview"}}},{"node":{"id":"1fcf23d9-0d39-57a9-aad6-d5354378e3e2","fields":{"slug":"/4-5. Handling hazards/"},"frontmatter":{"title":"Handling hazards"}}},{"node":{"id":"b3fc2b84-3be0-5b73-a339-cd42ef995cfc","fields":{"slug":"/4-6. Exceptions/"},"frontmatter":{"title":"Exceptions"}}},{"node":{"id":"579ead23-f5d4-5b7b-9a0f-125b86fd6678","fields":{"slug":"/5-1. Cache overview/"},"frontmatter":{"title":"Cache overview"}}},{"node":{"id":"54b7e29f-b59a-5f90-a9f7-a097eb9d71da","fields":{"slug":"/5-2. Improving cache performance/"},"frontmatter":{"title":"Improving cache performance"}}},{"node":{"id":"449ab907-aecb-5a4a-a143-ba9fe16f212b","fields":{"slug":"/5-3. Virtual memory Part 1/"},"frontmatter":{"title":"Virtual memory Part 1"}}},{"node":{"id":"f757510a-442a-55e1-a52e-52bea333756d","fields":{"slug":"/5-4. Virtual memory Part 2/"},"frontmatter":{"title":"Virtual memory Part 2"}}},{"node":{"id":"b67fe3d6-c0bd-51a6-a205-771b3f728a7d","fields":{"slug":"/interesting topic among sigchi 2024/"},"frontmatter":{"title":"sigchi 2024 관심 주제"}}},{"node":{"id":"56ad90a2-6eb5-5ba6-9785-36a854dc09c1","fields":{"slug":"/Respiratory Sound Database 유효성 분석/"},"frontmatter":{"title":"Respiratory Sound Database 유효성 분석"}}},{"node":{"id":"92c89d1b-e219-5dd0-af89-a3e7b13b5697","fields":{"slug":"/우아한테크코스_7기_BE_프리코스_1주차_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 프리코스 1주차 회고"}}},{"node":{"id":"c9026e49-4fc7-552d-9335-15b0e60c5753","fields":{"slug":"/우아한테크코스_7기_BE_프리코스_2주차_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 프리코스 2주차 회고"}}},{"node":{"id":"9f4f37ab-c5ad-5670-9f13-227e12f0ec1e","fields":{"slug":"/우아한테크코스_7기_BE_프리코스_3주차_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 프리코스 3주차 회고"}}},{"node":{"id":"455b72bd-1d68-5108-bc7a-c929a02cea02","fields":{"slug":"/우아한테크코스_7기_BE_프리코스_4주차_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 프리코스 4주차 회고"}}},{"node":{"id":"a20dad6a-f970-5208-83a9-7d6df1d9a35a","fields":{"slug":"/mobile spirometry 관련 자료/"},"frontmatter":{"title":"mobile spirometry 관련 논문"}}},{"node":{"id":"d49afac2-bf1e-5cc6-87f3-d722d867bcd4","fields":{"slug":"/스마트기기 내장 마이크기반 폐질환 진단기기 개발/"},"frontmatter":{"title":"논문 요약 - 스마트기기 내장 마이크기반 폐질환 진단기기 개발"}}},{"node":{"id":"f9ec4dcc-5e06-5216-a094-b4504c8d8028","fields":{"slug":"/spirosmart/"},"frontmatter":{"title":"논문 요약 - SpiroSmart: Using a Microphone to Measure\rLung Function on a Mobile Phone"}}},{"node":{"id":"05a766d5-0438-59c4-b291-59f60607988b","fields":{"slug":"/20241122_미팅내용정리/"},"frontmatter":{"title":"11/22 폐음연구 관련 미팅 내용 정리"}}},{"node":{"id":"a3f641d2-fd6a-5e57-bc47-29eaf0b499e3","fields":{"slug":"/ZeroPage_지금그때_2024/"},"frontmatter":{"title":"2024 ZeroPage 지금그때"}}},{"node":{"id":"0c07dd55-12a1-5d8c-9e6c-c8f4d40453b3","fields":{"slug":"/폐기능검사_지침_요약/"},"frontmatter":{"title":"폐음연구 - 폐기능검사 지침 요약"}}},{"node":{"id":"398c98b1-0496-536e-aeb5-088f063ab920","fields":{"slug":"/20241220_분당서울대병원_참관/"},"frontmatter":{"title":"12/20 분당서울대병원 폐기능 검사실 참관"}}},{"node":{"id":"ae45b7bc-f495-577f-a7e1-071a99f82620","fields":{"slug":"/우테코 git/"},"frontmatter":{"title":"우아한테크코스 GitHub"}}},{"node":{"id":"85dc5324-9611-5ff8-a0f1-bf6a22eb4335","fields":{"slug":"/daily_easy_english_expression_summary/"},"frontmatter":{"title":"Daily Easy English Expression"}}},{"node":{"id":"3eb58153-afe0-5d52-a81f-2cb59b028f11","fields":{"slug":"/우아한테크코스 레벨1 고민거리와 자료들/"},"frontmatter":{"title":"우아한테크코스 레벨1 고민거리와 자료들"}}},{"node":{"id":"ea3c6223-2692-5c98-bb92-e2dc93e551c1","fields":{"slug":"/우아한테크코스_7기_BE_레벨1_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 레벨1 회고"}}},{"node":{"id":"a1c42254-4961-53e0-88bc-06cf204ce7f6","fields":{"slug":"/spring_mvc_dispatcherservlet/"},"frontmatter":{"title":"Understanding DispatcherServlet in Spring MVC"}}},{"node":{"id":"a2bf7040-effd-5427-8326-a725ef62fff1","fields":{"slug":"/how_spring_injects_httpsession/"},"frontmatter":{"title":"How Spring Injects HttpSession"}}},{"node":{"id":"e971a6f2-daaa-5ed1-a9aa-f99c52972162","fields":{"slug":"/우아한테크코스_7기_BE_레벨2_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 레벨2 회고"}}},{"node":{"id":"0e15e05c-846f-52df-b765-b0471b66d7e5","fields":{"slug":"/how_spring_handle_websocket/"},"frontmatter":{"title":"How Spring Handle WebSocket"}}},{"node":{"id":"e9fec65a-dfe8-5e60-ba50-fd4cf47e1536","fields":{"slug":"/우아한테크코스_7기_BE_레벨3_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 레벨3 회고"}}}]},"previous":{"fields":{"slug":"/우아한테크코스_7기_BE_레벨1_회고/"},"frontmatter":{"title":"우아한테크코스 7기 BE 레벨1 회고"}},"next":{"fields":{"slug":"/how_spring_injects_httpsession/"},"frontmatter":{"title":"How Spring Injects HttpSession"}}},"pageContext":{"id":"a1c42254-4961-53e0-88bc-06cf204ce7f6","series":null,"previousPostId":"ea3c6223-2692-5c98-bb92-e2dc93e551c1","nextPostId":"a2bf7040-effd-5427-8326-a725ef62fff1"}},"staticQueryHashes":[],"slicesMap":{}}