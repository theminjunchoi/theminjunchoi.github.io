{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"지난 회고: retrospect-2024-1 돌아보기 이제 25년이라는 게 믿기지 않을 정도로 24년이 빨리 지나갔다. 돌아보니 작년 7월에 전역을 하고 남은 반년을 의미있게 보내려고 나름대로 부지런히 산 것 같은데 우선, 24년 하반기에는 드디어 자취를 시작했다. 자취를 한 여러 이유가 있지만 무엇보다 그동안 못 해왔던 공부를 할 수 있는 공간을 만들고…","fields":{"slug":"/retrospect-2024-2/"},"frontmatter":{"date":"2024년 12월 27일 22:12","title":"2024년 하반기 회고","tags":["회고"]},"rawMarkdownBody":"지난 회고: [[retrospect-2024-1]]\n## 돌아보기\n이제 25년이라는 게 믿기지 않을 정도로 24년이 빨리 지나갔다. 돌아보니 작년 7월에 전역을 하고 남은 반년을 의미있게 보내려고 나름대로 부지런히 산 것 같은데 우선, 24년 하반기에는 드디어 자취를 시작했다. 자취를 한 여러 이유가 있지만 무엇보다 그동안 못 해왔던 공부를 할 수 있는 공간을 만들고 싶었다. 군복무를 하면서 항상 코딩이든, 운동이든 자기계발에 대한 갈증이 있었는데 그럴 수 있는 공간이 없어서 아쉬웠다. 또 노트북과 한 몸인 컴공생들은 다들 이런 로망이 하나쯤은 있을 것 같은데, 내가 원하는 세팅을 맞추고 작업을 하고 싶다는 생각을 오래 해왔어서 사실 자취는 핑계 정도가 맞지 않나 싶다. \n\n우선 24년 하반기에 진행했던 것들은 아래와 같다.\n> - GDG on Campus CAU 4기 Core\n> - 우테코 지원하기\n> - 학부연구생\n> - 운동 \n### 우테코\n입대를 하기 전부터 하고 싶었던 것 중에 하나였다. 전역을 하고 7기 모집 공고만 올라오길 기다렸는데 공고가 올라오자마자 자소서를 준비했던 기억이 있다.\n\n공부해야할 게 명확했던 고등학생과 달리 대학에 오고 길지 않은 시간일 수 있지만, 그래도 지금까지 공부를 해오면서 항상 내가 향하고 있는 방향이 옳은 방향일까...에 대한 의문이 은연 중에 있었던 것 같았다. 그런 의문을 우테코가 풀어줄 수 있지 않을까, 또한 내가 틀리지 않았음을 스스로 증명하고 싶어서 우테코를 지원했다.\n\n지원 과정은 많은 시간을 요구한다. 운이 좋게도 나는 2학기도 군휴학 기간이라 다른 분들에 비해 비교적 많은 시간을 쏟을 수 있었고, 그중에서 자소서에 유독 공을 많이 들였다. 자소서는 최대한 담담하게, 내가 해온 것들에 대한 이유와 그 과정에서 느끼고 배운 점들을 최대한 주관적인 관점에서 자세히 적었는데 운이 좋게 잘 통한 것 같다.\n\n프리코스와 최종 코테를 하면서 코딩을 잘하는 사람은 어딜가나 많구나... 라는 걸 체감할 수 있었다. 당시에는 그런 사람들 사이에서 불안감, 열등감만 느꼈던 것 같은데 지금 생각해보면 한 번 더 겸손해질 수 있는 기회였고 배울 수 있는 점도 찾을 수 있는 시간이었다. \n\n![[스크린샷 2024-12-29 오전 12.40.35.png]]\n일부러 발표 당일에 기대도 안하려고 했지만 긴장이 엄청 됐던 기억이 있다. 운이 좋게 찾아온 기회인만큼 올해도 열심히 참여해서 배우는 것도, 느끼는 점도 많았으면 좋겠다.\n### 학부연구생\n자취 시작과 동시에 학부연구생을 시작했다. 입대 전에 미리 컨택을 드렸던 교수님의 연구실에 마침 전역할 때쯤에 자리가 생긴다고 해서 이것도 운이 좋게 바로 시작을 할 수 있었다.\n\n연구 주제도 마침 내가 관심 있어하던 문제를 다루고 있어서 큰 고민 없이 연구를 시작했다. 지금까지 하면서 느낀 점은 내가 생각하는 `개발`이라는 과정이 연구와 크게 다르지 않다는 것이다. 오히려 연구 과정이 캡스톤이나 여타 프로젝트 활동보다 더 `개발`이라는 키워드와 가깝지 않나...라는 생각이 든다. \n\n요즘 학교를 다니면서 느끼는 건, 학부생에게 학교나 동아리에서 요구하는 개발이라는 경험이 너무 프레임워크나 특정 언어에 대한 지식 수준만 해당하는 것 같은 느낌이 있었다. 내가 생각한 개발자라는 건 결국 현실세계에 있는 문제를 해결하는 과정에서 코딩을 하나의 수단으로 쓸 수 있는 사람인데, 요즘 학교나 동아리에서는 반대로 문제가 안되는 것들을 오히려 강요하고, 그래서 본인들이 제작한 프로그램의 필요성을 강제하는 듯한 느낌이 불편하게 다가오는 것 같다.\n\n하지만 학부연구생의 신분으로 짧지만 그동안 느꼈던 점은, 내가 문제 자체에 집중할 수 있는 시간이 많아서 좋았다. 그 과정에서 문제의 본질을 고민해보고, 여러 방향으로 생각하면서 `우리가 풀어야하는 문제가 무엇인지` 라는 단계부터 시작할 수 있어서 더 몰입할 수 있었고, 그래서 더 재미있게 다가온 것 같다. \n\n그치만 우테코를 시작하면서 병행을 하기는 힘들 것 같아 1월까지만 학부연구생을 할 것 같다. 마음 같아서는 둘 다 병행을 하고 싶은데 한 편으론 이것도 내 욕심같아서 복학 후에 다시 시작하지 않을까싶다.\n### 운동\n운동은 하면 할 수록 욕심이 생겨서 어려운 것 같다. 전역 이후에도 꾸준히 일주일에 적어도 4번, 5번은 운동을 해왔는데 어느 순간 내가 드는 중량과 몸이 정체가 돼서 어떻게 더 발전시킬 수 있을지 고민이 되는 시점인 것 같다. \n\n먹는 양을 늘리는 게 답인 것 같아서 최근에는 운동만큼 먹는 것도 신경을 쓰고 있지만 유의미한 변화가 있을지는 앞으로 더 지켜봐야할 것 같다.\n\n25년에는 우테코를 하면서 어떻게 병행해나갈지 고민도 된다. 일주일에 적어도 3번, 욕심내서 4번정도 운동을 하고 싶은데 이 부분도 우테코를 시작해봐야 알 수 있을 것 같다.\n## 2025년은?\n군복무 중 밤을 샐 때마다 전역 후의 계획을 세웠는데 신기할만큼 하나하나 이뤄갈 수 있었던 24년이었다. 운도 많이 따라준 것 같고 지금까지 준비해온 것들이 유의미했음을 알 수 있던 시간이었다.\n\n25년도 어쩌다보니 휴학을 하게 되었는데 여러 사람들을 만나면서 많이 배우고, 깨닫고, 성장할 수 있는 한 해가 되었으면 좋겠다. 깊이 있는 지식을 쌓고 내실을 다질 수 있는 시간이 되도록, 커리어 내외적으로 내 가치를 키울 수 있는 시간이 되도록 노력해보고 싶다.\n\n2025년에는 새로운 것들에 불편해하지 않고 도전해보기를, 주변 사람들에게 긍정적인 영향을 끼칠 수 있는 사람이 되기를, 부족한 것들을 인정하고 메꿀 수 있는 시간이 되기를 바라면서 24년 회고와 25년 목표를 기록해본다."},{"excerpt":"12월 20일에 직접 분당 서울대병원에 있는 폐기능 검사실을 참관할 수 있는 기회가 주어졌다. 참관 기록 내용 Vmax Vyntus SPIRO 장비를 사용함 (현재 단종) 열센서 + 압력센서 Flow measurement Resolution: 1mL Accuracy: 0.1 to 14 L/s: ± 5% of reading or 0.2 L/s, whiche…","fields":{"slug":"/20241220_분당서울대병원_참관/"},"frontmatter":{"date":"2024년 12월 20일 22:12","title":"12/20 분당서울대병원 폐기능 검사실 참관","tags":["폐음연구","학부연구생"]},"rawMarkdownBody":"12월 20일에 직접 분당 서울대병원에 있는 폐기능 검사실을 참관할 수 있는 기회가 주어졌다.\n\n### 참관 기록 내용\n- Vmax Vyntus SPIRO 장비를 사용함 (현재 단종)\n\t- 열센서 + 압력센서\n\t- Flow measurement\n\t\t- Resolution: 1mL\n\t\t- Accuracy: 0.1 to 14 L/s: ± 5% of reading or 0.2 L/s, whichever is greater\n\t- Volume integration\n\t\t- Resolution: 1mL\n\t\t- Accuracy: 0.5 to 8 L: ± 3% of reading or 0.05 L, whichever is greater\n- 환자에 대한 폐기능 검사 독려는 필수사항\n\t- 시작하기 전 충분한 설명이 필요함.\n\t- 검사 도중 적합하지 않으면 환자 상태에 따라 빠르게 재시도 또는 제대로 이해 못할 경우 재설명 후 시도\n- 원활한 이해를 위해 직접 제작한 영상도 존재\n- 적합 판단을 위해 Flow-Volume 그래프를 많이 활용하고 있음\n- 호기량이 약한 후반 부분도 끝까지 측정하고 검사적합 판단 요소로 활용\n- 검사 시, 고개를 위로 10~15도 정도 향한 자세로 시행 (기도 확보)\n- 2차 감염 방지 목적으로 특수 필터 사용\n- Reference로 최정근식이 아닌, Morris식을 활용 (현재 서울대병원만 그렇다고 함.)\n- 검사는 많아야 3번, 지침서보다 적게 시행하는 듯함\n\n### 참관 후기\n랩실에 들어오고 처음 참여하게 된 연구라 타 연구들이 어떻게 진행이 되는지 자세히 알지는 못하지만, 이렇게 우리가 하고자 하는 분야에 대해 여쭤볼 사람들이 있고, 참관할 수 있다는 게 되게 좋은 기회인 것 같다. 연구의 방향성을 잡을 때 실제 현장에서의 수요가 뭔지에 대해 알 수가 없어 힘든 경우가 있는데, 이번 참관을 통해 현장에서의 요구와 우리가 목표로 해야하는 점들을 확실히 할 수 있어서 속이 시원한 기분이었다.\n\n### 연구 진행 사항\n현재 HW는 다른 분이 주로 담당해서 개발을 하고 있고, 나는 SW 개발에 집중을 하고자 한다. 목표는 우리가 만든 HW에서 측정한 값을 실시간으로 보면서 이에 맞는 피드백을 제공해주는 것인데, 마침 다른 기기로 측정한 dataset을 찾은 상태다. 그래서 나는 먼저 데이터를 시간축에 따라 읽으면서 Flow와 Volume값을 보고 이에 맞는 올바른 피드백을 제공해주는 SW 개발을 할 것 같다.\n\n### + 여담\n직접 폐기능 검사실에 방문한 김에 내 폐기능을 측정해보았다.![[민준_검사수치.jpg]]\nRef값의 80%이상이면 정상인데, 다행히 넘긴 했다. 하다보니 괜히 욕심 생기고 자존심을 건들단까... 100퍼를 넘기고 싶었다. "},{"excerpt":"2016 폐기능검사 지침 연구 간에 소프트웨어적으로 구현할 사항들 중 기존 지침에서 반영할 수 있는 내용을 알고자 2016년에 대한결핵및 호흡기학회에서 발간된 폐기능검사 지침을 참고하고자 한다. 검사 적합성  오류가 없는 적합한 검사가 3회 이상 나올 때까지 검사를 반복 기류-용적과 용적-시간 곡선을 보고 적합성 판정 가장 높은 FVC와 FEV1을 결정하…","fields":{"slug":"/폐기능검사_지침_요약/"},"frontmatter":{"date":"2024년 12월 04일 12:12","title":"폐음연구 - 폐기능검사 지침 요약","tags":["폐음연구","학부연구생"]},"rawMarkdownBody":"## 2016 폐기능검사 지침\n연구 간에 소프트웨어적으로 구현할 사항들 중 기존 지침에서 반영할 수 있는 내용을 알고자 2016년에 대한결핵및 호흡기학회에서 발간된 폐기능검사 지침을 참고하고자 한다.\n## 검사 적합성\n![[Pasted image 20241204203703.png]]\n- 오류가 없는 적합한 검사가 3회 이상 나올 때까지 검사를 반복\n- 기류-용적과 용적-시간 곡선을 보고 적합성 판정\n- 가장 높은 FVC와 FEV1을 결정하고 이 두 합이 최대인 결과를 선정\n\n### 1. 검사 시작: 추정용적의 산출\n   ![[Pasted image 20241204204230.png]]\n   추적용적법을 통해 검사 시작 시간을 추정한다. 용적-시간 곡선에서 가장 기울기가 높은 곳에 접선을 그었을 때, 그 접선의 x절편이 검사 시작시간이 된다. 이때 EV값 (추정용적, back extrapolated volume)은 FVC의 5%와 150ml 중에 큰 수치보다 작아야한다.\n### 2. 검사 과정\n![[Pasted image 20241204211754.png]]\n   검사 대상자는 최대 흡기 상태에서 시작해야하고, 부드럽고 지속적인 호기를 해야한다.\n   - 조급함, 거짓시작, 최고오기기류속도 도달 시간이 120msec을 초과 시 재검\n   - 기침, 성대 폐쇄시 재검\n   - 호기의 조기 중단 또는 종료 없음: 용적-시간 곡선의 정상 부위를 보고 마지막 호기 최소 1초 동안 또는 적합한 호기 시간 후 용적 변화가 없으면 종료 시점으로 간주, 젊은 정산인의 경우 6초 이내에 끝날 수도 있음. 고령이나 폐쇄적 폐질환자는 6초보다 긴 호기가 여러번 나타날 수도 있는데, 이 경우는 검사자가 보고 더 이상 호기 불가능한 시점을 종료로 간주\n   - 기류가 새지 않음: 마우스피스 밖으로 새면 안됨\n   - 검사 도중 흡기가 있으면 안됨\n\n### 3. 검사 종료\n- 용적-시간 곡선에서 1초 이상 용적 변화가 없는 상태(25mL 미만 변화)를 유지해야함.\n\n### 검사 재현성\n![[Pasted image 20241204212429.png]]\n- 가장 높은 2개 FVC 수치들의 차이가 5%이내 또는 150 mL 이내여야 함.\n- FVC가 1.0 L 미만인 경우에는, 가장 높은 2개 수치들의 차이가 100 mL 이내여야 함.\n- 가장 높은 2개 FEV1 수치들의 차이도 150 mL 이내이어야 함.\n- 가장 높은 FVC와 FEV1 은 각기 다른 검사 결과에서 얻을 수 있음\n3개의 검사들이 재현성 기준에 안맞으면 최대 8번까지 검사를 반복한다. 검사를 하지 않기를 원하거나, 더 좋은 결과를 얻지 못할 것 같으면 가장 나은 검사 3개를 택한다.\n반복 검사 중에 FVC와 FEV1이 점점 감소하는 경우가 있는데 최초 검사치보다 20%이상 감소하는 경우 검사를 중단해야한다."},{"excerpt":"지난 회고 참고: ZeroPage_지금그때_2022 어제 중앙대학교 소프트웨어학부 학술동아리 ZeroPage에서 매년 주기적으로 열리는  행사를 다녀왔다. 이 행사는 졸업하신 선배분들과 재학생이 만나 선배분들의 그때와 우리들의 지금을 서로 공유하고 엿볼 수 있는 자리다. 후배분들은 학업이나 학교생활에 대한 본인의 고민을 털어 놓을 수 있고 이에 대한 조언…","fields":{"slug":"/ZeroPage_지금그때_2024/"},"frontmatter":{"date":"2024년 12월 01일 12:12","title":"2024 ZeroPage 지금그때","tags":["ZeroPage"]},"rawMarkdownBody":"지난 회고 참고: **[[ZeroPage_지금그때_2022]]**\n\n어제 중앙대학교 소프트웨어학부 학술동아리 [ZeroPage](https://portal.zeropage.org/)에서 매년 주기적으로 열리는 `지금그때` 행사를 다녀왔다.\n\n이 행사는 졸업하신 선배분들과 재학생이 만나 선배분들의 그때와 우리들의 지금을 서로 공유하고 엿볼 수 있는 자리다. 후배분들은 학업이나 학교생활에 대한 본인의 고민을 털어 놓을 수 있고 이에 대한 조언이나 선배분들의 경험을 들을 수 있다. 반대로 선배분들은 그런 질문들에 조언을 해주시고 요즘은 어떤 공부를 하는지, 학교 생활은 무엇이 달라졌는지 서로 이야기를 나눌 수 있는 자리이다.\n\n2023년에도 군복무 중에 휴가를 내서 참석을 했었는데 여건 상 기록을 못해서 올해는 이렇게라도 남겨보려고 한다. 올해는 약 20명정도가 모였고 재학생부터 99학번 선배님까지 평소 보기 힘든 분들까지 뵐 수 있었다.\n\n### 진행 방법\n총 3타임으로 나눠서 진행했고 매 타임마다 자유주제로 이야기를 이어갔다. 하루만에 기억이 날라간게 많아서 아쉽지만 기억나는 대로 적어보고자한다.\n\n### 공부\n최근에 든 고민 거리 중에 하나였는데, 좀 추상적으로 설명하자면, '이렇게 공부하는 게 맞는가?' 였다. 이런 고민이 든 이유는, 주변 사람들을 보면 각자 너무 재밌어하고 깊게 파고드는 기술이라든가, 개념이라든가, 그 기술 자체에 푹 빠져들어 공부하는 사람들을 많이 봐왔었다. 그러다보니 내가 공부하는 방식이 틀린 건가? 하는 생각이 종종 들었었다.\n\n지금까지는 어떠한 문제를 푸는 과정에서 필요에 의해 몇몇 개념과 기술들을 접하고 공부했는데 이러다보니 넓지만 얕은 지식만 쌓은 느낌이 들었다. 이런 고민이 들 찰나에, 선배가 해주신 말로는, 기본기가 잘 갖춰진 상태라면 아무 문제 없다, 오히려 본인은 한창 빅데이터에 푹 빠져서 공부를 했는데 요즘은 누구나 다 쓴다며 기술의 유행은 시도때도 없이 변하니까 그거에 맞게 따라갈 줄 알면 된다고 하셨다. \n\n필요에 의해 시작한 공부만큼 동기부여가 잘 된 경우가 없다는 이야기를 들었는데, 조금은 안심이 됐다. 그래도 어긋나가지는 않았구나 하는 생각이 들었다. 그렇지만 제너럴리스트는 되기 싫으니까, 공부를 해나가다가 내가 잘할 수 있는 분야를 얼른 찾아야겠다는 생각이 들긴 했다.\n\n### 군대\n아직 미필인 후배들한테는 한창 군대 이슈가 핫했다. 재작년의 나를 보는 기분이었다. 정보보호병으로 갈지, 공군을 갈지, 카투사는 붙을 수 있을지, 다 안되면 어떡하지, 등 여러 고민과 이로 인한 공부에 대한 공백 때문에 스트레스를 너무 받았었는데, 23학번 후배들도 비슷한 고민이 있는 것 같았다.\n\n이제와서 생각하면, 뭐로 가든 장단점은 있고, 대신 전역하고 복학 전까지 충분한 시간을 마련할 수 있게 군대를 가는 게 좋은 것 같다. 군대에서도, 군대에서만 배울 수 있는 게 있으니까 그거에 집중하고 평소에 하지 못했던 것들을 경험해보는 게 군복무를 잘 다녀오는 방법인 것 같다.\n\n평소 읽지 못했던 책을 읽어보고 많은 고민을 해보고, 본인에 대해 더 알아보고 취향을 찾아보는 것도 지루한 군복무를 조금은 다채롭게 만들 수 있는 방법인 것 같다. 운동을 습관화해오는 것도 추천한다.\n\n### 우리 동아리 문 닫습니다?\n![[Pasted image 20241202230437.png]]\n그렇다고 한다. 전역한 지 얼마 안돼서 동아리가 이 정도인 줄 모르고 있었는데 생각보다 활동 인원이 없는 것 같다. 선배분들 말로는 전에도 똑같은 상황이 있었다고, 걱정하지 말라고 하셨는데 회장단은 또 나름대로 고민이 많아보였다. \n\n내가 보기엔 동아리를 이끌어줄 3,4학년들이 코로나 학번이라 많이 없는 것 같다. 내가 새내기때도 열심히 활동하는 3,4학년을 보고 이거저거 참여했었는데, 지금은 고학년 부재로 참여하는 저학년분들이 없어서 아쉬운 것 같다. 그래도 애정하는 동아리인만큼, 어떻게든 동아리가 잘 이어나갔으면 좋겠다.\n\n### 2024 지금그때 회고\n![[Pasted image 20241203000143.png]]\n재학 중인 선후배도 만나고, 현직에 계신 분들도 만나면서 얼른 다시 학교 생활을 하고 싶다는 생각이 잠깐 들었다. 아직도 모르는 게 너무 많고, 배워야할 것도 너무도 많지만 그 과정이 너무 재밌고 내년, 내후년의 내가 어떤 고민을 갖고 살아갈지가 궁금해지는 하루였다. "},{"excerpt":"11월 22일에 강시혁 교수님, 권병수 교수님과 폐음 연구 관련 미팅이 있었다. 원래 우리팀의 연구는 폐질환자의 재활을 유도할 수 있는 간단한 spirometer의 제작과 사용자의 노력성 호기를 유도하고 올바른 방법을 안내할 수 있는 앱 구현이 주된 방향성이었다. 기존에 진행되었던 연구들은 대부분 간단한 기기나, 스마트폰만으로도 사용자의 폐기능을 간단하게…","fields":{"slug":"/20241122_미팅내용정리/"},"frontmatter":{"date":"2024년 11월 26일 12:11","title":"11/22 폐음연구 관련 미팅 내용 정리","tags":["폐음연구","학부연구생"]},"rawMarkdownBody":"11월 22일에 [강시혁 교수님](https://sites.google.com/view/si-hyuck-kang/home?authuser=0), [권병수 교수님](https://www.snubh.org/medical/drIntroduce.do?DP_TP=&DP_CD=IMR&sDpCdDtl=IMR&sDrSid=1029327&sDrStfNo=66098&sDpTp=)과 폐음 연구 관련 미팅이 있었다. \n\n원래 우리팀의 연구는 **폐질환자의 재활을 유도할 수 있는 간단한 spirometer의 제작**과 사용자의 노력성 호기를 유도하고 올바른 방법을 안내할 수 있는 앱 구현이 주된 방향성이었다. 기존에 진행되었던 연구들은 대부분 간단한 기기나, 스마트폰만으로도 사용자의 폐기능을 간단하게 측정하는 부분에 초점을 맞추었기에, 폐질환을 지닌 사용자의 폐기능을 주기적으로 트래킹하면서 재활 유도에 집중하려고 했다.\n\n우선 spirometer의 폐기능 측정 방식은 터빈에 자석을 부착해서 홀센서 방식으로 센싱을 하고 있고 실제 임상에서 사용되는 기기만큼의 정확도를 재현하기 위해 하드웨어를 수정해가고 있다.\n\n### 미팅 내용\n미팅을 하면서 적은 내용과 Q&A를 간단히 옮겨 적으면 아래와 같다.\n- *CHI'20 SpiroPlay* 연구 확인하기\n\t- 미팅 직전에 우리가 하고자하는 주제와 너무 비슷한 논문이 있었음, 바로 읽어볼 예정\n- `터빈 + 자석` 과 같은 홀센서로 spirometer를 구현하는게 특허에 걸리는지 확인하기\n- 폐질환자를 트래킹하는 과정에서 FVC가 해당 기간 내에 10% 이상 감소하면 악화로 판단\n\t- 매 측정마다 오차를 줄이는 게 중요\n\t- 실제 임상 기기와의 값 차이를 줄이는 게 중요\n\t- `일관성`이 가장 중요할듯\n\t- 기존 제작하던 터빈 형태는 바람이 약하더라도 관성 때문에 힘이 약해져도 계속 돌아가게 되는 데, 이 부분이 오차로 작용할 가능성 있음, 어떻게 해결할지?\n- 자가폐기능검사에 대한 수요는 점차 증가하고 있음\n\t- 폐기능 검사실 포화라고 함\n\t- 특히 어린이 천식 환자\n- 폐기능 지침에 따르면 최소 3번에서 최대 8번까지 검사를 시행하고 이때 Flow Volume Curve를 보고 검사를 잘했는지 판단. \n- 정확성 높은 기기도 중요하지만, 옆에서 끝까지 바람을 불게 해주는 `독려`가 중요.\n\t- `독려`를 해줄만한 SW가 중요\n\t- 실제로는 검사해주는 사람이 엄청 옆에서 독려해준다고함.\n- 실제 임상에서는 폐활량계의 다양한 파라미터까지 알려고 하지는 않음. \n\t- 기본적인 파라미터를 정확성, 일관성있게 뽑는 게 중요할듯\n- Flow Volume Curve 모양도 진단 과정에서 중요하다고 함\n- ILD의 경우 FVC, 천식과 COPD의 경우 FEV 중요\n\n### 미팅 결과\n연구 방향성을 바꿀 필요를 느꼈다. 재활, 게임 형식의 결과물보다 일관성 있고 정확도 있는 측정값을 내는 HW가 우선이 되어야할 것 같고, 폐기능검사 지침을 참고해서 사용자가 집이나 병원이 아닌 곳이더라도 올바른 방식으로 폐기능 검사를 유도할 수 있는 SW 구현에 집중해야할 것 같다."},{"excerpt":"mobile spirometry 관련 자료로 돌아가기 과제명 SpiroSmart: Using a Microphone to Measure Lung Function on a Mobile 발행년월 2012-09 링크 https://dl.acm.org/doi/10.1145/2370216.2370261 요약 SpiroSmart는 내장 마이크를 활용해 폐활량 측정을…","fields":{"slug":"/spirosmart/"},"frontmatter":{"date":"2024년 11월 19일 17:11","title":"논문 요약 - SpiroSmart: Using a Microphone to Measure\rLung Function on a Mobile Phone","tags":["폐음연구","논문리뷰","학부연구생"]},"rawMarkdownBody":"**[[mobile spirometry 관련 자료]]로 돌아가기**\n\n| 과제명  | SpiroSmart: Using a Microphone to Measure Lung Function on a Mobile |\n| ---- | ------------------------------------------------------------------- |\n| 발행년월 | 2012-09                                                             |\n| 링크   | https://dl.acm.org/doi/10.1145/2370216.2370261                      |\n\n## 요약\n- SpiroSmart는 내장 마이크를 활용해 폐활량 측정을 수행하는 저가용 모바일 폰 애플리케이션\n- 데이터 변환 과정 아래 참고\n-  측정 파라미터\n\t- FVC\n\t- FEV1\n\t- FEV1 / FVC\n\t- PEF\n- 활용 디바이스: iPhone 4s\n- 52명의 피실험자 대상으로 임상에서 사용하는 기기와 5.1% 오차 존재 (2012년 기준).\n\n## 연구의 주된 알고리즘\n마이크를 통해 녹음된 음성 데이터를 폐기능 평가에 필요한 데이터로 변환하는 게 목표.\n### **1. 입력 데이터: 압력 신호 p(t)**\n- 마이크로폰은 입에서 나오는 압력 신호를 수집\n- 이 신호는 **교류 결합(AC-coupled)** 특성을 가지며, 실제 압력의 비례적인 측정값으로 제공\n\n### **2. 압력 손실 보정**\n\n#### **(1) 거리 및 소리 반사 보정**\n- 입에서 스마트폰 마이크까지의 거리에서 발생하는 압력 손실을 보정\n- 사용자의 머리 주변에서 발생하는 소리 반사와 회절 효과도 모델링.\n\n#### **(2) Inverse Radiation Modeling**\n- 소리의 전파를 구체적으로 모델링하기 위해 구형 장애물(spherical baffle)의 음향 전달 함수를 사용 (함수 내용은 논문 참고)\n- 이 모델은 시간 도메인에서 역변환하여 FIR 필터링을 통해 신호에 적용\n\n### **3. 흐름 속도 변환**\n\n#### **(1) 압력을 흐름 속도로 변환**\n- 입술에서의 난류 흐름을 모델링하여 압력($plips​(t)$)을 공기 흐름 속도($ulips(t)$)로 변환\n- 관련 계산식도 논문 참고\n\n### **4. 특징 추출**\nSpiroSmart는 신호로부터 의미 있는 특징을 추출하기 위해 세 가지 주요 방법을 사용\n\n#### **(1) 시간 도메인: 신호 Envelope 계산**\n- 신호의 Hilbert 변환을 사용해 Envelope 계산\n- Envelope는 신호의 저주파 에너지를 나타내며, 공기 흐름 속도의 근사값으로 간주될 수 있음\n#### **(2) 주파수 도메인: Spectogram Processing**\n- 신호를 짧은 시간 프레임(30ms)으로 나누어 각 프레임의 FFT 계산\n- local resonance을 추출해 공기 흐름 속도와의 비례 관계를 파악\n#### **(3) 선형 예측 코딩(LPC)**\n- LPC를 사용하여 신호의 원천 파워와 음성 통로 필터(vocal tract filter)를 분리\n- 음성 통로 필터의 \"소스 파워\"는 폐에서 발생하는 흐름 속도의 근사값을 제공\n\n### **5. 머신 러닝 모델**\n\n#### **(1) 폐 기능 지표 회귀**\n- 추출된 특징(예: 신호 Envelope, 공명, LPC)을 사용하여 강제 폐활량(FVC), 1초 강제 호기량(FEV1), 최대 호기 속도(PEF)를 예측\n- 특징 값은 모델(bagged decision tree)을 통해 지표로 변환\n\n#### **(2) 곡선 모양 회귀**\n- 폐 기능 곡선의 모양(예: Flow-Volume 곡선)을 예측하기 위해 CRF(Conditional Random Field를 사용\n- 곡선의 형상을 정규화한 후, 예측된 지표 값을 사용해 곡선을 스케일링\n\n### **6. 결과 후처리**\n- 예측된 값은 Savitzky-Golay 필터(3차 다항식)를 사용해 잡음을 제거하고 부드럽게 만둚\n- 물리적으로 불가능한 곡선(예: 부피가 단조 증가하지 않는 곡선)은 제거"},{"excerpt":"mobile spirometry 관련 자료로 돌아가기 과제명 스마트기기 내장 마이크기반 폐질환 진단기기 개발 발행년월 2019-11 연구기관 원광대학교 링크 https://scienceon.kisti.re.kr/srch/selectPORSrchReport.do?cn=TRKO202000001587#; 요약 모바일 핸드폰의 내장 마이크를 활용해 사용자의 호기…","fields":{"slug":"/스마트기기 내장 마이크기반 폐질환 진단기기 개발/"},"frontmatter":{"date":"2024년 11월 18일 12:11","title":"논문 요약 - 스마트기기 내장 마이크기반 폐질환 진단기기 개발","tags":["폐음연구","논문리뷰","학부연구생"]},"rawMarkdownBody":"**[[mobile spirometry 관련 자료]]로 돌아가기**\n\n| 과제명  | 스마트기기 내장 마이크기반 폐질환 진단기기 개발                                                      |\n| ---- | ------------------------------------------------------------------------------- |\n| 발행년월 | 2019-11                                                                         |\n| 연구기관 | 원광대학교                                                                           |\n| 링크   | https://scienceon.kisti.re.kr/srch/selectPORSrchReport.do?cn=TRKO202000001587#; |\n\n## 요약\n- 모바일 핸드폰의 내장 마이크를 활용해 사용자의 호기시 음성 데이터를 기반으로 폐기능 평가.\n- VFCDM으로 주파수 분석\n\t- SPWV, STFT, WT, VFCDM 중 VFCDM이 가장 결과가 정확했음\n- 측정 파라미터\n\t- FVC\n\t- FEV1\n\t- FEV1 / FVC\n\t- PEF\n- 추가로 앱과 클라우드 서비스 구현\n- 활용 디바이스: iPhone 5s\n- 오차율: 2~3%\n\n## 연구 배경 및 필요성\n- **만성 호흡 질환의 심각성**\n    - WHO에 따르면 만성 폐쇄성폐질환(COPD) 환자는 전 세계적으로 6,400만 명, 천식 환자는 2억 3,500만 명에 달함.\n    - 국내에서는 40세 이상 COPD 유병률이 14.6%, 65세 이상은 30.2%로 연령 증가에 따라 높은 비율을 보임.\n- **자가 진단의 필요성**\n    - 현재 천식 및 COPD 진단은 폐활량계(spirometry test)를 통해 이루어짐. 이는 병원 방문이 필수적이며 지속적인 경과 추적이 어려운 문제가 있음.\n    - 정기적인 spirometry 검사를 통해 조기 진단이 가능하지만, 환자의 시간적·물리적 제약으로 인해 검사율이 낮음.\n    - “언제 어디서나 간편하게” 진단할 수 있는 스마트기기 기반 솔루션에 대한 수요 증가.\n\n## 연구 목표\n- **스마트기기 활용**\n    - 스마트폰 및 웨어러블 기기의 내장 마이크를 활용해 폐활량계를 대체할 수 있는 기술 개발.\n- **진단 알고리즘 및 플랫폼**\n    - 호흡 데이터를 정밀 분석하여 임상적으로 활용 가능한 지표(FVC, FEV1, FEV1/FVC, PEF)를 측정.\n    - 이를 기반으로 천식 및 COPD를 조기 진단하고 관리할 수 있는 애플리케이션 및 클라우드 플랫폼 구현.\n\n## 연구 내용\n- 특별한 **부가 장치 없이 스마트폰 내장 마이크 기반으로 호기시 신호를 측정**\n- **VFCDM을** 활용하여 임상에서 사용되는 PFT parameters(FVC, FEV1, FEV1/FVC, PEF)를 검출\n\t- 마이크를 이용하여 측정된 오디오 신호를 VFCDM을 활용하여 주파수 분석을 통한 noise를 제외한 실제 호기시 신호만을 검출\n\t- SPWV, STFT, WT 등 이전의 시간-주파수 분석 방법보다 VFCDM은 더 높은 해상도가 나타남\n\t- 검출된 신호를 활용하여 PFT parameters 평가\n- 알고리즘을 기반으로 스마트폰 어플리케이션 및 클라우드 플랫폼 개발\n\t- 실제 임상에서 사용되는 프로토콜을 기반으로 측정 횟수 및 검출 parameters 및 그래프 출력 ![[Pasted image 20241119221121.png]]\n\t- 측정된 PFT 결과 관리 및 모니터링을 위한 클라우드 플랫폼을 개발 ![[Pasted image 20241119221206.png]]\n\t- 임상에서 중요하게 사용되는 parameter인 FEV1/FVC의 정확도 검증을 위하여 13명의 실험자를 대상으로 검증한 결과 absolute error mean 4.12 및 standard deviation 3.45로 높은 정확도가 나타남 ![[Pasted image 20241119223351.png]]\n\n\n## 주요 기술 및 성과\n1. **VFCDM 및 Resonance Tracking**\n    - 노력성 호기 신호에서 목소리나 환경 소음을 제거해 호흡 데이터를 정확히 분석.\n    - FVC, FEV1, FEV1/FVC 등의 임상 지표를 정밀하게 계산.\n2. **스마트기기 기반 시스템**\n    - 병원 방문 없이 간단한 호흡만으로 천식 및 COPD를 검사할 수 있는 스마트폰 앱 개발.\n    - 클라우드 플랫폼을 통해 데이터를 저장하고 장기적으로 관리.\n3. **비교 분석 결과**\n    - 임상 검사의 주요 지표(FEV1/FVC 비율 등)와 비교했을 때, 2~3% 내외의 오차율로 실제 활용 가능성을 입증.\n\n## 연구 의의 및 기대 효과\n1. **의료 접근성 개선**\n    - 의료기관 방문 없이 스마트기기만으로 폐질환을 진단하고 관리 가능.\n    - 의료 인프라가 부족한 지역에서도 활용 가능.\n2. **조기 진단 및 관리**\n    - 천식 및 COPD를 조기에 발견하고, 환자의 상태를 지속적으로 추적 관리할 수 있음.\n3. **국민 건강 증진**\n    - 간편한 진단 시스템으로 일반인의 질환 발견률 증가.\n    - 만성 폐질환의 조기 발견 및 치료 기회 확대.\n\n## 연구의 한계 및 개선 방향\n- 다양한 환경에서 신호 정밀도를 유지하기 위한 알고리즘 개선 필요.\n- 웨어러블 기기와의 통합 및 사용자 편의성 향상을 위한 추가 연구.\n"},{"excerpt":"관련 논문 목록 spirosmart 스마트기기 내장 마이크기반 폐질환 진단기기 개발 시중에서 파는 모델 목록 Spirobank Smart SP70B SP80B SPM-A  ETC 삼성리서치 연구진 스마트폰 폐 기능 측정 기술로 국제학술대회 최우수상 관련 논문 찾는 중 자료 비교  spirosmart 원광대 연구 임상기기 대비 오차율 5.1% 2~3% 측정…","fields":{"slug":"/mobile spirometry 관련 자료/"},"frontmatter":{"date":"2024년 11월 17일 12:11","title":"mobile spirometry 관련 논문","tags":["폐음연구","학부연구생"]},"rawMarkdownBody":"### 관련 논문 목록\n- [[spirosmart]]\n- [[스마트기기 내장 마이크기반 폐질환 진단기기 개발]]\n\n### 시중에서 파는 모델 목록\n- [Spirobank Smart](https://spirometry.com/en/products/spirobank-smart/)\n- SP70B![[Pasted image 20241121012439.png]]\n- SP80B![[Pasted image 20241121012724.png]]\n- SPM-A ![[Pasted image 20241121013623.png]]\n### ETC\n- [삼성리서치 연구진 스마트폰 폐 기능 측정 기술로 국제학술대회 최우수상](https://www.khan.co.kr/economy/economy-general/article/202004231115001)\n\t- 관련 논문 찾는 중\n\n### 자료 비교\n\n|                 | [[spirosmart]]                   | [원광대 연구](https://minjun.blog/%EC%8A%A4%EB%A7%88%ED%8A%B8%EA%B8%B0%EA%B8%B0%20%EB%82%B4%EC%9E%A5%20%EB%A7%88%EC%9D%B4%ED%81%AC%EA%B8%B0%EB%B0%98%20%ED%8F%90%EC%A7%88%ED%99%98%20%EC%A7%84%EB%8B%A8%EA%B8%B0%EA%B8%B0%20%EA%B0%9C%EB%B0%9C/) |\n| --------------- | -------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 임상기기 대비 오차율     | 5.1%                             | 2~3%                                                                                                                                                                                                                                        |\n| 측정 파라미터         | FVC<br>FEV1<br>FEV1 / FVC<br>PEF | FVC<br>FEV1<br>FEV1 / FVC<br>PEF                                                                                                                                                                                                            |\n\n\n|                 | [Spirobank Smart](https://spirometry.com/en/products/spirobank-smart/)   | SP70B                                                                    | SP80B                                                                    | SPM-A                          |\n| --------------- | ------------------------------------------------------------------------ | ------------------------------------------------------------------------ | ------------------------------------------------------------------------ | ------------------------------ |\n| 임상기기 대비 오차율     | Unknown                                                                  | Unknown                                                                  | Unknown                                                                  | Unknown                        |\n| 측정 파라미터         | FVC<br>FEV1<br>FEV1 / FVC<br>PEF<br>FEV / FVC <br>FEV6<br>FEF2575<br>... | FVC<br>FEV1<br>FEV1 / FVC<br>PEF<br>FEV / FVC <br>FEV6<br>FEF2575<br>... | FVC<br>FEV1<br>FEV1 / FVC<br>PEF<br>FEV / FVC <br>FEV6<br>FEF2575<br>... | FVC<br>VC<br>MVV<br>40 more... |\n| Flow range      | ±16 L/s                                                                  | 0 L/s ~ 16 L/s                                                           | 0 L/s ~ 16 L/s                                                           | 1 L/s ~ 16 L/s                 |\n| Volume accuracy | ±2.5% or 0.05 L                                                          | ±3% or 0.05 L                                                            | ±3% or 0.05 L                                                            | ±3% or 0.05 L                  |\n| Flow accuracy   | ±5.0% or 0.20 L/s                                                        | ±5.0% or 0.2 L/s                                                         | ±5.0% or 0.2 L/s                                                         | ±10% or ±0.3 L/s               |\n"},{"excerpt":"과제 요약  과제 진행 소감 문제 요구 사항 파악 앞서 진행했던 것보다 요구하는 게 많았던 이번 주 과제였던 것 같습니다. 처음 과제를 받았을 때는 구현해야할 사항들이 많아서 쫓기는 마음으로 시작을 했었는데, 이 때문에 후반가서 잘못 이해하고 있던 게 있었습니다. \n이 부분을 보고 사용자가 특정 아이템을 구매하면, 그만큼을 메모리에서 구현된 재고에서 차감…","fields":{"slug":"/우아한테크코스_7기_BE_프리코스_4주차_회고/"},"frontmatter":{"date":"2024년 11월 10일 12:11","title":"우아한테크코스 7기 BE 프리코스 4주차 회고","tags":["프리코스","우아한테크코스"]},"rawMarkdownBody":"## 과제 요약\n![[apply.techcourse.co.kr_assignment_14_mission_52.png]]\n\n## 과제 진행 소감\n### 문제 요구 사항 파악\n앞서 진행했던 것보다 요구하는 게 많았던 이번 주 과제였던 것 같습니다. 처음 과제를 받았을 때는 구현해야할 사항들이 많아서 쫓기는 마음으로 시작을 했었는데, 이 때문에 후반가서 잘못 이해하고 있던 게 있었습니다.\n\n![[Pasted image 20241111004043.png]]\n이 부분을 보고 사용자가 특정 아이템을 구매하면, 그만큼을 메모리에서 구현된 재고에서 차감하고, 이를 다시 products.md에도 반영을 해야하는 줄 알았습니다. 모든 기능을 구현하고, 기본으로 제공해주는 테스트를 통과한 뒤에, 온라인에 제출을 했는데 케이스 1개를 통과하지 못한 상황이 발생했습니다. 여러 방면으로 삽질을 하다가 다행히 잘 못 이해한 부분을 찾았는데, 이런 사소한 부분에 대한 체크가 중요하다는 걸 다시 한 번 느꼈던 것 같습니다.\n\n### 지원서나 중간 회고에서 현실적인 목표를 설정하고 이를 달성했다고 생각하나요? 그 이유는 무엇인가요?\n지원서에서 이번 프리코스 기간 동안 테스트 코드를 작성하는 데에 익숙해지는 것을 목표로 잡았습니다. 앞서 진했던 1,2,3주의 과제와 달리 이번 주차 과제에서는 테스트 코드로 단위 테스트를 하기 어려웠던 것 같습니다. \n\n지난 과제에서는 어떤 형식으로 특정 값을 반환하는 메소드를 만들어야겠다는 확실한 판단을 갖고 메소드를 만들어서 이를 테스트를 하는 의의가 있었습니다. 하지만 이번 과제에서는, 특히 프로모션에 대한 기능을 구현하면서 어떠한 메소드를 만들어도 계속 그 기능과 반환값을 수정하는 등, 메인 코드들이 변경되는 경우가 많이 생겼습니다. 그렇기에 어떤 기능을 구현하는 코드의 테스트 코드를 작성해도 전체 개발 간에 메인 코드를 지속적으로 수정하면서 테스트 코드까지 같이 수정해야해서 오히려 개발 시간이 길어지는 현상이 생기기도 했습니다. \n\n테스트 코드를 작성하는 데 익숙해져야겠다는 목표는 달성했다고 생각을 하고, 이를 달성하면서 전체 서비스를 어떤 식으로 구현해야할지에 대한 확실한 판단이 선행되어야 겠다는 점도 깨달았습니다.\n### 중간 회고에서 조정한 목표가 실제 목표 달성에 도움이 되었나요? 목표를 달성하는 데 어떤 점이 효과적이었다고 생각하나요?\n중간 회고 이후 기록하는 과정에 소모되는 시간이 많이 줄었습니다. 프리코스 기간동안 거의 매일 코딩이나 피어리뷰를 했었는데 이를 하면서 새롭게 깨달은 내용이나, 다음 과제간 신경써야할 부분을 간단히라도 기록을 했었습니다. \n\n특히 테스트 코드 작성에 대한 점을 많이 기록을 했었는데, 이 덕에 확실히 테스트 코드를 통해 개발을 하는 과정이 익숙해진 것 같고, 다양한 방식의 테스트 코드를 작성할 수 있었습니다.\n### 각 미션의 목표를 달성하기 위해 세운 계획을 잘 이행했나요? 그 과정에서 어떤 전략이 효과가 있었나요?\n우테코에서 준 공통 피드백을 꼼꼼히 자주 읽던게 각 미션 목표를 이행하는데 많은 도움이 된 것 같습니다. \n\n사실 코딩을 하고 서로 피어 리뷰를 진행하면서도 '뭐가 정답일까', 혹은 '어떤 스타일로 코드를 작성하는 게 좋은건가' 라는 생각이 있었습니다. 피드백을 읽는 과정에서 역시 코딩을 하는 과정에서 정답은 없다는 걸 깨닫기는 했지만, 그래도 코드를 작성하는 긍정적인 컨벤션을 어깨넘어로 배울 수 있었고, 이를 체화하는 과정에서 각 미션에서 제공해준 목표를 자연스럽게 달성할 수 있었던 것 같습니다.\n### 몰입하고 함께 성장하는 과정을 통해 인상 깊었던 경험이나 변화가 있었나요?\n과제를 제출하고 서로 리뷰를 진행했던 게 가장 기억에 남는 것 같습니다. 다른 사람의 코드를 이렇게 깊게, 오랫동안 보고 분석한 적이 처음이었는데, 리뷰를 하고 받는 과정에서 배운 게 굉장히 많았고, 한 가지 주제에서 나랑 같은 코드가 하나도 없다는 점이 꽤 재밌게 느껴졌습니다.\n\n우선, 처음에는 코드 리뷰가 쉽지는 않았습니다. 다른 사람의 코드와 생각을 이해하는 과정이 꽤 오랜 시간과 집중을 필요로 하는 일임을 알 수 있었고, 반대로 그만큼 저는 코드를 더 가독성 좋게, 이해하기 쉽게 작성해야겠다는 생각도 했습니다. 좋은 리뷰를 해주고 싶은 만큼 자바라는 언어와, 객체 지향이라는 개념을 공부할 수 있었고 학습한 만큼 상대방에게 좋은 피드백을 줄 수 있다는 것도 뿌듯했습니다. \n\n코드 리뷰를 하면서 같은 고민을 나눌 수 있는 점도 좋았습니다. 과제를 구현하면서 혼자 했던 고민들, 리뷰 과정에서 생긴 해결되지 않은 문제들을 나누고, 이야기 하면서 제 궁금증을 해결할 수 있었습니다.\n\n그리고 무엇보다, 코드 리뷰를 하면 저보다 수준이 높고, 많은 손을 거친 코드들을 볼 수 있는데, 이분들의 코드를 보면서 제 코드를 개선시켜날 수 있는 점이 좋았습니다. 코드 보는 안목이 잡혀나가는 것 같고, 저만의 기준이 생기면서 이를 다음 과제에 적용해나가는 과정이 꽤나 재미있게 느껴졌습니다. "},{"excerpt":"과제 요약  과제 진행 소감 MVC, 디자인 패턴 꼭 적용해야하나? 1, 2주차는 시작과 동시에 기능에 따라 코드를 분리하려고 노력했었지만, 이번 3주차에서는 우선적으로 기능 구현에 초점을 두었습니다. 1, 2주차보다는 조금 더 빠르게 구현을 해보고 싶어서 코드의 구조가 조금 망가지더라도 기능구현을 먼저 해두고, 필요에 따라 중간에 분리를 하거나 완성 후…","fields":{"slug":"/우아한테크코스_7기_BE_프리코스_3주차_회고/"},"frontmatter":{"date":"2024년 11월 04일 12:11","title":"우아한테크코스 7기 BE 프리코스 3주차 회고","tags":["프리코스","우아한테크코스"]},"rawMarkdownBody":"## 과제 요약\n![[apply.techcourse.co.kr_assignment_14_mission_49 2.png]]\n\n## 과제 진행 소감\n### MVC, 디자인 패턴 꼭 적용해야하나?\n1, 2주차는 시작과 동시에 기능에 따라 코드를 분리하려고 노력했었지만, 이번 3주차에서는 우선적으로 기능 구현에 초점을 두었습니다. 1, 2주차보다는 조금 더 빠르게 구현을 해보고 싶어서 코드의 구조가 조금 망가지더라도 기능구현을 먼저 해두고, 필요에 따라 중간에 분리를 하거나 완성 후에 코드 분리를 진행했습니다.\n\nMVC 패턴을 이번 프리코스를 하면서 처음 적용해보았는데, 1, 2주차 기간에는 처음부터 이 패턴을 적용하느라 억지로 코드를 작성한 감이 있었습니다. 그렇다보니 이 패턴의 장점이나, 필요성 보다는 틀에 맞추면서 코딩을 하는 듯한 느낌을 받았었는데, 이번에는 반대였습니다. \n\n오히려 막무가내로 코딩을 하는 과정에서 어느정도 정형화 된 틀의 필요성을 느꼈고, 특히 Controller와 View의 분리의 필요성을 느꼈습니다. 입력값의 유효성을 판단해주는 과정을 처음에는 View에서 해줘야 된다고 생각했었습니다. 사용자의 입력을 받는 역할이 View니까, View가 마찬가지로 재요구하기 위해 Validation까지 해줘야하지 않나? 로 시작해서 코딩을 했었는데, View와 Util의 의존성이 점점 커지는 것 같아서 Controller에서 입력값의 유효성을 판단하도록 코드를 수정했고, View는 본래의 기능에 충실할 수 있었습니다. \n\n1, 2, 3주차의 프리코스를 경험하면서 디자인 패턴을 공부하기 위해 억지로 그 패턴에 적용해보는 것도 필요하다고 생각이 들었고, 반대로 막무가내로 코딩을 해보는 것도 그 패턴의 중요성을 느낄 수 있는 방법일 거라고 느꼈습니다. 그리고 디자인 패턴이라는 게 억지로 만든 거라기 보다는, 기능에 따라 코드를 분리하면서 자연스럽게 생긴 형식이라는 걸 다시 한 번 느낄 수 있었던 것 같습니다.\n\n### 사소하지만 중요한 것들\n매 주차별 미션에서 신경을 쓰는 부분이지만 아직 부족한 점들이 있는 것 같습니다. 함수와 변수의 명명, 접근 제한자 같은 부분들을 1주차에서 많이 놓쳐서 피드백을 받았는데, 2, 3주차에 걸쳐 개선해보려고 노력했습니다. 명명 규칙의 경우, 단순하지만 처음 보는 사람이 의미를 바로 파악할 수 있는 이름으로 지으려고 했는데, 만족스럽지 않은 경우도 있어서 리뷰를 받아보면서 개선해나가고 싶었습니다."},{"excerpt":"과제 요약  과제 진행 소감 지원서에 작성한 목표를 얼마나 달성하고 있다고 생각하나요? 그 이유는 무엇인가요? 지원서에 작성한 목표는 크게 4개입니다. 코드에 의미 부여 및 구현 능력 향상 자바에 대한 이해 심화 다른 사람의 코드 리뷰 블로그 기록 및 정리 이 중에서 절반 정도 달성하고 있다고 생각합니다. 이번 프리코스를 진행하면서 그 어느때보다 '확장가…","fields":{"slug":"/우아한테크코스_7기_BE_프리코스_2주차_회고/"},"frontmatter":{"date":"2024년 10월 28일 11:10","title":"우아한테크코스 7기 BE 프리코스 2주차 회고","tags":["프리코스","우아한테크코스"]},"rawMarkdownBody":"## 과제 요약\n![[apply.techcourse.co.kr_assignment_14_mission_46.png]]\n\n## 과제 진행 소감\n### 지원서에 작성한 목표를 얼마나 달성하고 있다고 생각하나요? 그 이유는 무엇인가요?\n지원서에 작성한 목표는 크게 4개입니다.\n\n- 코드에 의미 부여 및 구현 능력 향상\n- 자바에 대한 이해 심화\n- 다른 사람의 코드 리뷰\n- 블로그 기록 및 정리\n\n이 중에서 절반 정도 달성하고 있다고 생각합니다. \n\n이번 프리코스를 진행하면서 그 어느때보다 '확장가능한 코드'를 작성하려고 노력하고 있습니다. 지금까지 해온 코딩은 대부분 1회성 코드였기 때문에 원하는 결과물을 잘 도출해내는지에 대해서만 집중했다면, 이번 기간동안에는 추후에 다른 사람이 개발을 이어가더라도 문제 없이 진행할 수 있게 각 클래스, 매서드가 자기 일을 하게 만들고 가독성 있게 코드를 작성하려고 신경 쓴 것 같습니다. 그 과정에서 자바의 Stream API도 학습하면서 전보다 더 효율적인 코딩을 할 수 있게 되었습니다.\n\n코드리뷰는 처음이었습니다. 생각보다 다른 사람이 쓴 코드의 구조와 기능을 이해하는데 오래 걸린 적도 있고, 무엇보다 코드를 작성하는 데 있어서 정답은 없지만 오답은 있다고 생각하여 조심스럽게 리뷰를 한 적도 있었습니다. 리뷰를 잘 해보고 싶다는 생각도 들었는데, 그만큼 자바라는 언어와 객체지향이라는 개념에 대해 잘 알아야한다고 느꼈고, 2주차부터는 좀 더 개선된 리뷰를 해주고 싶다는 생각도 들었습니다. 리뷰를 하고 받는 과정에서 다른 사람의 풀이법도 배우고 제가 쓴 코드의 문제점과 개선점을 파악할 수 있었습니다. 이를 반영하여 2주차 과제를 했는데, 아직까지도 개선점이 많다고 느끼고 있습니다. \n\n계획했던 것만큼 기록에 많은 시간을 투자하지 못하고 있는 것 같습니다. 원래는 매일 기록을 하려고 계획했었는데, 아직까지는 코드를 작성하고 수정하는 과정에 많은 시간이 필요한 것 같습니다. 그렇게 시간을 소비하는 만큼 코드가 개선되는 게 보여서 손을 떼지 못하고 있는 것 같고, 목표를 수정할 필요성을 느끼고 있습니다.\n\n### 지원서에 작성한 목표를 변경해야 한다고 생각하시나요? 그렇다면 그 이유와 어떤 목표로 변경하고 싶으신가요?\n지금까지는 기록이라는 과정에 꽤 많은 힘을 주고 있느라 쉽게쉽게 블로그에 포스팅을 하지 못했던 것 같습니다. 이 점 때문에 위에서 말했듯 매일 기록을 하려고 했던 계획을 못 지키고 있는데 단위를 과제 기간에 맞게, 과제 제출 후 다른 사람의 코드 리뷰를 하면서 제 코드의 개선점을 파악하며 기록을 해보려고 합니다.\n\n코드를 작성하는 중간에는 제가 뭘 잘 못하고 있는지 파악이 안되기 때문에 리뷰를 하고 받은 후에 다음 주차 과제를 시작하기 전, 회고를 작성하면 좋을 것 같습니다.\n\n### 프리코스를 진행하면서 눈에 띄는 변화나 깨달은 점이 있나요?\n어느 순간 과연 '내가 프로그래밍을 재밌어할까?'라는 막연한 의문이 들었던 것 같습니다. 초등학생때부터 찾아서 할 정도로 좋아했었는데 시간이 지나면서 어느정도 의무감에 공부를 해왔던 것 같습니다. \n\n하지만 이번 프리코스를 진행하면서 노트북 앞에 앉아있지 않더라도 계속해서 제가 쓴 코드에 대해 고심하고, 테스트 코드는 어떻게 작성해야하는지 고민하면서 이 과정에 깊게 몰입할 수 있었습니다. 코드리뷰를 하면서도 저와는 다르게 풀이하는 과정도 배울 수 있었고,  아직도 제가 배워야할 게 많다는 점이 또 다른 학습 동기로 다가온 것 같습니다. 이 일련의 과정이 저에겐 재미있었고, '이래서 내가 프로그래밍을 좋아했구나' 다시금 알 수 있게된 시간이었습니다. \n"},{"excerpt":"과제 요약  과제 진행 소감 구현 요구사항에 대한 난이도 자체는 너무 평이했다. 아무리 프리코스더라도 이래도 되나? 싶을정도로 쉬워서 지난 기수도 찾아보니까 확실히 작년에 비해 난이도가 쉬웠던 것 같다. 그 이유가 뭔지 생각해보니, 과제에서 제한을 둔 사항이 이번에 훨씬 적었다. 대신 그만큼 예외 상황이 많이 생긴 것 같다. 입력 요구사항이 명확하지 않은…","fields":{"slug":"/우아한테크코스_7기_BE_프리코스_1주차_회고/"},"frontmatter":{"date":"2024년 10월 20일 12:10","title":"우아한테크코스 7기 BE 프리코스 1주차 회고","tags":["프리코스","우아한테크코스"]},"rawMarkdownBody":"## 과제 요약\n![[Pasted image 20241020194900.png]]\n\n## 과제 진행 소감\n구현 요구사항에 대한 난이도 자체는 너무 평이했다. 아무리 프리코스더라도 이래도 되나? 싶을정도로 쉬워서 지난 기수도 찾아보니까 확실히 작년에 비해 난이도가 쉬웠던 것 같다. 그 이유가 뭔지 생각해보니, 과제에서 제한을 둔 사항이 이번에 훨씬 적었다. \n\n대신 그만큼 예외 상황이 많이 생긴 것 같다. 입력 요구사항이 명확하지 않은 만큼 쉬웠지만 반대로 생각하면 예외가 많이 생겨서 하면 할 수록 예외처리를 많이 했던 것 같다. \n\n지금 생각하면 현실에서 일어날 법한 상황과 더 유사하지 않나 생각이 들고, 그만큼 진짜로 운영하고자 하는 시스템 속에서는 다양한 예외에 대한 처리가 필요하지 않나 생각이 든다.\n\n### MVC 패턴\n이론으로만 알고 있던 MVC 패턴을 처음으로 적용해보려고 시도해봤다. \n1. Model은 Controller와 View에 의존하지 않아야 한다.\n2. View는 Model에만 의존해야 하고, Controller에는 의존하면 안된다.\n3. View가 Model로부터 데이터를 받을 때는 사용자마다 다르게 보여주어야하는 데이터에 대해서만 받아야한다.\n4. Controller는 Model과 View에 의존해도 된다.\n5. View가 모델로부터 데이터를 받을 때, 반드시 Controller에서 받아야한다.\n위 다섯 가지 규칙에 따라 구현을 했는데, 다른 사람들의 리뷰를 얼른 받아보고 싶다. 본 과제를 하는데 이 패턴이 과연 필요할까 생각도 들고 그럼 어떤 패턴으로 구현하는게 좋을까 이야기 해보고 싶다.\n\n### 예외처리\n아마 가장 많은 시간을 투자한 부분이지 않을까 생각이 든다. 처음에 기능 구현은 금방 끝났는데 여러 테스트 케이스를 작성할 때마다 새로운 예외를 발견해버렸다. \n\n사용자의 입장에서 오류가 왜 났는지 피드백을 주고자 오류의 종류마다 새로운 IllegalArgumentException을 던져줬는데 과연 이게 좋은 방향일지 의문이 든다. \n\n적은 메소드로 여러 예외를 처리하는 게 좋을지, 나눌 수 있는 만큼 케이스마다 새롭게 예외처리를 해주는 게 좋을지 다른 사람의 의견도 궁금하다. 실제 서비스는 어떻게 운영이 될까, 개발자들은 어떤 방향성을 가지고 예외처리를 하는게 좋을까, 단순화가 좋은지 구체화가 좋은지 가장 고민을 많이 했던 부분인데 이번 과제는 앞서 말한 것처럼 사용자가 잘못 입력을 했을 때 그에 맞는 피드백을 주고 싶어서 구체화를 목표로 진행했다.\n"},{"excerpt":"기존 HCSLAB 폐음 연구팀에서 사용하던 데이터의 질이 좋지 않아 다른 폐음 데이터셋을 찾던 와중 ICBHI Respiratory Sound Database (The Respiratory Sound database - ICBHI 2017 Challenge)을 발견했다. 폐음 연구 분야에서는 유명한 데이터셋이고 Kaggle에서도 여러 사람들이 활발히 분석…","fields":{"slug":"/Respiratory Sound Database 유효성 분석/"},"frontmatter":{"date":"2024년 10월 13일 12:10","title":"Respiratory Sound Database 유효성 분석","tags":["폐음연구","학부연구생"]},"rawMarkdownBody":"기존 [HCSLAB](https://sites.google.com/view/hcslab-cau/home?authuser=0) 폐음 연구팀에서 사용하던 데이터의 질이 좋지 않아 다른 폐음 데이터셋을 찾던 와중 [ICBHI Respiratory Sound Database (The Respiratory Sound database - ICBHI 2017 Challenge)](https://paperswithcode.com/dataset/icbhi-respiratory-sound-database)을 발견했다. 폐음 연구 분야에서는 유명한 데이터셋이고 [Kaggle](https://www.kaggle.com/datasets/swapnilpanda/respiratory-sound-location)에서도 여러 사람들이 활발히 분석을 해놓은 게 많아서 우리 연구에도 쓸 수 있을지 그 결과를 보고자 한다.\n\n**알고자 하는 건 2개다.**\n1. **Dataset에서 wheeze와 crackle을 분류할 수 있는지**\n2. **1번과의 연관성 유무에 상관없이, 질병과 폐음 사이에 연관성이 있는지**\n\n## Respiratory Sound Database \n본 데이터는 원본 dataset 중 일부이다. 아쉽지만 기존 데이터 중 어떤 근거로 이 부분만 골라왔는지에 대한 설명이 없다.\n\n### 요약\n#### Contents 개요\n- 126명 대상 (어린이, 성인, 노인 등 전연령대)\n- 920개 .wav sound files\n- 920개 annotation .txt files\n- 각 환자별 질병 설명 .txt files\n\n#### 수집 기기\n- AKG C417L Microphone (AKGC417L)\n- 3M Littmann Classic II SE Stethoscope (LittC2SE)\n- 3M Litmmann 3200 Electronic Stethoscope (Litt3200)\n- WelchAllyn Meditron Master Elite Electronic Stethoscope (Meditron)\n\n#### 질병 종류 및 숫자\n\n| Disease                  | Num of People |\n| :----------------------- | ------------: |\n| COPD (만성폐쇄성폐질환)          |            64 |\n| Healthy                  |            26 |\n| URTI (상기도감염)             |            14 |\n| Bronchiectasis (기관지 확장증) |             7 |\n| Bronchiolitis (모세기관지염)   |             6 |\n| Pneumonia (폐렴)           |             2 |\n| Asthma (천식)              |             1 |\n\n#### Chest Location\n![[chest location.png]]\n- a. Trachea (Tc)\n- b. Anterior left (Al)\n- c. Anterior right (Ar)\n- d. Posterior left (Pl)\n- e. Posterior right (Pr)\n- f. Lateral left (Ll)\n- g. Lateral right (Lr)\n\n## [CNN: Detection of wheezes and crackles](https://www.kaggle.com/code/eatmygoose/cnn-detection-of-wheezes-and-crackles)\n### Overview\nwheeze와 crackle을 식별하는 CNN 구현에 관한 코드. crackle 감지는 평이한데, wheeze와 wheeze & crackle이 같이 있는 소리의 경우 분류의 정확도가 비교적 낮음. 전반적인 검증 정확도는 약 70%.\n![[Accuracy and Loss about detection of wheezes and crackles.png]]\n![[Result of detection of wheezes and crackles.png]]\niteration을 돌려도 Loss가 불규칙하게 튀는 이유가 뭔지 모르겠다. 정확도도 그리 높은 편은 아니라서 추후 연구할 때 wheeze와 crackle을 학습하는 용도로는 부적하지 않을까 생각 중. 폐음이 측정 위치에 따라 소리의 질 차이가 큰데 본 코드에서는 위치에 상관없이 cnn 모델에 학습을 시켜서 이런 결과가 나오지 않았나 추측 중. d, e 구역에서 측정한 wav 파일이 뚜렷하게 잘 들리므로 이것들만 학습을 시켜서 다시 테스트 해볼 필요는 있어보임.\n## [CNN: Disease Classification, Linked Features (95%)](https://www.kaggle.com/code/markdenton/cnn-disease-classification-linked-features-95/notebook)\n### Overview\n음성 데이터를 기반으로 질병을 식별하는 CNN 구현에 관한 코드. 식별이 잘되는 편, 정확도는 95%, loss는 0.2.\n![[Accuracy and Loss about disease claaification.png]]\n![[Result of Disease classification.png]]\n질병 종류 중 가장 많이 있는 상위 6개의 class에 한해서 학습 및 테스트함. 오른쪽 자료를 보면, COPD를 제외한 다른 질병에 대한 학습 데이터 수가 너무나도 적어서 유의미한 데이터라고는 보기 힘들 것 같음. \n\n## 생각해볼 것들\nCOPD를 제외한 다른 질병에 대한 음성 파일이 너무 적은 것 같다. 본 데이터만으로 CNN 모델을 학습시키기에는 부적절하다고 생각이 들고, 원본 데이터셋에 질병별로 음성 파일이 골고루 있는지 확인해볼 필요가 있어보인다. 또 원본 데이터셋에 대한 [Benchmark](https://paperswithcode.com/dataset/icbhi-respiratory-sound-database)가 있는데 이것들에 대해 알아보는 것도 좋을 것 같다.\n\n"},{"excerpt":"학>SIGCHI 2024 1. Touching the Moon: Leveraging Passive Haptics, Embodiment and Presence for Operational Assessments in Virtual Reality Intro 요약 다시금 달에 가기 위해 인력, 통신, 하드웨어, 소프트웨어 및 데이터 등 새로운 솔루션들이 뒷받침되…","fields":{"slug":"/interesting topic among sigchi 2024/"},"frontmatter":{"date":"2024년 09월 07일 12:09","title":"sigchi 2024 관심 주제","tags":["학부연구생"]},"rawMarkdownBody":"학>[SIGCHI 2024](https://programs.sigchi.org/chi/2024)\n## [1. Touching the Moon: Leveraging Passive Haptics, Embodiment and Presence for Operational Assessments in Virtual Reality](https://programs.sigchi.org/chi/2024/program/content/147838)\n\n### Intro 요약\n다시금 달에 가기 위해 인력, 통신, 하드웨어, 소프트웨어 및 데이터 등 새로운 솔루션들이 뒷받침되고 있음. 달과 같은 더 밝은 빛, 더 어두운 그림자, 감소된 중력이 있는 상황 속에서 우주인이 부피가 크고 제한적인 우주복을 입고 장애물을 탐색해야함. 이러한 독특한 상황들을 시뮬레이션 하기 위해 VR이 활용되고 있음.\n\nVR은 달의 환경 조건을 시각화하고 예상되는 시나리오를 테스트하는데 이상적인 도구이지만 시청각적 특성만 제현가능하다는 점 때문에 달을 완벽히 구현하는데 한계가 있음. \n\n**본 연구에서는 장갑과 물리적 모형을 이용해 실제와 비슷한 촉각적, 운동 감각을 구현**하고 가상 신체에 대한 구체화 감각을 향상시키려는 노력을 함.\n\n## [2. Mindfulness-based Embodied Tangible Interactions for Stroke Rehabilitation at Home](https://programs.sigchi.org/chi/2024/program/content/146728)\n\n### Intro 요약\n전 세계적으로 뇌졸중 환자 수가 증가하며 재활 비용이 상승하고 있음. 경제적인 문제 이외에도 물리 치료사도 부족하기 때문에 가정에서 재활 활동을 하기 어려움. 최근에는 촉각으로 상호 작용할 수 있는 도구를 통해 재활을 하기 시작했는데, HCI 분야에서 웨어러블 기기 분야로 연구를 하고 있음.\n\nMindfulness-based interventions는 신체적, 심리적으로 뇌졸중 회복에 도움이 된다고 함. 본 연구에서는 **Mindfulness-based interventions와 촉각을 결합하여 가정에서 재활을 위해 구체화할 수 있는 기술 설계를 연구함.** 이 연구는 Mindfulness-based Embodied Tangible Interactions(MBETI)에 대한 디자인 원칙 개발에 기여함.\n\n## [3. “I know I have this till my Last Breath”: Unmasking the Gaps in Chronic Obstructive Pulmonary Disease (COPD) Care in India](https://programs.sigchi.org/chi/2024/program/content/147082)\n\n### Intro 요약\n비전염성 질환(NCD: Non-communicable disease)은 전 세계 사망자의 74%를 차지함. 이러한 비전염성 질환 중 만성 호흡기 질환(CRD: Chronic Respiratory Diseases)은 사망률에 크게 기여함. 최근 20년 사이에 사망률 28.5%, 유병률 39.8% 증가. 그 중 만성 폐쇄성 폐질환(COPD: Chronic Obstructive Pulmonary Disease)은 흔하지만 진단하기가 어려워 전 세계 사망 원인 중 3위를 차지함. 세계보건기구(WHO)는 심각성을 인지하고 NCD 예방  및 관리를 위한 세계 행동 계획과 지속 가능한 개발을 UN 2030 의제에 포함 시킴.\n\n**COPD와 같은 CRD로 인한 사망의 90%는 저소득 및 중소득 국가에서 발생**. 2016년, CRD는 인도의 총 사망 및 장애 조정 생명 연수(DALY)의 10.9%와 6.4%를 차지, 이 중 CRD로 인한 총 DALY의 75.6%가 COPD에 기인. **인도의 의료 인프라에 불균형이 있기 때문**. 대기 오염이 심화되면서 인도에 상당한 사회경제적 부담이 생김. 2016년 인도에서 COPD로 인한 총 DALY 중 53.7%가 대기 오염에 기인. 병원과 병상이 인도 인구에 비해 현저히 적음.\n\nHCI 연구원들은 최근 몇 년 동안 CRD에 점점 더 관심을 보이고 있으며 디지털 건강 모니터링 및 웨어러블 장치, 원격 진료 및 원격 의료 솔루션, 행동 개입 및 게임화, 자기 관리를 포함한 CRD 치료의 다양한 측면을 다루고 있음.\n\n## [4. Evaluating ActuAir: Building Occupants' Experiences of a Shape-Changing Air Quality Display](https://programs.sigchi.org/chi/2024/program/content/146904)\n\n### Intro 요약\n건물이 점점 더 센서가 많아지고 기후 변화 압박 속에서 인식 및 웰빙 목적으로 건물 내 환경 데이터를 사용하는 데 대한 관심이 커지고 있음. 그에 비해 대형 모양 변경 디스플레이를 중심으로 한 연구에서는 거주자의 공기 질 데이터 경험에 대한 연구는 별로 없음.\n\nActuAir 시스템은 생체 모방 개념에서 영감을 받은 모듈식 맞춤형 룸 디바이더로, 팽창과 LED 애니메이션으로 AQ(Air Quality)를 표시. 이와 같은 대규모 소프트 로봇 및 모양 변경 반응형 아키텍쳐는 미래 스마트 빌딩 설계 및 HCI/HBI 연구에 기여함."},{"excerpt":"contents: 0-1. CA Intro Integrating TLB, Cache, Memory Aliasing in virtually addressed cache The same virtual address of different processes can be mapped to different physical address Wrong cache hi…","fields":{"slug":"/5-4. Virtual memory Part 2/"},"frontmatter":{"date":"2024년 08월 24일 12:08","title":"Virtual memory Part 2","tags":["컴퓨터구조","study"]},"rawMarkdownBody":"contents: [[0-1. CA Intro]]\n\n## Integrating TLB, Cache, Memory\n\n### Aliasing in virtually addressed cache\n\n- The same virtual address of different processes can be mapped to different physical address\n\t- Wrong cache hit can occur\n\n- Different virtual addresses of different process can be mapped to the same physical address <br>(when some memory space is shared by multiple processes)\n\t- The physical memory can be cached in two different locations\n\t- Coherency problem can happen <br>One program writes the data without the other program being aware that the data had changed\n\n<br>\n\n  \n\n#### Simple solution\n\n- Flush cache at context switching -> too high miss rate\n\t- Context switch: In multi-process environments, multiple processes share a single CPU\n\n<br>\n\n  \n\n## Hybrid cache: virtually-indexed  & physically-tagged cache\n\n- No aliasing problem\n\n- TLB & cache are accessed in a parallel manner (fast)\n![[01 13.jpg]]\n<br>\n\n- 32-bit virtual address\n\n- Page size = $2^p$ Bytes\n\n- Physical memory size =  $2^t$ Bytes (t-bit physical address)\n\n- Block size = $2^m$ words\n\n- Num of sets in a cache = $2^s$ sets\n![[02 13.jpg]]\n\n\n  \n\n### Typical multi-level cache setup with TLB\n\n- Typical L-1: hybrid cache (virtually-addressed, physically tagged)\n\t- To reduce hit time and miss rate\n\n- Typical L-2: physically-addressed cache\n\t- For simple implementation\n\t- In addition, usually L-2 si large<br>So, because p < s + m + 2, we cannot use hybrid cache"},{"excerpt":"contents: 0-1. CA Intro Main challenge in using main memory In multi-process environments, multiple processes share main memory at the same time. So depending on which processes run concurrently, the…","fields":{"slug":"/5-3. Virtual memory Part 1/"},"frontmatter":{"date":"2024년 08월 23일 12:08","title":"Virtual memory Part 1","tags":["컴퓨터구조","study"]},"rawMarkdownBody":"contents: [[0-1. CA Intro]]\n\n## Main challenge in using main memory\n\nIn multi-process environments, multiple processes share main memory at the same time.\n\nSo depending on which processes run concurrently, the following thing are dynamically changed.\n\n- The total amount of memory that each process can use\n\n- The memory address of data used in processes\n\n- The physical location of data (main memory or disk)\n\n  \n\n## Virtual Memory (VM)\n\n**Provides each process an illusion of the exclusively-use of large memory** <br>\n\nProcesses think that they use their own memory that can store everything related to them\n\n- CPU and OS manage the mapping between the virtual memory, physical memory and disk\n![[01 12.jpg]]\n\n<br>\n\n  \n\n### Advantages\n\n- Processes do not need to think about the effect of other processes in using memory\n\n    - The memory space used by processes is fixed virtually\n\n    - Simple development of programs\n\n- Virtual addresses of different processes are mapped to different physical addresses\n\n    - Only OS can manage this mapping information\n\n    - One process cannot access another's data\n\n<br>\n\n  \n\n### Term\n\n- **Page**: the minimum unit of information in virtual memory containing multiple blocks\n\n- **Page fault**: when an requested page is not present in main memory\n\n- **Virtual address**: an address that corresponds to a data location in virtual memory\n\n- **Physical address**: an address that corresponds to a data location in physical memory\n\n- **Disk address**: an address that corresponds to a data location in disk\n\n<br>\n\n  \n\n### Address translation (address mapping)\n\nIn virtual memory, pages are mapped from virtual address to physical or disk addresses\n\n- At this time, **fully associative placement** is used\n![[02 12.jpg]]\n\n<br>\n\n  \n\n### VM address translation\n\n- 32-bit virtual memory address\n\n- Virtual memory size: $2^{32}$ Bytes = 4GB\n\n- Page size: 4KB = $2^{2+10}$ Bytes\n\n- Physical memory size: 1GB = $2^{30}$ Bytes\n\n- Num of physical pages = $2^{18}$\n\n  \n\n#### Total page table size\n\nNum of PTEs $\\times$ PTE size = num of virtual pages $\\times$ 4Bytes<br>\n\n= Virtual memory size / page size $\\times$ 4Bytes<br>\n\n= $2^{32} / 2^{12} \\times 2^2$ Bytes = $2^{32 - 12 + 2}$ Bytes = 4MB\n\n<br>\n\n  \n\n## TLB (translation Lookaside Buffer)\n\nSince the page tables are stored in main memory, every memory access by a program can take at least twice as long<br>: one memory access to obtain the physical address and a second access to get the data<br>\n\n<br>\n\n**TLB** is a cache that keeps tract of recently used address mappings to try to avoid an access to the page table.<br>\n\n: cache of page table\n![[03 10.jpg]]\n\n\n  \n\n### Typical TLB structure\n\n- TLB size: 16 ~ 512 page entries\n\n- Fully associative TLBs (used in systems that use small TLBs) <br>or Small associative TLBs (used in systems that use large TLBs)\n\n- Replacement policy: random (for fast handling)\n\n- Hit time: 0.5 ~ 1 clock cycle\n\n- Miss penalty: 10 ~ 100 clock cycles\n\n- Miss rate: 0.01% ~ 1%\n\n<br>\n\n  \n\n### Integrating TLB, Cache, memory\n\n- Fully-associative TLB\n\n- Physical memory size = 4GB (=$2^{32}$)\n\n- Page size = 4KB = (=$2^{12}$)\n\n- Direct mapped cache\n\n- Num of cache blocks = $2^8$\n\n- Cache block size = $2^4$ word\n![[04 7.jpg]]\n\n  \n\n### Workflow\n\n- Access TLB first\n\n- Access cache using physical addresses: \"physically addressed cache\"\n\n<br>\n\n  \n\n### Physically addressed cache\n\n- Physically indexed & physically tagged <br>Both the cache index and tag are physical addresses\n![[05 6.jpg]]\n\n<br>\n\n  \n\n- 32-bit virtual address\n\n- Page size = $2^p$ Bytes\n\n- Physical memory size =  $2^t$ Bytes (t-bit physical address)\n\n- Block size = $2^m$ words\n\n- Num of sets in a cache = $2^s$ sets\n![[06 4.jpg]]\n\n<br>\n\n  \n\n### Scenario\n\n1. TLB -> hit, Cache -> hit, VM -> hit\n\n    - Best case\n\n    - TLB가 hit이므로 Page table 볼 필요가 없음\n\n    - 즉 main memory 접근 필요 없음\n\n    - 또 Cache가 hit이므로 TLB에 의해 가상주소 -> 실제주소, 이 실제주소로 Cache 접근\n\n2. TLB -> miss, Cache -> hit, VM -> hit\n\n    - TLB가 miss이므로 Page table에 접근해서 가상주소 -> 실제주소 변환 필요 (메모리 접근 1회 필요)\n\n    - Cache는 hit이므로 더 이상 메모리 접근 없음\n\n3. TLB -> miss, Cache -> miss, VM -> miss\n\n    - Worst case\n\n    - 최악의 경우로 memory에서 miss 발생 -> page fault\n\n    - 즉 valid bit가 0이므로 OS가 제어를 넘겨받음\n\n4. VM -> miss면, Cache와 TLB가 무조건 miss\n\n    - 계층구조를 이루고 있기 때문에 hit가 생길 수 없음\n\n<br>\n\n  \n\n### Virtually addressed cache\n\n- Virtually indexed & virtually tagged <br>Both the cache index and tag are virtually address\n![[07 3.jpg]]\n\n<br>\n\n  \n\n- 32-bit virtual address\n\n- Page size = $2^p$ Bytes\n\n- Physical memory size =  $2^t$ Bytes (t-bit physical address)\n\n- Block size = $2^m$ words\n\n- Num of sets in a cache = $2^s$ sets\n![[08 2.jpg]]\n\n  \n\n### Physically-addressed cache VS virtually-addressed cache\n![[09 3.jpg]]\n\n<br>"},{"excerpt":"contents: 0-1. CA Intro Associative caches Support more flexible placement of blocks\n Fully associative cache A cache structure in which a block can be placed in any location in the cache Requires al…","fields":{"slug":"/5-2. Improving cache performance/"},"frontmatter":{"date":"2024년 08월 22일 12:08","title":"Improving cache performance","tags":["컴퓨터구조","study"]},"rawMarkdownBody":"contents: [[0-1. CA Intro]]\n\n## Associative caches\n\nSupport more flexible placement of blocks\n![[01 11.jpg]]\n\n  \n\n<br>\n\n  \n\n### Fully associative cache\n\n- A cache structure in which a block can be placed in any location in the cache\n\n- Requires all entries to be searched\n\n<br>\n\n  \n\n### N-way set associative cache\n\n- A cache that has N locations where each block can be placed\n\n- Requires N entries to be searched\n\n- The set containing a memory block <br> (Block address) modulo (num of sets in the cache)\n\n- Direct-mapped cache = 1-way set associative cache\n\n- Full-associative cache = M-way set associative cache <br>(where M is num of cache blocks in the cache)\n\n<br>\n\n  \n\n### Associative cache address\n\n- 32-addresses\n\n- num of cache blocks: $2^n$ blocks\n\n- num of sets in the cache: $2^s$ sets (each set contains $2^{n-s}$ blocks: $2^{n-s}$-way set associative cache)\n\n- Block size: $2^m$ words ($2^{m+2}$ bytes)\n\n<br>![[02 11.jpg]]\n\n\n  \n  \n\n### Implementation of 4-way set associative cache\n![[03 9.jpg]]\n\n  \n\n### How much associativity\n\nIncreasing associativity makes **flexibility & complexity increase**. <br>\n\nWe have to find moderate amount of set size.\n\n<br>\n\n  \n\n### Block replacement policy\n\nIn set associative cache, if we have to make room for another block, one of blocks in a cache set must be removed\n\n- Find non-valid entries and replace one of them\n\n- If there are no non-valid entries, then choose one of valid entries in the set based on\n\n    - Least-recently used (LRU)\n\n    - Random\n\n<br>\n\n  \n\n## Multi-level caches\n\nUse primary (level-1, L-1) and secondary (level-2, L-2) caches\n\n- L-1 cache: placed close to (attached to) CPU\n\n    - Small, but very fast\n\n- L-2 cache: placed a little bit far from CPU\n\n    - Accessed on L-1 cache misses\n\n    - Larger and slower than L-1 cache, but still faster than main memory\n\n    - Main memory is accessed on L-2 cache misses\n\n<br>\n\n  \n\n### Practice 1\n\n- CPU base CPI = 1\n\n- L-1 miss rate = 2%\n\n- Main memory access time = 100ns\n\n- Clock period = 0.25ns\n\n  \n\n**CPI of a single-level cache system = CPU base CPI + memory stall CPI** <br>\n\n= CPU base CPI + L-1 miss rate * main memory access clock cycles <br>\n\n= CPU base CPI + L-1 miss rate * main memory access time / clock period <br>\n\n= $1 + 0.02 * (100 * 10^{-9}) / (0.25 * 10^{-9})$ <br>\n\n= $1 + 8 = 9$\n\n<br><br>\n\n  \n\n### Practice 2\n\n- CPU base CPI = 1\n\n- L-1 miss rate = 2%\n\n- **Global miss rate = 0.5% (Both L-1 & L-2 are missed)**\n\n- L-2 access time = 5ns\n\n- Main memory access time = 100ns\n\n- Clock period = 0.25ns\n\n  \n\n**CPI of a 2-level cache system = CPU base CPI + memory stall CPI** <br>\n\n= CPU base CPI + L-1 miss rate * L-1 miss penalty + global miss rate * L-2 miss penalty <br>\n\n= CPU base CPI + L-1 miss rate * L-2 access time / clock period + global miss rate * main memory access time / clock period <br>\n\n= $1 + 0.02 * (5 * 10^{-9}) / (0.25 * 10^{-9}) + 0.005 * (100 * 10^{-9}) / (0.25 * 10^{-9})$ <br>\n\n= $1 + 0.4 + 2 = 3.4$\n\n<br><br>\n\n  \n\n### Considerations\n\n#### Designing L-1 cache\n\n- Focus on minimizing hit time -> to yield a short clock period <br>(the MEM stage time & IF stage time are determined based on the L-1 cache hit time)\n\n  \n\n#### Designing L-2 cache\n\n- Focus on minimizing miss rate -> to avoid main memory\n\n  \n\n#### Therefore, in multilevel caches,\n\n- L-1 cache and its blocks size is smaller than a single-level cache\n\n    - to reduce hit time and miss penalty\n\n- L-2 cache is larger than a single-level cache\n\n    - to reduce miss rate"},{"excerpt":"contents: 0-1. CA Intro Memory hierarchy Locality Temporal locality     - Items accessed recently are likely to be accessed again soon Spatial locality     - Items near those accessed recently are li…","fields":{"slug":"/5-1. Cache overview/"},"frontmatter":{"date":"2024년 08월 21일 12:08","title":"Cache overview","tags":["컴퓨터구조","study"]},"rawMarkdownBody":"contents: [[0-1. CA Intro]]\n\n## Memory hierarchy\n\n### Locality\n\n- **Temporal locality**\n\n    - Items accessed recently are likely to be accessed again soon\n\n- **Spatial locality**\n\n    - Items near those accessed recently are likely to be accessed soon\n\n<br>\n\n  \n\n## Memory structure\n\n- **SRAM** (cache memory attached to CPU)\n\n    - Fastest (o.5ns ~ 2.5ns)\n\n    - most expensive\n\n    - smallest\n\n- **DRAM** (main memory)\n\n    - Faster (50ns ~ 70ns)\n\n    - more expensive\n\n    - smaller\n\n- **Disk** (HDD, SSD)\n\n    - Slowest (5ms ~ 20ms)\n\n    - cheapest\n\n    - largest\n\n<br>\n\n  \n\n### Use hierarchy\n\n- Copy recently accessed (and nearby) items from disk to smaller DRAM memory\n\n- Copy more recently accessed (and nearby) items from DRAM to smaller SRAM memory\n\n<br>\n\n  \n\n### Term\n\n- **Block**\n\n    - The minimum unit of information\n\n    - It can be either present or not present in a cache\n\n- **Hit**\n\n    - Accessed data is present\n\n    - Hit ratio: # of hits / # of accesses\n\n- **Miss**\n\n    - Accessed data is absent\n\n    - Block is copied from lower level (Additional time taken)\n\n    - Miss ratio: # of misses / # of access (= 1 - hit ratio)\n\n<br>\n\n  \n\n## Direct mapped cache\n\nEach memory location can be mapped directly to exactly one location in the cache\n![[01 10.jpg]]\n  \n\n\n\n  \n\n- Cache address = (Block address) modulo (# of blocks in cache)\n\n- Num of blocks in cache is power of 2 (e.g., 2, 4, 8, 16, 32, ...)\n\n- The cache address is determined by the low-order bits of block address\n\n- Tags contain the address information of the data (the high-order bits of the address)\n\n- To avoid using meaningless information, add a valid bit for each cache block\n\n    - Valid bit = 1 (the cache block contains valid information)\n\n    - Valid bit = 0 (the cache block contains invalid information)\n\n    - Initially, the valid bits of all cache blocks are set to 0\n\n<br>\n\n  \n\n### Cache address\n\n- 32-bit addresses\n\n- num of cache blocks: $2^n$ blocks (the lowest n bits of the block address are used for the index)\n\n- Block size: $2^m$ words ($2^{m+2}$ bytes)\n\n    - m bits are used for the word within the block, 2 bits are used for the byte within the word\n\n![[02 10.jpg]]\n\n  \n\n### Cache size\n![[03 8.jpg]]\n\n\n**Cache size** <br>\n\n= Cache table size <br>\n\n= Num of cache block $\\times$ (valid bit length + tag length + block size(data length))\n\n  \n\n### Practice 1\n\n- 32-bit addresses\n\n- Num of cache blocks: $2^{10}$ blocks\n\n- Block size: $2^0$ words ($2^2$ bytes)\n\n  \n\n**Cache size**<br>\n\n= $2^{10} \\times (1 + (32 - (10 + 0 + 2)) + 32)$ <br>\n\n= $2^{10} \\times 53$ bits\n\n<br><br>\n\n  \n\n### Practice 2\n\n- 32-bit addresses\n\n- Num of cache blocks: 64 blocks\n\n- Block size: 4 words\n\n  \n\n**Cache size**<br>\n\n= $2^{6} \\times (1 + (32 - (6 + 2 + 2)) + 128)$ <br>\n\n= $2^{6} \\times 151$ bits\n\n<br>\n\n  \n\n## More about\n\n- If we increase the size of blocks, this may help reduce miss rate due to spatial locality\n\n- But, Larger blocks -> a smaller number of cache blocks -> more competition -> increased miss rate\n\n- Increased miss penalty (the time for copying from lower level)\n\n<br>\n\n  \n\n## Handling cache misses\n\nOn cache hit, CPU proceeds normally. (requiring 1 clock cycle<br>\n\nBut, on cache miss, the control unit of the CPU\n\n- **Step 1: stalls the CPU pipeline**\n\n- **Step 2: copies a block from the next level of hierarchy (e.g., memory)**\n\n- **Step 3: does the stalled task**\n\n    - Restarts instruction fetch (IF stage) <br> if the cache miss happened when fetching an instruction from the instruction memory\n\n    - Completes data access (MEM stage) <br> if the cache miss happened when loading data from the data memory\n\n<br>\n\n  \n\n### Handling writes\n\nWhen will the newly-updated data in the cache be written to the lower-level memory (e.g., main memory)\n\n- **Write-through**: Update both cache and lower-level memory at the same time\n\n- **Write-back**: Just update cache\n\n    - Keep track of which block is dirty (used)\n\n    - When a dirty block is replaced, write it back to the lower-level memory\n\n|               | Pros                                                                        | Cons                                                                               |\n| ------------- | --------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- |\n| Write-through | - Consistency between cache and memory is guaranteed<br>- Easy to implement | - Slow write speed                                                                 |\n| Write-back    | - Fast write speed<br>(if there is no replacement)                          | - Consistency between cache and memory is not guaranteed<br>- Complex to implement |\n\n<br>\n\n  \n\n#### Write-through with write buffer\n\nTo reduce the delay of write operations on the write-through method, <br>we can use a write-buffer (much faster to access than memory)\n\n- A write buffer folds data waiting to be written to lower-level memory\n\n    - **Step 1: Update both cache and write buffer**\n\n    - **Step 2: The processor continues the program execution without waiting**\n\n        - The memory takes the updated data from the write buffer\n\n- If the buffer is full, the processor must stall until there is an empty position <br>\n\nThe write buffer can be also used to improve the performance of write-back\n\n- If all the blocks in cache are dirty\n\n<Br>\n\n  \n  \n\n### Handling write misses\n\nIf there is no requested block in the cache, it causes write misses\n\n- **Write-allocate**\n\n    - First, fetch the block to cache\n\n    - And then, handle the write operation\n\n- **Write around**\n\n    - Just update the portion of the block in lower-level memory, but not put it in cache\n\n    - It is good when we need to initialize memory space\n\n<br>\n\n  \n  \n\n## Real-world example\n\nEmbedded MIPS processor with 12-stage pipeline\n\n- Split cache: **I-cache** (for instructions) and **D-cache** (for data)\n\n- Each 16KB: 256 blocks $\\times$ 16 words per block\n\n![[04 6.jpg]]\n\n<br>\n\n  \n\n## Cache performance\n\nCPU time = clock cycle $\\times$ clock period <br>\n\n= (CPU execution clock cycles + memory-stall clock cycles) $\\times$ clock period\n\n- **CPU execution clock cycles**\n\n    - The clock cycles that CPU spends executing the program\n\n    - Cache hit time is included\n\n- **Memory-stall clock cycles**\n\n    - The clock cycles that CPU spends waiting for the memory access\n\n    - Mainly from cache misses\n\n<br>\n\n  \n\n### Memory-stall clock cycles\n\nSimplifying assumption: the read and write miss penalties are the same <br>\n\n  \n  \n\n**Num of memory accesses $\\times$ Miss rate $\\times$ Miss penalty** <br>\n\n= Num of misses $\\times$ Miss penalty<br>\n\n  \n\n**In MIPS, we have two different cache (instruction (I-cache) and data (D-cache))**<br>\n\nNum of memory accesses $\\times$ Miss rate $\\times$ Miss penalty<br>\n\n= Num of **instruction memory** access $\\times$ **I-cache** miss rate $\\times$ **I-cache** miss penalty<br>\n\n$+$ Num of **data memory** access $\\times$ **D-cache** miss rate $\\times$ **D-cache** miss penalty\n\n<br>\n\n  \n\n### Practice 1\n\n- Base CPI (on cache hit) = 2\n\n- Instruction-cache miss rate = 2%\n\n- Data-cache miss rate = 4%\n\n- Miss penalty = 100 cycles\n\n- Load & stores are 36% of instructions\n\n<br>\n\n  \n\n**Miss-stall clock cycles (when there are I instructions)**\n\n- For instructions: I $\\times$ 0.02 $\\times$ 100 = 2 $\\times$ I\n\n- For data: I $\\times$ 0.36 $\\times$ 0.04 $\\times$ 100 = 1.44 $\\times$ I\n\n<br>\n\n  \n\n**CPU time**\n\n- Actual CPU time: (2 $\\times$ I + 2 $\\times$ I + 1.44 $\\times$ I) $\\times$ clock period = 5.44 $\\times$ I $\\times$ clock period\n\n- Ideal CPU time: (no cache misses = perfect cache): 2 $\\times$ I $\\times$ clock period\n\n<br>\n\n  \n  \n\n$$\n\n\\frac{Ideal\\;performance}{Actual\\;performance} = \\frac{Actual\\;CPU\\;time}{Ideal\\;CPU\\;time} = \\frac{I \\times actual\\;CPI \\times clock\\;period}{I \\times ideal\\;CPI \\times clock\\;period} \\\\ = \\frac{Actual\\;CPI}{Ideal\\;CPI} = \\frac{5.44}{2}\n\n$$\n\n<center>\n\n<strong>\n\n    \"The performance with the perfect cache is better by 2.72\"\n\n</strong>\n\n</center>\n\n<br>\n\n  \n\n### Practice 2\n\nSuppose the processor is made faster, but the memory system is not\n\n- Base CPI (on cache hit) = **2 -> 1**\n\n- Instruction-cache miss rate = 2%\n\n- Data-cache miss rate = 4%\n\n- Miss penalty = 100 cycles\n\n- Load & stores are 36% of instructions\n\n\n|             | Memory-stall clock cycle    | Memory-stall CPI |\n| ----------- | --------------------------- | ---------------- |\n| For I-cache | 2 $\\times$ I                | 2                |\n| For D-cache | 1.44 $\\times$ I             | 1.44             |\n|             | CPU time                    | CPI              |\n| Actual      | 4.44 $\\times$ I $\\times$ CP | 4.44             |\n| Ideal       | 1 $\\times$ I $\\times$ CP    | 1                |\n\n  \n\n<center>\n\n<strong>\n\n    \"The performance with the perfect cache is better by 4.44\"\n\n</strong>\n\n</center>\n\n  \n\n<center>\n\n<strong>\n\n    But the gap between actual and ideal case is same as 3.44\n\n</strong>\n\n</center>"},{"excerpt":"contents: 0-1. CA Intro Code scheduling There are three types of critical dependencies Read after write Write after read Write after write If two instructions have one of the above dependencies, the …","fields":{"slug":"/4-6. Exceptions/"},"frontmatter":{"date":"2024년 08월 20일 12:08","title":"Exceptions","tags":["컴퓨터구조","study"]},"rawMarkdownBody":"contents: [[0-1. CA Intro]]\n\n## Code scheduling\n\nThere are three types of critical dependencies\n\n- Read after write\n\n- Write after read\n\n- Write after write\n\nIf two instructions have one of the above dependencies,<br>\n\n**the execution order these two instructions must be maintained**\n\n  \n\n## Exceptions\n\n### Exceptions VS Interrupts in MIPS\n\n- Exception: arises within the CPU (internally)\n\n- Interrupt: from an external I/O controller (externally)\n\n| Type of event                  | From where | MIPS terminology       |\n| ------------------------------ | ---------- | ---------------------- |\n| I/O device reques              | External   | Interrupt              |\n| Invoke OS from a user program  | Internal   | Exception              |\n| Arithmetic overflow            | Exception  | Exception              |\n| Using an undefined instruction | Internal   | Exception              |\n| HW malfunctions                | Either     | Exception or interrupt |\n\n\n<br>\n\n  \n\n### How to handle\n\n- Step 1: Save the address of the offending instruction in the EPC (Exception Program Counter)\n\n    - EPC is a 32-bit register\n\n- Step 2: Save the reason for the exception in the Cause register\n\n    - Cause is a 32-bit register (some bits are unused)\n\n- Step 3: Jump to the exception handler corresponds to the cause\n\n    - The handler address for undefined opcode: $8000\\;0000_{hex}$\n\n    - Overflow: $8000\\;0180_{hex}$\n\n    - But sometimes without saving the reason for the exception, it jumps to the exception handler\n\n- Step 4: Do actions\n\n    - Read the cause and determine the action required\n\n    - If recoverable, take a corrective action and use EPC to return to a program\n\n    - Otherwise, terminate the program and report error using EPC, cause, ...\n![[01 9.jpg]]\n\n<br>\n\n  \n\n### Exceptions according to the stage\n\nExceptions can occur in any stage (except WB)\n\n- IF: Invalid memory access (memory fault)\n\n    - e.g., when PC holds an invalid memory address value\n\n- ID: Undefined instruction\n\n    - e.g., `abc $t0, $t1, $t2`\n\n- EX: Overflow\n\n    - e.g., when we use add, addi, and sub instructions\n\n- MEM: Invalid memory access (memory fault)\n\n    - e.g., when a computed target memory address is abnormal\n\nRegardless of the stage, the cause of exceptions is stored in the Cause register<br>\n\nThen, guess which instruction caused the exception based on the cause\n\n<br>\n\n  \n\n### Multiple exceptions\n\nMultiple instructions are executed in different stages at the same time, which means multiple exceptions can occur in the same clock cycle.\n\n#### How to prioritize multiple exceptions?\n\n- In MIPS, earliest instruction first\n\n- Flush subsequent instructions"},{"excerpt":"contents: 0-1. CA Intro Pipelined datapath We need registers between stages to hold information produced in previous stage and make isolation\n Data hazards When an instruction depends on the completi…","fields":{"slug":"/4-5. Handling hazards/"},"frontmatter":{"date":"2024년 08월 19일 12:08","title":"Handling hazards","tags":["컴퓨터구조","study"]},"rawMarkdownBody":"contents: [[0-1. CA Intro]]\n\n## Pipelined datapath\n\nWe need registers between stages **to hold information produced in previous stage and make isolation**\n![[01 8.jpg]]\n\n  \n\n## Data hazards\n\nWhen an instruction depends on the completion of data access by a previous instruction, it causes data hazards.\n![[07 2.jpg]]\n\n  \n\n### How to detect & when to forward\n\n- **Step 1: Pass register numbers along pipeline**\n\n    - if I-format or branch instruction, Rd is invalid value\n\n- **Step 2: Check the following data hazard conditions**\n\n    - `EX/MEM.RegisterRd == ID/EX.RegisterRs`\n\n    - `EX/MEM.RegisterRd == ID/EX.RegisterRt`\n\n    - `MEM/WB.RegisterRd == ID/EX.RegisterRs`\n\n    - `MEM/WB.RegisterRd == ID/EX.RegisterRt`\n\n- **Step 3: If there is a data hazard, then do forwarding**\n\n    - But only if the forwarding instruction writes to a register\n\n        - Check the RegWrite signal in `EX/MEM.RegWrite` and `MEM/WB.RegWrite` is `1`\n\n    - And only if Rd for the forwarding instruction is not `$zero`\n\n        - `$zero` cannot be overwritten\n\n        - `EX/MEM.RegisterRd != 0`\n\n        - `MEM/WB.RegisterRd != 0`\n\n<br>\n\n  \n\n### How to process\n![[02 9.jpg]]\n\n  \n\n- **EX hazards**\n\n    - If (`EX/MEM.RegWrite == 1 && EX/MEM.RegisterRd != 0 && EX/MEM.RegisterRd == ID/EX.RegisterRs`) <Br>**ForwardA = 10**\n\n    - If (`EX/MEM.RegWrite == 1 && EX/MEM.RegisterRd != 0 && EX/MEM.RegisterRd == ID/EX.RegisterRt`) <Br>**ForwardB = 10**\n\n- **MEM hazard**\n\n    - If (`EX/MEM.RegWrite == 1 && EX/MEM.RegisterRd != 0 && MEM/WB.RegisterRd == ID/EX.RegisterRs`) <Br>**ForwardA = 01**\n\n    - If (`EX/MEM.RegWrite == 1 && EX/MEM.RegisterRd != 0 && MEM/WB.RegisterRd == ID/EX.RegisterRt`) <Br>**ForwardB = 01**\n\n- **Both EX & MEM hazards**\n\n    - Use the most recent result **(the result in EX/MEM)**\n\n<br>\n\n  \n\n### Practice\n![[03 7.jpg]]\n![[04 5.jpg]]\n\n<br>\n\n  \n\n## Load-use data hazards\n\nBut, sometimes, we cannot avoid stalls by forwarding<br>\n\nWe need to stall for one cycle when we have to forward the data from MEM/WB registers to ALU stage\n![[08 1.jpg]]\n\n  \n\n### How to detect & when to forward\n\n- **Step 1: Check the following condition**\n\n    - `ID/EX.MemRead == 1 &&` <br>`(ID/EX.RegisterRt == IF/ID.RegisterRs || ID/EX.RegisterRt == IF/ID.RegisterRt)`\n\n- **Step 2: If detect, stall**\n\n    - Prevent PC and IF/ID from changing<br>the same instruction is executed in IF & ID stages\n\n    - Insert `nop` in the EX stage by setting the control signals in ID/EX register to 0\n\n    - `PCWrite = 0`, `IF/IDWrite = 0` (if no load-use data hazards, they are 1)\n\n  \n\n### Practice\n![[05 5.jpg]]\n![[06 3.jpg]]\n\n  \n\n### Code scheduling\n\nReorder code to avoid the load-use data hazards (done by compiler)\n\n#### Algorithm\n\n- Check the existence of load hazards\n\n    - A load hazard occurs when the destination register of a load instruction is used as a source register of its next instruction\n\n- If exists, check whether there is a code that can ve executed after the load instruction\n\n    - This reordering must not change the result of the program, while solving hazard\n\n    - We must consider the instruction dependencies\n\n<br>\n\n  \n\n## Control hazards\n\nIf branch outcome is determined in a MEM stage, there will be three pipeline bubbles\n![[09 2.jpg]]\n\n  \n\n### How to process\n\n- **Simple solution: static branch prediction**\n\n    - Predict that the branch will not be taken (just the next instruction will be executed)\n\n    - If the prediction is correct, there will be no pipeline stall\n\n    - If the prediction is incorrect, flush 3 instructions and insert 3 pipeline bubbles\n\n- **Improving by early comparison in ID stage**\n\n    - Use same prediction\n\n    - If the prediction is correct, there will be no pipeline stall\n\n    - If the prediction is incorrect, flush 1 instruction and insert 1 pipeline bubble\n\n- **Dynamic branch prediction**\n\n    - History-based prediction with BPT(branch prediction table), store a recent branch decision (taken / not taken)\n\n    - Indexed by branch instruction addresses\n\n<br>\n\n  \n\n### Dynamic branch prediction\n\nMake a better branch prediction in a way to reduce the number of misprediction\n\n- Step 1: access a branch prediction table by using the instruction address\n\n- Step 2: Check the prediction value in the table and fetch the next (not taken) or target branch instruction (taken)\n\n- Step 3: If the prediction is wrong, flush pipeline and flip prediction\n\n  \n\n#### 2-bit predictor\n\nOnly change prediction on two successive mispredictions\n![[10.jpg]]\n\n  \n\n#### Branch target buffer\n\nStill, we should experience 1 pipeline stall to compute the target address for a taken branch\n\n- Cache of target address\n\n- Indexed by the address of branch instructions\n\n- When a branch instruction is fetched and its prediction is \"taken\", <br>then check the branch target buffer\n\n    - If there is a target address, fetch the target immediately"},{"excerpt":"contents: 0-1. CA Intro Because the longest delay determines clock period, a single-cycle implementation is not used today  It violates \"make the common case fast\" Pipelining overview With the pipeli…","fields":{"slug":"/4-4. Pipelining overview/"},"frontmatter":{"date":"2024년 08월 18일 12:08","title":"Pipelining overview","tags":["컴퓨터구조","study"]},"rawMarkdownBody":"contents: [[0-1. CA Intro]]\n\nBecause the longest delay determines clock period, a single-cycle implementation is not used today <br>\n\nIt violates **\"make the common case fast\"**\n\n  \n\n## Pipelining overview\n\nWith the pipelined approach, the speed up can be equal to the number of stages in an ideal case\n\n- A single task is divided into N stages\n\n- Each stage takes teh same amount of time T\n\n- There are M tasks, where M is large enough\n\n  \n\nTo complete all the tasks\n\n- In non-pipelined approach, we need $N \\times M \\times T$ times\n\n- In pipelined approach, we need $(N + M - 1) \\times T \\approx M \\times T$ time\n\n  \n\n$$\n\nTime\\;between\\;tasks_{pipelined} = \\frac{Time\\;between\\;tasks_{non-pipelined}}{Number\\;of\\;pipeline\\;stages}\n\n$$\n\n<br>\n\n  \n\n### Stage in pipeline\n\nFor different stages, different resources are used.\n\n- Stage 1: IF (Fetching an instruction from memory)\n\n- Stage 2: ID (Decoding the instruction and read registers)\n\n- Stage 3: EX (Executing operation or calculating address)\n\n- Stage 4: MEM (Accessing data in data memory)\n\n- Stage 5: wB (Writing the result back into a register)\n\n<br>\n\n  \n\n### Compared to the single-cycle processor\n\nCompared to the single cycle processor, **clock period in pipelined processor is determined by the longest stage time.**\n![[01 7.jpg]]\n\n\n  \n\n<br>\n\n  \n\n$$\n\nTime\\;between\\;instructions_{pipelined}= the\\;longest\\;stage\\;time \\times (the\\;number\\;of\\;instructions + the\\;number\\;of\\;stages - 1)\n\n$$\n\n  \n\n**If there are a lot of instructions to be executed,**\n\n$$\n\nTime\\;between\\;instructions_{pipelined} = \\frac{Time\\;between\\;instructions_{non-pipelined}}{\\frac{the\\;longest\\;instruction\\;time}{the\\;longest\\;stage\\;time}}\n\n$$\n\n<br>\n\n  \n\n## Hazards in Pipelining\n\n- Structural hazards\n\n    - When a required resources is busy\n\n- Data hazards\n\n    - When we need to wait for previous instruction to complete its data read/write operation\n\n- Control hazards\n\n    - When we need to make a control decision differently depending on the previous instruction\n\n<br>\n\n  \n\n### Structural hazards\n\nWhen a required resource is already used for executing an other instruction\n\n- IF and MEM stages can request to use the same resource at the same time\n\n- it is required to separate instruction / data memories\n\n    - IF and MEM stages use different part of memory (instruction memory, data memory)\n![[02 8.jpg]]\n\n<br>\n\n  \n\n### Data hazards\n\nWhen an instruction depends on the completion of data access by a previous instruction\n![[03 6.jpg]]\n\n  \n\nSolution: **Forwarding** <br>\n\nInstead of waiting for the target date to be stored in a register,<br>\n\nforward the data as soon as possible with extra connections\n![[04 4.jpg]]\n\n\n  \n\n#### Load-use data hazards\n\nBut, sometimes, we cannot avoid stalls by forwarding\n![[05 4.jpg]]\n\n\n  \n\nSolution: **code scheduling**<br>\n\nReorder code to avoid the load-use data hazards (done by compiler)\n![[06 2.jpg]]\nbefore\n<br>![[07 1.jpg]]\nafter\n\n\n  \n\n<br>\n\n  \n\n### Control hazards\n\nHazards with branch instructions <br>\n\nWe should wait until branch outcome is determined before fetching the next instruction\n![[08.jpg]]\n\n  \n\nSolution: **Compare registers and compute target early in the pipeline**\n\n- Especially, by adding hardware to do it in **ID stage**\n\n- But, still there is **one** pipeline bubble\n\n![[09.jpg]]\n  \n\nSolution: **branch prediction**\n\nWith additional HW for early comparison and computation in ID stage\n\n- just fetch instruction with no bubble\n\n    - if prediction correct: keep going\n\n    - if prediction incorrect: cancel the process & add bubble\n\n<br>\n\n  \n\n## Summary\n\n**Pipelining improves performance by increasing instruction throughput**\n\n- Executes multiple instructions in parallel\n\n- The execution time of each instruction is not affected\n\n  \n\n**Pipeline hazards**\n\n- Structural hazards\n\n    - Solution: separate data / instruction memories\n\n- (Load-use) Data hazards\n\n    - Solution: forwarding + code scheduling\n\n- Control hazards\n\n    - Solution: early comparison & computation + branch prediction"},{"excerpt":"contents: 0-1. CA Intro Single-cyle datapath \n  A single-cycle datapath executes instructions in one clock cycle with a clocking methodology.  We will study how this works according to instructions R…","fields":{"slug":"/4-3. A single-cycle datapath/"},"frontmatter":{"date":"2024년 08월 17일 12:08","title":"A single-cycle datapath","tags":["컴퓨터구조","study"]},"rawMarkdownBody":"contents: [[0-1. CA Intro]]\n\n## Single-cyle datapath\n![[01 6.jpg]]\n</br>\n\n![[02 6.jpg]]\n\n</br>\n\nA single-cycle datapath executes instructions in one clock cycle with a clocking methodology. </br>\n\nWe will study how this works according to instructions\n\n  \n\n### R-format\n\n![[02 7.jpg]]\n\n- don't need to access memory\n\n    - `MemRead` = 0\n\n    - `MemtoReg` = 0\n\n    - `MemWrite` = 0\n\n- have to update value of `rd` register\n\n    - `RegDst` = 1\n\n    - `RegWrite` = 1\n\n- PC just have to be updated +4\n\n    - `branch` = 0\n\n- ALU control determines the arithmetic type according to `ALUOp` and `func code` of instruction\n\n</br>\n\n  \n\n### Load\n\n![[03 5.jpg]]\n  \n\n- need to access memory and read data\n\n    - `MemRead` = 1\n\n    - `MemtoReg` = 1\n\n    - `MemWrite` = 0\n\n- have to get value from memory to `rs` field (destination)\n\n    - `RegDst` = 0 (`rs` to destination)\n\n    - `RegWrite` = 1\n\n- PC just have to be updated +4\n\n    - `branch` = 0\n\n- ALU control determines the arithmetic type according to `ALUOp`\n\n- offset is extended from 16-bit to 32-bit by Sign-extend unit and added with Read data 1 (base addr)\n\n</br>\n\n  \n\n### Branch-on-equal\n\n![[04 3.jpg]]\n\n  \n\n- don't need to access memory\n\n    - `MemRead` = 0\n\n    - `MemtoReg` = 0\n\n    - `MemWrite` = 0\n\n- Calculate target address\n\n    - extend the offset to 32 bit and shift left twice (multiply 4)\n\n    - add with `PC + 4`\n\n- `RegDst` doesn't matter\n\n</br>\n\n  \n\n### More about: jump\n![[05 3.jpg]]\n\n  \n\n- Calculate target address\n\n    - offset is extended to 28-bit\n\n    - concatenate with `0000`\n\n- `Jump signal = 1`"},{"excerpt":"contents: 0-1. CA Intro Controlling a datapath main control Control signals are derived from given instructions\n  is always being read  is being read except when the instruction is .     - It is for …","fields":{"slug":"/4-2. Controlling a datapath/"},"frontmatter":{"date":"2024년 08월 16일 12:08","title":"Controlling a datapath","tags":["컴퓨터구조","study"]},"rawMarkdownBody":"contents: [[0-1. CA Intro]]\n\n## Controlling a datapath\n\n### main control\n\nControl signals are derived from given instructions\n![[01 5.jpg]]\n\n\n  \n\n- `rs` is always being read\n\n- `rt` is being read except when the instruction is `lw`.\n\n    - It is for loading\n\n  \n![[02 5.jpg]]\n\n\n  \n\n### ALU control\n\n- Load / store instructions: add\n\n- Branch instructions: subtract\n\n- R-format instructions: depends on a function field in the instructions\n\n  \n![[03 4.jpg]]\n  \n\n- Main Control Unit determines the `ALUOp` value\n\n- Whatever the `funct` codes are, if the opcode is `lw`, `sw`, or `beq`, ALU fuction is determined automatically"},{"excerpt":"contents: 0-1. CA Intro Case I will focus on handling a subset of core MIPS instructions (MIPS subset) The arithmetic-logical instructions: , , , ,  The memory-reference instructions: ,  The conditio…","fields":{"slug":"/4-1. Processor Overview/"},"frontmatter":{"date":"2024년 08월 15일 12:08","title":"Processor Overview","tags":["컴퓨터구조","study"]},"rawMarkdownBody":"contents: [[0-1. CA Intro]]\n\n## Case\n\nI will focus on handling a subset of core MIPS instructions (MIPS subset)\n\n- The arithmetic-logical instructions: `add`, `sub`, `and`, `or`, `slt`\n\n- The memory-reference instructions: `lw`, `sw`\n\n- The conditional instructions: `beq`, `jump`\n\n  \n\n## Logic design basics\n\nIn the MIPS implementation, the datapath elements consist of\n\n- **Combinational** elements\n\n    - Operate on data values\n\n    - Given inputs, a combinational element produces outputs\n\n    - e.g., ALU(Arithmetic Logic Unit), Adder, Multiplexer, AND-gate\n\n- **State (sequential)** elements\n\n    - Contain state\n\n    - They have some internal storage\n\n    - e.g., instruction and data memory, registers\n\n</br>\n\n  \n\nCombinational elements work with state elements\n\n- Getting inputs from state elements\n\n- Giving outputs to state elements\n\n  \n\n## Clocking methodology\n\nWhen data can be read and written is determined relative to the clock </br>\n\nIn this book, we assume **\"Positive edge-triggered clocking methodology\"**\n\n  \n\nCombinational elements works with state elements </br>\n\n**In a single clock cycle = between clock edges = between rising edges**\n\n- At one rising edge, combinational elements read inputs from state elements\n\n- Before the next rising edge, combinational elements complete operations and produce outputs\n\n- At the next rising edge, state elements are updated with the outputs\n\n- **The longest delay determines clock period**\n![[01 4.jpg]]\n\n\n</br>\n\n  \n\n### State elements with two inputs\n\n**State elements (e.g., registers) take two inputs: update data and a clock signal** </br>\n\nBased on the clock signal, it is determined when to update the data\n\n  \n\nIn positive edge-triggered clocking methodology, </br>\n\nUpdate the data at rising edges (when the clock signal changes from 0 to 1)\n![[02 4.jpg]]\n</br>\n\n  \n\n### State elements with three inputs\n\n**State elements take three inputs: update data and a clock signal with write control** </br>\n\nBased on the clock signal and the write control, it is determined when to update the data\n\n  \n\nIn positive edge-triggered clocking methodology, </br>\n\nUpdate the data at rising edges + **when the write control input is 1**\n\n![[03 3.jpg]]"},{"excerpt":"contents: 0-1. CA Intro Division If the length of Dividend and Divisor is M and N,  the length of Quotient  M - N + 1 & the length of Remainder  N In MIPS-based computers, 32 bits are used to represe…","fields":{"slug":"/3-3. Division/"},"frontmatter":{"date":"2024년 08월 14일 14:08","title":"Division","tags":["study","컴퓨터구조"]},"rawMarkdownBody":"contents: [[0-1. CA Intro]]\n\n## Division\n\nIf the length of Dividend and Divisor is **M** and **N**, </br>\n\nthe length of Quotient $\\leqq$ M - N + 1 & the length of Remainder $ \\leqq$ N\n\n- In MIPS-based computers, 32 bits are used to represent both Dividend and Divisor. </br>Therefore, the length of both Quotient and Remainder $\\leqq$ 32\n\n</br>\n\n  \n\n### Optimized version of the division HW\n\n- 32-bit divisor register / ALU\n\n- 64-bit remainder register (dividend and quotient shares a register with remainder)\n\n    - `HI`: Remainder\n\n    - `LO`: Quotient\n![[01 3.jpg]]\n\n\n</br>\n\n  \n\n### Settings\n\n- 0 is stored in the left half of the Remainder register\n\n- The value of dividend is loaded into the right half of the Remainder register\n\n- The value of divisor is loaded into the Divisor register\n\n</br>\n\n  \n\n### Division Algorithm\n![[02 3.jpg]]\n\n\n</br>\n\n  \n\n#### Example\n\nWhen N = 4 (4-bit ALU / divisor, 8-bit product), $7 \\div 3$\n\n- should be **repeated as many bits + 1 as it is**\n![[03 2.jpg]]\n\n</br>\n\n  \n\n### Signed division\n\nDo division after converting both divisor & dividend to positives </br>\n\nAfter the division\n\n- Negate the quotient only if the signs of the divisor and dividend are different\n\n- Remainder's sign follows Dividend's sign\n\n</br>\n\n  \n\n### Instructions\n\n- `div rs, rt / divu rs, rt` : do `$rs` / `$st`\n\n    - The result (remainder and quotient) is stored in `HI` / `LO`\n\n    - No overflow or divide-by-0 checking\n![[04 2.jpg]]\n\n\n</br>\n\n  \n\n#### Example:\n\n- Initially, the value in `$t0` (dividend) is loaded into the `LO` register\n\n- Initially, `$t` (divisor) is used as the divisor register\n\n- Then, do the division and store the remainder and quotient to `HI` and `LO` registers\n\n  \n\n## Summary: Design for arithmetic operations\n\n### Addition & Subtraction\n\nUse the same HW for addition and subtraction\n\n- 32-bit parallel adder\n\n- Additional XOR operators + subtract bit\n![[05 2.jpg]]\n</br>\n\n  \n\n### Multiplication & Division\n\nUse the same optimized HW for Multiplication and Division\n\n- A single 32-bit register for multiplicand and divisor\n\n- A single 32-bit `ALU`\n\n- `HI` and `LO` registers for the results of multiplication and division\n![[06 1.jpg]]"},{"excerpt":"contents: 0-1. CA Intro Multiplication If a multiplicand and a multiplier have m and n digits, the product has at most m + n digits MIPS-based computers use 32-bit word for the arithmetic operations …","fields":{"slug":"/3-2. Multiplication/"},"frontmatter":{"date":"2024년 08월 14일 12:08","title":"Multiplication","tags":["컴퓨터구조","study"]},"rawMarkdownBody":"contents: [[0-1. CA Intro]]\n\n## Multiplication\n\nIf a multiplicand and a multiplier have **m** and **n** digits, the product has at most **m + n** digits\n\n- MIPS-based computers use **32-bit** word for the arithmetic operations\n\n- The product in MIPS-based computers has at most **64 digits**\n\n</br>\n\n  \n\n### Optimized version of the multiplication HW\n\n- 32-bit multiplicand register / ALU\n\n- 64-bit product register (multiplier shares a register with product)\n\n    - `HI`: most significant 32 bits\n\n    - `LO`: least significant 32 bits\n\n    - Actually, there is one more bit in the left of the product register to hold the carry out of the adder\n\n![[01 2.jpg]]\n\n</br>\n\n  \n\n### Settings\n\n- 0 is stored in the left half of the product register\n\n- The multiplier value is loaded into the right half of the product register\n\n- The multiplicand value is loaded into the multiplicand register\n\n</br>\n\n  \n\n### Multiplication Algorithm\n![[02 2.jpg]]\n\n  \n\n#### Example\n\nWhen N = 4 (4-bit ALU / multiplicand, 8-bit product), $2 \\times 3$\n\n- should be **repeated as many bits as it is**\n![[03 1.jpg]]\n\n  \n\n### Signed multiplication\n\nDo multiplication after converting both multiplicand & multiplier to positives\n\n- For 31 iterations (except a sign bit)\n\n- After the multiplication, negate the result (if it is required)\n\nBetter solution: Booth's Algorithm\n\n- Supports multiplication of two's complement signed numbers in a more efficient way\n\n- Requires almost same hardware with the multiplication of unsigned numbers\n\n</br>\n\n  \n\n### Instructions\n\n- `mult rs, rt / multu rs, rt` (rs: multiplicand, rt: multiplier)\n\n    - The result (product) is stored in `HI` / `LO`\n![[04 1.jpg]]\n\n\n- `mfhi rd / mflo rd`\n\n    - Move from `HI` / `LO` to rd\n![[05 1.jpg]]\n\n  \n\n#### Example: `mult $t0, $ t1`\n\n- `$t0` (multiplicand) is used as the Multiplicand register\n\n- Initially, the value in `$t1` (multiplier) is loaded into `LO` register\n\n- Then, do the multiplication and store the 64-bit product to `HI` and `LO` registers"},{"excerpt":"contents: 0-1. CA Intro Addition & Subtraction Addition: just do the binary addition with given numbers  Subtraction: do the binary addition with the negation of the second operand Half adder 1-bit a…","fields":{"slug":"/3-1. Addition and Subtraction/"},"frontmatter":{"date":"2024년 08월 13일 12:08","title":"Addition and Subtraction","tags":["study","컴퓨터구조"]},"rawMarkdownBody":"contents: [[0-1. CA Intro]]\n\n## Addition & Subtraction\n\n**Addition**: just do the binary addition with given numbers </br>\n\n**Subtraction**: do the binary addition with the negation of the second operand\n\n### Half adder\n\n1-bit adder without carry-input\n\n- Input: two one bit-data A, B\n\n- Output: sum(S), carry(C)\n\n  \n\n### Full adder\n\n1-bit adder with carry-input\n\n- Input: two one bit-data A, B, carry(C$_{in}$)\n\n- Output: sum(S), carry(C$_{out}$)\n\n  \n\n## Circuit design for addition and subtraction\n\n### N-bit parallel binary adder\n\n- Initial carry input is 0\n\n- The i-th adder waits for the carry until it is generated by the (i-1)-th adder\n![[01 1.jpg]]\n\n\n  \n\n### Adder with subtraction (in two's complement)\n\n- Subtract = 0 or 1 (if subtract == 1, B$_i$ is inverted)\n\n- Subtract is also added as the initial carry (if subtract ==1, 1 is added)\n![[02 1.jpg]]\n\n\n  \n\n## Overflow\n\nOverflow occurs when computation results are too large (out of range)\n\n  \n\n### When does it occur?\n\n- Add two positives or negatives + the sign of result is different with sources\n\n- Subtract a negative from a positive + the sign of result is 1\n\n- Subtract a positive from a negative + the sign of result is 0\n\n  \n\n### How to detect Overflow?\n\n- Use `add, addi, sub` instructions\n\n- They cause exceptions on overflow\n\n    - A program jumps to predefined exception handler address\n\n- e.g., Fortran does not allow overflows. So MIPS Fortran compilers always use `add, addi, sub`\n\n  \n\n### How to ignore Overflow?\n\n- Use `addu, addui, subu` instructions (u means unsigned)\n\n- They do not cause exceptions on overflow\n\n- e.g., C ignores overflows. So MIPS C compilers always use `addu, addui, subu`"},{"excerpt":"contents: 0-1. CA Intro MIPS memory allocation To avoid the overlap for managing memory, we use stack, heap, and static space. Stack During the procedure call, both registers and local variables are …","fields":{"slug":"/2-5. MIPS memory allocation & addressing/"},"frontmatter":{"date":"2024년 08월 08일 12:08","title":"MIPS memory allocation & addressing","tags":["컴퓨터구조","study"]},"rawMarkdownBody":"contents: [[0-1. CA Intro]]\n\n## MIPS memory allocation\n\nTo avoid the overlap for managing memory, we use stack, heap, and static space.\n\n  \n\n### Stack\n\nDuring the procedure call, both registers and local variables are stored on stack. </br>\n\nWe call the segment of the stack **activation record** or **procedure frame**\n\n- The frame pointer (`$fp`) points to the first word of the frame\n\n- During the execution of a procedure, `$fp` is stable. So, it is used to reference variables\n![[01.jpg]]\n\n  \n\n- **Activation record**\n\n    - managed in a stack from high address to low address\n\n  \n\n### Heap\n\n- **Dynamically-allocated data**\n\n    - managed in a heap from low addresses to high addresses\n\n  \n\n### Static space\n\n- **Global variables**\n\n    - assigned a fixed address\n\n    - statically allocated\n\n    - all reference to a global variable point to the same object\n\n    - it cannot be stored in an activation record\n\n  \n  \n\n### Code & Data in memory\n![[02.jpg]]\n\n  \n\nThese addresses are only a software convention, and not part of the MIPS architecture.\n\n- The stack pointer (`$sp`) is initialized to `7fff fffc`$_{hex}$ and grows down toward the data segment\n\n- At the other end, the program code starts at `0040 0000`$_{hex}$\n\n    - From `0000 0000`$_{hex}$ to `0040 0000`$_{hex}$ is just reserved\n\n- The static data starts at `1000 0000`$_{hex}$\n\n- The global pointer (`$gp`) is set to an address to make it easy to access data, and initialized to to `1000 8000`$_{hex}$ so that it can access fromm `1000 0000`$_{hex}$ to `1000 ffff`$_{hex}$ using the positive and negative 16-bit offsets from `$gp`\n\n- Dynamic data is grows up toward the stack in an area called heap\n\n\n\n  \n\n## Addressing mode\n\nAfter we decode instructions, we will perform corresponding tasks. </br>\n\nAt this time, we need to **access data or instructions which can be stored in instructions, registers or memory.**\n\n  \n\n### 1. Immediate addressing (with immediate operands)\n\n- by decoding instructions, we can get data **directly**\n\n- last 16 bits are used to represent data\n\n- the operand is 16 bits of the instructions\n\n- don't need to access other place\n![[03.jpg]]\n\n  \n\n#### Supporting 32-bit constants\n\nSometimes, we need to use a 32-bit constants\n\n- `lui` instruction\n\n    - transfers the 16 bit immediate constant field value into the leftmost 16 bits of the register\n\n    - fills the lower 16 bits with `0`s\n\n- `ori` instruction\n\n    - fills the lower 16 bits with given data\n\n</br>\n\n  \n\n### 2. Register addressing (with register operands)\n\n- use 5 bits to represent register number from 0 to 31\n\n    - because there are 32 registers\n\n- work like a pointer\n![[04.jpg]]\n\n</br>\n\n  \n\n### 3. Base addressing (with data transfer instructions)\n\n- `rs` points base address, and last 16 bits represent offset\n\n- 16 bits can represent from `-2`$^{15}$ to `2`$^{15}$`-1`\n\n    - `2`$^{15}$ = `8000`$_{hex}$\n\n    - `$gp` always points `1000 8000`$_{hex}$ which means that, with offset it can access every statically-allocated space\n\n![[05.jpg]]\n\n</br>\n\n  \n\n### 4. PC-relative addressing (with branch instructions)\n\n- there is no base address like data transfer instructions\n\n- Assumption: most branch targets are near from the current instruction\n\n- In HW implementation, `PC` is already incremented by 4 before computing the current instruction\n\n    - `PC` points next instructions\n\n- all instructions are stored in an address that is a multiple of 4.\n\n    - by alignment restrictions, it ends with last 2 bits `00`\n\n    - it increments by 4 which is `00`\n\n    - it always ends with `00`\n\n- to save space, MIPS does not store last 2 bits\n\n    - to calculate offset, we have to multiply by 4\n\n    - actually it can represent up to 18 bits\n\n    - 18 bits can represent from `PC-2`$^{17}$ to `PC+2`$^{17}$`-4`\n![[06.jpg]]\n\n\n</br>\n\n  \n\n### 5. Pseudo-direct addressing (with branch instructions)\n\n- if branch targets are far from the current instruction (over 16 bits)\n\n- last 26 bits are used to represent the address of label\n\n- skip last 2 bits like PC-relative addressing\n\n    - actually it can represent up to 28 bits\n\n- code is stored from `0040 0000`$_{hex}$ to `1000 0000`$_{hex}$\n\n    - `1000 0000`$_{hex}$ = `0001 0000 0000 0000 0000 0000 0000 0000`$_{2}$\n\n    - which means that we have to access up to `0000 1111 1111 1111 1111 1111 1111 1100`$_{2}$\n\n        - always start with `0000`$_{2}$ and end with `00`$_{2}$\n\n        - other 26 bits is important\n\n- So, with 26 bits we can represent up to 28 bits and concatenate `0000`$_{2}$ to the front\n\n![[07.jpg]]\n\n"},{"excerpt":"contents: 0-1. CA Intro Procedures Functions in a program Procedures do calling / returning with other procedures A procedure (caller) calls another procedure (callee) The callee returns values to ca…","fields":{"slug":"/2-4. Supporting procedures in computer HW/"},"frontmatter":{"date":"2024년 08월 07일 12:08","title":"Supporting procedures in computer HW","tags":["컴퓨터구조","study"]},"rawMarkdownBody":"contents: [[0-1. CA Intro]]\n\n## Procedures\n\n### Functions in a program\n\nProcedures do calling / returning with other procedures\n\n- A procedure (caller) calls another procedure (callee)\n\n- The callee returns values to caller\n\n  \n\n### Calling / returning process\n\n1. The caller passes input arguments and the return address to the callee\n\n2. The caller transfers control to the callee\n\n3. The callee performs its operations with the given input arguments\n\n4. The callee passes the return values to the caller\n\n5. The callee transfers control to the caller (Return to the given return address)\n\n6. The caller restores the saved things\n\n  \n\n### The way to pass values\n\nUse registers for passing arguments, return address, and return values\n![[register role.jpg]]\n\n\n  \n\nBut, what if different procedures share the same registers? \n**Use stacks to store all the information for operating each procedure** \nStacks are kept in memory\n- The register `$sp` points the top-of-stack in memory\n- By convention, stack grows towards lower addresses\n\n  \n\n### Register saving\nThe values of some registers must be preserved on call \nIt must be possible to recover the values on those registers after calling / returning is completed\n![[register role 2.jpg]]\n\n\nIf a callee uses preserved registers, the callee must\n- Save the values of the registers on its stack **after calling**\n- Restore the saved values **before returning**\n\nIf a caller needs to keep the values in non-preserved registers, the caller must\n- Save the values on its stack **before calling**\n- Restore the saved values **after returning**\n\n## Instructions for procedure calls\n\n**`jal PROCEDURE_LABEL`**\n- Jump And Link\n- The return address of a caller (the address of following instruction) put in `$ra`\n- Jump to the target address (`PROCEDURE_LABEL`)\n\n**`jr $ra`**\n- Jump Register\n- Jump to the address stored in `$ra` (other registers can also be used as an operand)\n\n\n**Push**\n<pre class=\"no-line-numbers language-bash\">\n\n<code class=\"prose-code:text-yellow-400\n\n            prose-code:text-sm\n\n            prose-code:font-normal\">addi $sp, $sp, -4\n\nsw $t0, 0($sp)\n\n</code></pre>\n\n- Push the data stored in `$t0` into the top-of-stack\n\n\n**Pop**\n<pre class=\"no-line-numbers language-bash\">\n\n<code class=\"prose-code:text-yellow-400\n\n            prose-code:text-sm\n\n            prose-code:font-normal\">lw $t0, 0($sp)\n\naddi $sp, $sp, 4\n\n</code></pre>\n\n- Pop the data stored in top-of-stack and store it to `$t0`"},{"excerpt":"contents: 0-1. CA Intro Common HW design for MIPS ISA  CPU, register, and memory Control unit (CU) directs the operation of the processor Arithmetic & logic unit (ALU) does the operation  hold the va…","fields":{"slug":"/2-3. Representing Instructions in computer/"},"frontmatter":{"date":"2024년 07월 31일 15:07","title":"Representing Instructions in computer","tags":["study","컴퓨터구조"]},"rawMarkdownBody":"contents: [[0-1. CA Intro]]\n\n## Common HW design for MIPS ISA\n![[HW design.jpg]]\n\n**CPU, register, and memory**\n- Control unit (CU) directs the operation of the processor\n- Arithmetic & logic unit (ALU) does the operation\n- `$0, ..., $31` hold the value that will be used in the operation (called general purpose register)\n- Program counter (PC) contains the memory address of the instruction will be executed\n- Instruction register (IR) contains the current instruction\n\n**Execution of the instruction**\n- Step 1 (fetch): CU says \"load the instruction from the memory address in PC to IR\"\n- Step 2 (decode): CU says \"the instruction stored in IR means `ADD $s0, $s1, $s2`\n- Step 2 (execute): ALU does the add operation with the values in `$s1` and `$s2` and stores the computation result in `$s0`\n## Operation\n### Arithmetic operations\n**Instructions for arithmetic**\n| Operation | C    | Java | MIPS assembly language | Example             |\n| --------- | ---- | ---- | ---------------------- | ------------------- |\n| Add       | +    | +    | `add` (R), `addi` (I)  | `add $t0, $t1, $t2` |\n| Subtract  | -    | -    | `sub` (R)              | `sub $t0, $t1, $t2` |\n\n### Logical operations\n**Instructions for bitwise manipulation**\n\n| Operation   | C   | Java | MIPS assembly language | Example             |\n| ----------- | --- | ---- | ---------------------- | ------------------- |\n| Bitwise AND | &   | &    | `and`(R), `andi`(I)    | `and $t0, $t1, $t2` |\n| Bitwise OR  | \\|  | \\|   | `or` (R), `ori`(I)     | `or $t0, $t1, $t2`  |\n| Bitwise NOR | ~   | ~    | `nor`(R)               | `nor $t0, $t1, $t2` |\n\n\nMIPS has no NOT instruction \nInstead, it has **NOR R-type** instruction\n- a NOR b == NOT (a OR b)\n- But, we can do the NOT operation with NOR: `nor $t0, $t1, $zero!`\n![[nor.jpg]]\n\n### Shift operations\n| Operation    | C     | Java  | MIPS assembly language | Example                              |\n| :----------- | :---- | :---- | :--------------------- | :----------------------------------- |\n| Shift left   | <<    | <<<   | `sll` (R)              | `sll $s1, $s2, 10 ($s1 = $s2 << 10)` |\n| Shift right  | >>    | >>>   | `srl` (R)              | `srl $s1, $s2, 10 ($s1 = $s2 >> 10)` |\n\n![[shift operation.jpg]]\n- shamt: how many positions to shift\n- Shift left/right logical (sll / srl)\n\t- Shift left/right and fill with 0 bits\n\t- (unsigned only) sll with i bits = multiply by $2^i$\n\t- (unsigned only) srl with i bits = divide by $2^i$\n\n\n### Conditional operations\n\n| Operation            | MIPS assembly language | Example                                           |\n| -------------------- | ---------------------- | ------------------------------------------------- |\n| Conditional branch   | `beq`(I)               | `beq $t0, $t1, LABEL` (if $t0 == $t1, goto LABEL) |\n|                      | `bne`(I)               | `bne $t0, $t1, LABEL` (if $t0 != $t1, goto LABEL) |\n| Unconditional branch | `j`(I)                 | `j LABEL` (goto LABEL)                            |\n\n\n![[bne.jpg]]\n![[j-format.jpg]]\n\n**Instructions for making decisions** \nUsually combined with goto statements and labels \nthere are no branch instructions like blt (less than) and bge (greater than or equal to)\n\n\n**Why?** \n- Handling <, >, <=, >=, ... is slower and more complicate than =, !=\n- It will cause increase of instruction count and clock period or CPI\n\n**Instead, MIPS provides others** \n\n| operation        | MIPS assembly language | Example                                                    |\n| ---------------- | ---------------------- | ---------------------------------------------------------- |\n| Set on less than | slt(R), slti(I)        | slt $t0, $t1, $t2 (if $t1 < $t2, $t0 = 1; else $t0 = 0) |\n\n\n**slt is used in combination with beq and bne**\n```\nslt $t0, $t1, $t2\nbne $t0, $zero, LABEL\nbeq $t0, $zero, LABEL\n```"},{"excerpt":"contents: 0-1. CA Intro The assembly language that has been studied so far is not a form that the processor can understand. Therefore, we need to encode instructions and data in well-formed binary. D…","fields":{"slug":"/2-2. Design principles 4 of MIPS ISA/"},"frontmatter":{"date":"2024년 07월 31일 15:07","title":"Design principles 4 of MIPS ISA","tags":["study","컴퓨터구조"]},"rawMarkdownBody":"contents: [[0-1. CA Intro]]\n\nThe assembly language that has been studied so far is not a form that the processor can understand. \n\nTherefore, we need to **encode instructions and data in well-formed binary.**\n\n## Data representation\n\n### numbers\n- Numbers are kept in computer hardware as a series of 1 and 0\n- They are considered base 2 numbers (binary numbers)\n- Binary numbers are stored in words\n- In MIPS, the words are 34 bits (4 bytes) long + MIPS is big endian\n### unsigned numbers\n- By using n bits, we can represent unsigned numbers from 0 to $2^n-1$\n### signed numbers\n#### Signed Magnitude\n- first bit determines mathematical symbols\n\t- 0 is plus (+)\n\t- 1 is minus (-)\n- others are bit size\n- but, 000 = 100 = 0\n#### One's complement\n- first bit determines mathematical symbols\n\t- 0 is plus (+)\n\t- 1 is minus (-)\n- if first bit is 0\n\t- read it as it is\n- if first bit is 1\n\t- flip 1 to 0, 0 to 1\n- ex) 100 = -3\n- but, 000 = 111 = 0\n#### Two's complement\n- first bit determines mathematical symbols\n\t- 0 is plus (+)\n\t- 1 is minus (-)\n- if first bit is 0\n\t- read it as it is\n- if first bit is 1\n\t- flip 1 to 0, 0 to 1\n\t- plus 1\n- ex) 100 = -4\n- the number of zero is 1\n### Answer\n**two's complement**  \n- we can get the computation result by just doing given arithmetic operations\n    - 000 - 001 = 111 ( 0 - 1 = -1)\n    - 010 + 111 = 001 (2 + (-1) = 1)\n- the number of zero is only 1.\n- by using n bits, we can represent signed numbers from $-2^{n-1}$ to $2^{n-1}-1$\n#### Signed extension\nSometimes, we need to represent n-bit numbers by using more than n bits\n- 16-bit immediate should be converted to 32 bits for arithmetic\n- Instructions `lb/lh` loads byte/halfword from memory space and store it into 32-bit registers\n- Replicate the sign bit to the left\n  ![[signed extension.jpg]]\n## Instruction representation\n**Like data, instructions are also encoded/represented in binary**\nWe call the encoded instructions as **machine instructions**\n\nFor representing instructions, ISA defines instruction format\nIssue: to represent all kinds of instructions, we might need many instrucion formants\n## Design principle 4\n### Good design demands good compromise\nBased on this, MIPS keeps formats as similar as possible (regularity)\n### R-format\nFor the instructions that use only Register operands\n![[r-format.jpg]]\n- `op` (opcode): basic operation of the instruction (what the instruction does)\n- `rs`: the first source register operand\n- `rt`: the second source register operand\n- `rd`: the destination register operand\n- `shamt`: shift amount (used for shift operations)\n- `funct`: function code (the specific variant of the operation)\n>Q. why are the rs, rt, rd 5 bits? \n>\n>A. registers are 32, which means 5 bits are enough to express each register\n\n### I-format\nFor the instructions that use Immediate operands\n![[i-format.jpg]]\n- `op` (opcode): basic operation of the instruction (what the instruction does)\n- `rs`: the first source register operand\n- `rt`: the second source register operand\n- `Constant or address`\n## Summary\nKey underlying design principles\n### Design Principle 1\n#### Simplicity favors regularity\nAll MIPS arithmetic instructions include a single operation & three operands\n- Lower clock period or CPI\n\n## Design Principle 2\n#### Smaller is faster\nOperands of MIPS arithmetic instructions must be chosen in a small number of registers.\nMIPS keeps more complex data in memory and supports data transfer between memory and registers.\n- Lower clock period or CPI\n### Design Principle 3\n#### Make the common case fast\nSupport 16-bit immediate operands for handling small constants + `$zero`\n- Lower Instruction count\n### Design Principle 4\n#### Good design demands goog compromise\nKeep all instructions the same length + keep instruction formats similar as possible. \nData (numbers) are also represented in binary based on two's complement rules.\n- Lower clock period or CPI"},{"excerpt":"contents: 0-1. CA Intro MIPS ISA What is MIPS ISA Microprocessor without Interlocked Pipelined Stages A kind of ISA Design principles Simplicity favors regularity Smaller is faster Make the common ca…","fields":{"slug":"/2-1. Designing principles 1~3 of MIPS ISA/"},"frontmatter":{"date":"2024년 07월 22일 16:07","title":"Design principles 1~3 of MIPS ISA","tags":["study","컴퓨터구조"]},"rawMarkdownBody":"contents: [[0-1. CA Intro]]\n## MIPS ISA\n### What is MIPS ISA\n- Microprocessor without Interlocked Pipelined Stages\n- A kind of ISA\n\n### Design principles\n1. **Simplicity favors regularity**\n2. **Smaller is faster**\n3. **Make the common case fast**\n\n## Design Principle 1\n### Simplicity favors regularity\n- **Regularity**: all MIPS arithmetic instructions include **a single operation & three operands** \n- Regularity makes implementation simpler \n- Simplicity enables higher performance at lower cost\n\n### Examples\n- add a, b, c\n\t- $a = b + c$\n- sub a, a, d\n\t- $a = a - d$\n\n## Design Principle 2\n### Smaller is faster\n- Operands of MIPS arithmetic instructions must be chosen in **a small number of registers**\n- **Register**: Fast locations for data\n- 32 32-bit registers in MIPS\n- 32 is $2^5$ that can be represented by using 5 bits![[registers.jpg]]\n\n## Practice 1\n**C code:**\n```c\nf = (g + h) - (i + j)\n```\n**Compiled MIPS assembly language code:**\n```\nadd $t0, $s1, $s2\nadd $t1, $s3, $s4\nsub $s0, $t0, $t1\n```\n\n## Memory instruction\n### Memory organization\nkeep a small amount data in **registers** and other remaining, complex data in **memory**\n- **Load** values from memory into registers\n- **Store** results from registers to memory\n### Address\nA memory address is an index to the memory array, starting at 0 \nMIPS uses byte addressing (Each address identifies an 8-bit byte)\n\n**But**, most data items are larger than a byte. So, they use \"**words**\" \n- In MIPS, a ward is 32 bits\n- Registers also hold 32-bit of data\n#### Alignment restrictions\n\n- The start address of each data should be multiple of N, where N is the size of the data\n- In MIPS, words must start at a addresses that are multiples of 4\n- Some data items use one or two bytes (halfword)\n#### Byte ordering\n- Big endian(**MIPS**): place the most significant byte first and the least significant byte last\n- Little endian: place the least significant byte first and the most significant byte last  \n### Load/Store\n- **lw reg1 offset(reg2)**: Load 32-bit word from the memory address reg2 + offset into reg1\n- **sw reg1 offset(reg2)**: Store 32-bit word in reg1 at the memory address reg2 + offset\n- **lh/sh** and **lb/sb** instructions load/store halfwords and 8-bit of data\n\n## Practice 2\n**C code:**\n```c\ng = h + A[8]\n```\n- A is an array of 4-bytes words\n- The value of g and h are in `$s1` and `$s2`\n- The base address of A is in `$s3`\n\n**Compiled MIPS assembly language code:**\n```\nlw $t0, 32($s3)\nadd $s1, $s2, $t0\n```\n\n## Practice 2\n**C code:**\n```c\nA[12] = h+ A[8]\n```\n- A is an array of 4-bytes words\n- The value of h is in `$s2`\n- The base address of A is in `$s3`\n\n**Compiled MIPS assembly language code:**\n```\nlw $t0, 32($s3)\nadd $t0, $s2, $t0\nsw $t0, 48($s3)\n```\n\n## Practice 3\n**C code:**\n```c\nf = (g + h) - (i + j)\n```\n- f, g, and h are in `$s0`, `$s1`, and `$2` respectively\n- Halfwords i and j are sequentially stored in memory\n- The start address of i is stored in `$s3`\n\n**Compiled MIPS assembly language code:**\n```\nadd $t0, $s1, $s2\nlh $t1, 0($s3)\nlh $t2, 2($s3)\nadd $t3, $t1, $t2\nsub $s2, $t0, $t3\n```\n\n## Design Principle 3\n### Make the common case fast\n**Common case :** a program uses a small constant in an operation many times \n\n**Solution: support** \n- **16-bit immediate operands** for handling the constants\n\t- no need to access memory to load the constants\n\t- `addi $t0, $t0, 4` : addi is an add immediate instruction\n\n- **MIPS register 0 (`$zero`)** contains the constant 0\n\t- `add $t0, $t1, $zero` : move values between two registers `$t0` and `t1`\n\n## Practice 4\n**C code:**\n```c\nf = A[10] - i + 4\n```\n- `A` is an array of bytes and its base address is stored in `$s0`\n- `f` and `i` are stored in `$s1` and `$s2` respectively\n\n**Compiled MIPS assembly language code:**\n```\nlb $t0, 10($s0)\nsub $t1, $t0, $s2\naddi $s1, $t1, 4\n```\n  \n\n## Summary: MIPS ISA\n\n### Key underlying design principles\n\n- Design principle 1. Simplicity favors regularity\n\t- All MIPS arithmetic instructions include a single operation & three operands\n- Design principle 2. Smaller is faster\n\t- Operands of MIPS arithmetic instructions must be chosen in a small number of registers\n\t- MIPS keeps more complex data in memory and supports data transfer between memory and registers\n- Design principle 3. Make the common case faster\n\t- Support 16-bit immediate operands for handling small constants + `$zero`\n"},{"excerpt":"contents: 0-1. CA Intro Measuring CPU performance Clock period: the duration of a clock cycle How long the computer takes to perform a single basic operation Clock rate (frequency):  How many basic o…","fields":{"slug":"/1-2. Measuring Performance/"},"frontmatter":{"date":"2024년 07월 22일 15:07","title":"Measuring Performance","tags":["study","컴퓨터구조"]},"rawMarkdownBody":"contents: [[0-1. CA Intro]]\n## Measuring CPU performance\n- Clock period: the duration of a clock cycle\n\t- How long the computer takes to perform a single basic operation\n- Clock rate (frequency): $cycles\\;per\\;second = \\frac{1}{clock\\;period}$\n\t- How many basic operations can be performed in a second\n$$\n\nCPU\\;time = Clock\\;cycles \\times Clock\\;period \\\\ = Clock\\;cycles \\times \\frac{1}{Clock\\;rate}\n\n$$\n### What is CPI?\n**Clock Cycles per instruction**\n: Average number of clock cycles per instruction for a program or program fragment \n$$\n\nCPU\\;time = Clock\\;cycles \\times \\frac{1}{Clock\\;rate} \\\\= Instruction\\;count \\times CPI \\times \\frac{1}{Clock\\;rate}\n\n$$\n**CPI** can be affected by\n1) Cost for each instruction type: $CPI_i$\n2) The frequency of each type of instructions: $F_i = \\frac{Instruction\\;count_i}{Instruction\\;count}$\n$$\n\n\\displaystyle CPI = \\sum_{i=1}^{n}{CPI_i \\times F_i}\n\n$$\n\n## More about\n### Benchmark\n: **a tool for measuring the performance of computers**\n- Metric: **Geometric Mean**\n$$\n\n Performance = \\frac{1}{\\sqrt[n]{\\prod_{i=1}^{n}{Execution\\;time\\;ratio_i}}} \\\\ = \\frac{1}{\\sqrt[n]{\\prod_{i=1}^{n}{\\frac{Execution\\;time_{X,i}}{Execution\\;time_{REF,i}}}}} \n \\\\  = \\sqrt[n]{\\textstyle \\prod_{i=1}^{n}{\\frac{Execution\\;time_{REF,i}}{Execution\\;time_{X,i}}}}\n\n$$\n\n### Amdahl's law\n$Execution\\;time\\;after\\;improvement$ \n\n$= \\frac{Execution\\;time\\;affected\\;by\\;improvement}{Amount\\;of\\;improvement} + Execution\\;time\\;unaffected$\n\n"},{"excerpt":"contents: 0-1. CA Intro Two metrics for defining computer performances Response time The time between the start and completion of a task related to single task e.g., how long it takes to do a single …","fields":{"slug":"/1-1. Defining Performance/"},"frontmatter":{"date":"2024년 07월 22일 15:07","title":"Defining Performance","tags":["study","컴퓨터구조"]},"rawMarkdownBody":"contents: [[0-1. CA Intro]]\n## Two metrics for defining computer performances\n1. Response time\n\t- The time between the start and completion of a task\n\t- related to single task\n\t- e.g., how long it takes to do a single task\n1. Throughput\n\t- A total amount of works done per unit time\n\t- related to multiple tasks\n\t- e.g., tasks per hour\n  \n\n**Q. If we replace the processor in a computer with ad faster version**\n- Response time **decrease**\n- Throughput **increase**\n\n**Q. If we add more processors to a system**\n- Response time **maintain or increase** (more lanes more complex)\n- Throughput **increase**\n\n## Defining performance\n\n- $Performance = \\frac{1}{execution\\;time\\,(reponse\\;time)}$\n- Relative performance: **X is N time faster than Y**\n- $\\frac{Performance_x}{Performance_y} = \\frac{Execution time_y}{Execution time_x} = N$\n\n![[performance.jpg]]\n\n- Elapsed time = system performance = **t1 + t2 + t3 + t4**\n\t- total time between the start and completion of a task, **including everything**\n- CPU time = CPU performance = **t1 + t4** *(Only this in this class)*\n\t- The time spent **processing** a given task **on a processor**\n\n$$\nPerformance = CPU\\;performance = \\frac{1}{CPU\\;time}\n$$\n\nThe CPU time can be further divided into\n- **User CPU time**\n\t- spent for processing the code of the program (some functions)\n- **System CPU time**\n\t- spent in the operating system performing tasks for the program (OS)"},{"excerpt":"contents: 0-1. CA Intro Below your program A simplified view of hardware and software Applications software Written in high-level language Systems software Compilers: translate high-level language to…","fields":{"slug":"/0-2. CA Overview/"},"frontmatter":{"date":"2024년 07월 22일 14:07","title":"CA Overview","tags":["study","컴퓨터구조"]},"rawMarkdownBody":"contents: [[0-1. CA Intro]]\n### Below your program\n\nA simplified view of hardware and software\n- **Applications software**\n\t- Written in high-level language\n- **Systems software**\n\t- **Compilers**: translate high-level language to machine language\n\t- **Operating Systems**\n\t\t- Handle input/output operations\n\t\t- Manage resources (e.g., storage, memory)\n\t\t- Schedule tasks (processes)\n- **Hardware**\n    - processors memory, I/O devices\n    \n\n## Execution of programs\n### Step 1: Translating language\n- From high-level language\n\t- Designed for specific domain\n\t- Provides for productivity and portability\n- To hardware machine language\n\t- Binary digits\n\t- Encoded instructions\n\n### Step 2: Inputting, outputting, processing, and storing data\n**4 Fundamental HW components**\n- Processor\n\t- Datapath + control, our primary focus\n- Memory\n- Input device\n\t- Keyboard, mouse, ...\n- Output device\n\t- Screen, speaker\n\n**8 STEPS**\n1) Loading: programs are stored in memory\n2) Inputting: input device write data to memory\n3) Fetching: processor fetches instructions and data from memory\n4) Decoding: processor (control) decodes the instructions and determine what to do\n5) Executing : processor (datapath) executes the instructions & stores the computation result to memory\n6) Outputting: output device sends the result by reading output data from memory\n\n## Understanding program performance\n\n- Algorithm\n\t- Determines the number of operations executed\n- Programming language, compiler, and instruction set architecture (ISA)\n\t- Determine the number of machine instructions executed per operation\n- Processor and memory system\n\t- Determine how fast instructions can be executed\n- I/O system (including OS)\n\t- Determines how fast I/O operations are executed\n\n## What is ISA (Instruction Set Architecture)\n- An interface between SW snd HW (includes a set of machine instruction)\n\t- SW is translated into the machine instructions included in the ISA\n\t- HW is designed to support the instructions in ISA\n\n## 8 great ideas for designing better computer architecture\n- Design for **Moore's Law**\n\t- Anticipate where the technology will be when the design finishes\n- Provide **abstraction** to simplify design\n\t- Hide low-level details for the ease of SW development\n- Make **the common case** fast\n\t- Enhance performance of the common case instead of optimizing the rare case.\n- Perform via **parallelism**\n\t- Perform operations in parallel\n- Performance via **pipelining**\n\t- Use a particular patten of parallelism, called pipelining\n- Performance via **prediction**\n\t- Start working with prediction, stead of waiting until you know for sure\n- **Hierarchy** of memories\n\t- Use the fastest, smallest, and most expensive memory at the top of the hierarchy and the slowest, largest, and cheapest memory at the bottom\n\t- cache > RAM > Large SSD\n- Dependability via **redundancy**\n\t- Include redundant components that can take over when failure occurs"},{"excerpt":"Course Description 본 스터디에서는 컴퓨터 시스템이 어떻게 구성되어있고 디자인되어있는지 공부합니다.\n특히 CPU, memory를 포함한 하드웨어 시스템에 적용되고 있는 디자인 특성들을 알아봅니다. Prerequisites and Co-requisites C 프로그래밍, 논리회로, 어셈블리어를 알면 더욱 좋습니다. Textbooks 본 페이지…","fields":{"slug":"/0-1. CA Intro/"},"frontmatter":{"date":"2024년 07월 22일 12:07","title":"Computer Architecture Intro","tags":["study","컴퓨터구조"]},"rawMarkdownBody":"## Course Description\n\n본 스터디에서는 컴퓨터 시스템이 어떻게 구성되어있고 디자인되어있는지 공부합니다. \n특히 CPU, memory를 포함한 하드웨어 시스템에 적용되고 있는 디자인 특성들을 알아봅니다.\n\n## Prerequisites and Co-requisites\n\nC 프로그래밍, 논리회로, 어셈블리어를 알면 더욱 좋습니다.\n\n## Textbooks\n\n본 페이지에 작성될 내용의 기반은 아래의 책에 있습니다.\n![[computer-architecture-textbook.jpg]]Computer Organization and Design 5th Edition (Asian Edition)\n\n## Course Schedule\n- 0. Intro\n\t- [[0-1. CA Intro]]\n\t- [[0-2. CA Overview]]\n- 1. Computer Abstractions and Technology\n\t- [[1-1. Defining Performance]]\n\t- [[1-2. Measuring Performance]]\n- 2. Instructions: Language of the Computer\n\t- [[2-1. Designing principles 1~3 of MIPS ISA]]\n\t- [[2-2. Design principles 4 of MIPS ISA]]\n\t- [[2-3. Representing Instructions in computer]]\n\t- [[2-4. Supporting procedures in computer hardware]]\n\t- [[2-5. MIPS memory allocation & addressing]]\n- 3. Arithmetic for Computers\n\t- [[3-1. Addition and Subtraction]]\n\t- [[3-2. Multiplication]]\n\t- [[3-3. Division]]\n- 4. The Processor\n\t- [[4-1. Processor Overview]]\n\t- [[4-2. Controlling a datapath]]\n\t- [[4-3. A single-cycle datapath]]\n\t- [[4-4. Pipelining overview]]\n\t- [[4-5. Handling hazards]]\n\t- [[4-6. Exceptions]]\n- 5. Memory Hierarchy\n\t- [[5-1. Cache overview]]\n\t- [[5-2. Improving cache performance]]\n\t- [[5-3. Vitual memory Part 1]]\n\t- [[5-4. Vitual memory Part 2]]\n"},{"excerpt":"지난 회고: retrospect-2023 어느덧 24년 상반기가 지나갔다. 2주 전에 전역도 하고 한창 바쁘게 살고 있는 요즘이다. 물론 공부를 그렇게 한다는 건 아니고 자취 준비도 하고 못 만났던 사람들도 열심히 만나고 있다. 학교는 아직 4차 학기밖에 안 끝낸 상태인데 엇복학은 힘들 것 같아서 내년에 복학할 예정이고 대신 학부연구생은 하반기부터 진행할…","fields":{"slug":"/retrospect-2024-1/"},"frontmatter":{"date":"2024년 07월 20일 20:07","title":"2024년 상반기 회고","tags":["회고"]},"rawMarkdownBody":"지난 회고: [[retrospect-2023]]\n\n어느덧 24년 상반기가 지나갔다. 2주 전에 전역도 하고 한창 바쁘게 살고 있는 요즘이다. 물론 공부를 그렇게 한다는 건 아니고 자취 준비도 하고 못 만났던 사람들도 열심히 만나고 있다. 학교는 아직 4차 학기밖에 안 끝낸 상태인데 엇복학은 힘들 것 같아서 내년에 복학할 예정이고 대신 학부연구생은 하반기부터 진행할 예정이다.\n\n우선 이번 반기 목표는 아래와 같다.\n> - 운동 꾸준히 하기 (체중80 골격근량43 목표)\n> - 코테 준비하기\n> - 좋아하는 분야 찾기\n> - 일찍 자고 일찍 일어나기 \n\n\n## 운동 꾸준히 하기\n입대 후부터 지금까지 습관처럼 운동을 해오고 있는데 이제는 안하면 스트레스를 받는 정도인 것 같다. 좋은 건지, 안 좋은 건지는 모르겠지만 점점 욕심도 생기고 변해가는 모습이 마음에 든다. \n\n지금은 학교도 안다니고 약속도 정해진 게 없어서 운동을 오전에 해치우고 있는데 학부연구생을 시작하거나 복학하고 나서는 언제 운동을 가야할 지 모르겠다. 운동하는 직장인분들 보면 저녁 늦게 오시는 것 같던데 다들 일정 다 끝내고 힘든 와중에 어떻게들 하는지... 대단한 것 같다.\n![[inbody.jpg]]\n위 사진이 6월말 인바디 결과다. 예전에 비해서는 체중도 많이 늘고 골격근량도 증가해서 진짜 좋아진 편인데 하다보니 욕심이 생겨서... 올해 안으로 체중 80kg, 골격근량 43kg 만드는 게 목표다. 체지방도 많이 필요해보이긴 하는데 그렇다고 지금 복근이 선명하게 보일정도로 마르지도 않아서 더 찌워도 되나... 하는 생각이 든다. 근데 찌우고 싶어도 살이 찌지는 않더라..\n\n지금은 4분할 운동하고 하루 또는 상황이 여의치 않으면 이틀 쉬어주고 있는데 하반기에도 유지하는 게 목표다. 꾸준히 하자!\n\n## 코딩테스트 준비\n군복무를 하면서 코테 준비만큼은 목표를 달성하지 못한 것 같다. 지금 상태는 어떤 알고리즘을 써야하는지 보면 어찌저찌 풀 수 있는 정도인데 그 알고리즘 마저도 온전히 내 걸로 만들지도 못했다. 아직 많이 부족한 분야라고 생각이 들고 그만큼 내가 그동안 피해왔던 분야라고 생각이 든다. \n\n어떤 종류의 알고리즘을 써야하는지 안보면서 푸는 연습, 푸는 방식을 정했으면 스스로 구현하는 연습을 처음부터 기초를 다진다는 생각으로 해야할 것 같고 공부 과정을 여기에 잘 남기도록 해야겠다/ \n\n## 좋아하는 분야 찾기 (미래 계획)\n학부연구생을 하는 것도 이 목표의 일환이기도 한데, 난 내가 생각했을 때 아직은 어떤 분야를 깊게 알고싶은지 모르는 것 같다. 관심사도 계절 바뀌듯이 바뀌어서 넓고 얕은 지식 상태를 유지하고 있는 상황이다. 최근엔 HCI (Human Computer Interactions)에 관심이 생겼다. 그래서 [중앙대 김효수 교수님 연구실](https://sites.google.com/view/hcslab-cau/home?authuser=0)에서 학부연구생을 하기로 했고, 아직은 그곳에서 내가 무엇을 할지는 모르겠지만 내 바람은 연구 분위기도 경험해보면서 내가 선택한 분야가 나와 과연 잘 맞는가, 내가 계속 호기심을 갖고 접근하는가, 이런 일련의 과정들을 계속 해갈 수 있을지에 대한 답을 찾아가고 싶다.\n\n주변에 학교를 졸업하는 사람이 하나 둘 생기면서 과연 난 학사 졸업 후에 무엇을 할 지에 대한 막연한 고민들이 생기기 시작했다. 대학원을 가고 싶은지, 취업을 하고 싶은지, 창업을 하고 싶은지 아무것도 모르는 상태다. 고등학생 때는 당연히 대입이라는 어떻게 보면 정해진 미래 덕분에, 혹은 아직은 미성년자라는 것 때문에 미래에 대한 고민들이 없었지만 대학생이라는 신분은 좀 애매한 것 같다. 법적상 성인이긴 하지만 과연 그만큼의 책임감을 우리가 느끼고 있느냐, 난 개인적으론 아닌 것 같다. 아직은 철 없다고 느끼는 순간도 많고 애처럼 책임을 회피하는 순간들이 종종 있는데, 남은 반기동안에는 졸업 후의 모습에 대해서, 내가 진짜 하고 싶은게 무엇인지 고민할 수 있는 시간을 많이 가져야겠다고 생각이 든다.\n\n## 일찍 자고 일찍 일어나기\n전역 후에 자연스럽게  늦게 자고 늦게 일어나는... 입대 전 생활로 돌아가고 있다. 그렇다고 새벽까지 생산적인 일을 하는 것도 아니라서 온전히 활용하는 시간이 적다. 오전 시간을 활용하려고 하고 있고 지금도 일찍 자고 일찍 일어나서 운동을 가는 루틴을 습관화하려고 하는데 유지하자. \n\n## 마무리하며\n지나고나서야 군대에 있는 1년 반이 짧게 느껴지는 것 같다. 그동안 못해왔던 공부를 다시 할 생각에 막막하기도 하고 기대도 되는 시점인데 절반도 안남은 24년을 후회없이 보내고 싶다. 전에도 쓴 것 같은데 기록의 중요성을 다시 한 번 느끼면서 하반기에는 공부 뿐이 아니라 여러 활동들, 생각들을 적으려고 노력해봐야겠다. "},{"excerpt":"항상 기록의 중요성을 느끼고 있었다. 내가 어떤 걸 배우고 해냈다라는 걸 뽑내기 보다는 내 생각들과 학습한 내용들을 구조화해서 나중에 다시 쉽게 찾아볼 수 있도록, 그리고 그게 또 하나의 내 자산이 되기를 원했다. 그래서 제작년부터 이런 저런 툴을 사용해보며 블로깅을 해왔는데 결국은 하나같이 다 마음에 들지 않았다. 생산성 내가 원한 건 생산성 딱 하나였…","fields":{"slug":"/why-obsidian/"},"frontmatter":{"date":"2024년 01월 10일 13:01","title":"기존 블로그 대신 Obsidian을 택한 이유","tags":["obsidian"]},"rawMarkdownBody":"항상 기록의 중요성을 느끼고 있었다. 내가 어떤 걸 배우고 해냈다라는 걸 뽑내기 보다는 내 생각들과 학습한 내용들을 구조화해서 나중에 다시 쉽게 찾아볼 수 있도록, 그리고 그게 또 하나의 내 자산이 되기를 원했다. 그래서 제작년부터 이런 저런 툴을 사용해보며 블로깅을 해왔는데 결국은 하나같이 다 마음에 들지 않았다.\n## 생산성\n내가 원한 건 생산성 딱 하나였다. 블로깅을 하는 유일한 목적이 결국은 스쳐지나가는 생각들을 메모해두기 위함인데 기존에 사용하던 [Nuxt로 개발된 블로그](https://github.com/theminjunchoi/ex-blog)는 생산성 측면에서 부족했던 것 같다. 글 하나를 쓰기 위해 노트북을 열어야했고 괜히 나도 있어보이는 글을 쓰기 위해 억지로 분량을 늘리고 이쁜 문장들을 찾았다. 공부 내용을 기록할 때도 학습에 초점을 둔 기록이기보단 정리에 초점을 둔 기록들 투성이었다. 지금 생각해보면 모든 요소 하나하나가 너무 많은 시간을 잡아먹는 것 같았다. 그러던 와중에 obsidian을 발견했다.\n## 현재 블로그\n### obsidian\n세컨드브레인이라는 책을 읽다가 obsidian이라는 툴을 알게 됐다. 글과 글 사이에 관계를 나타내기 좋아서 사용하기 시작했는데 여러 플러그인들도 많아서 내가 사용하는 용도에 맞게 커스텀하기 좋은 것 같다. 플러그인은 아래의 것들을 사용하고 있다.\n- Omnisearch\n- Templater\n- Update time on edit\n- Outliner\n- Checklist\n- Calendar\n- MindMap\n- Obsidian git\n### Gatsby\n기존 블로그는 Nuxt로 개발된 정적 웹페이지였다. Nuxt에서 Gatsby로 넘어간 이유는 2가지다.\n\n첫째는 원래 사용하던 블로그는 Nuxt2로 개발되었는데 내가 군대를 간 사이에 Nuxt3가 나왔다. 처음에는 마이그레이션을 해보려고 해봤는데 생각만큼 그리 단순하지 않았다. 가장 큰 문제는 아래에서도 간단하게 언급하겠지만 Nuxt가 버전업이 되면서 이를 지원하던 노드 모듈들도 이에 맞게 수정이 되어야하는데 vue 생태계가 그렇게 반응이 빠르지 않았다. 그래서 내가 마이그레이션을 해도 기존에 쓰던 기능들을 못 쓰게 되고 내가 노드 모듈을 직접 건드려보기도 했는데 도저히 휴가 때 할 수 있는 양이 아니었다.\n\n두 번째 이유는 단순히 vue 기반의 프레임워크랑 react 기반의 프레임워크를 비교해보고 싶었다. 여러 프레임워크를 쓰면서 나한테 맞고 편한 프레임워크를 찾아보고 싶었고 얼마나 많이 다른지 단순 호기심에서 시작했다. 좀 더 써봐야 알겠지만 프레임워크를 지원하는 생태계는 역시 vue보단 react가 좀 더 좋은 것 같다. 지원하는 노드 모듈들이 많은 것도 틀린 말은 아닌데 그것보다는 프레임워크의 버전업을 노드 모듈들이 빠르게 반응해서 맞춰주는 건 react가 더 편한 것 같다. 사실 차이가 그렇게 크지는 않겠지만 그래도 아직 익숙한 건 아직까지 vue인 것 같다. \n### 동기화: Working Copy\nobsidian에서 obsidian sync라는 기능으로 유료 구독제를 결제하면 여러 기기간의 동기화를 지원해주고 있다. 하지만 나는 Working copy라는 어플로 노트북과 아이패드, 아이폰을 동기화 해주고 있다.  결국은 Github로 동기화를 해주고 있는 건데 조금은 불편할지라도 내가 원할 때 커밋을 올리고 버전관리가 더 쉬울 것 같아서 이렇게 사용하고 있다."},{"excerpt":"지난 회고: retrospect-2022-2 이제 막 옵시디언으로 넘어왔는데 이 글이 옵시디언으로 기록하는 첫 번째 글이 되지 않을까싶다. 원래 2023년은 군대로 모든 시간을 보내서 회고를 안쓰려고 했는데 오늘이 입대한 지 딱 1년이 됐고, 그 1년동안 내가 무슨 생각을 가지고 살았는지, 전역 후에 내가 어떤 목표를 가지고 살아야하는지 한 번쯤은 정리해…","fields":{"slug":"/retrospect-2023/"},"frontmatter":{"date":"2024년 01월 08일 12:01","title":"2023년 회고","tags":["회고"]},"rawMarkdownBody":"지난 회고: [[retrospect-2022-2]]\n\n이제 막 옵시디언으로 넘어왔는데 이 글이 옵시디언으로 기록하는 첫 번째 글이 되지 않을까싶다. 원래 2023년은 군대로 모든 시간을 보내서 회고를 안쓰려고 했는데 오늘이 입대한 지 딱 1년이 됐고, 그 1년동안 내가 무슨 생각을 가지고 살았는지, 전역 후에 내가 어떤 목표를 가지고 살아야하는지 한 번쯤은 정리해보려고 늦었지만 휴가를 나와서 23년 회고를 작성하기로 했다.\n## 2023년 과연 난 뭘 했을까?\n사실 한 게 별로 없다. 머리 밀고 훈련소 들어가서 열심히 훈련받고, 자대 배치받고, 흘러가는 시간에 몸을 맡긴 채 하루하루를 녹이고 있는 날들의 연속이었다. 그래도 그 속에서 1년 반이라는 시간이 내 20대의 공백으로만 남는 건 허락하지 못하기에 이거저거 시도를 해봤다.\n### 독서\n사실 난 책과는 그리 친한 편은 아닌데, 훈련소를 들어가면 쉬는 시간에 너무나도 할 게 없었다. 그래서 진중문고에 올라와있던 책을 한 두권씩 읽었는데 난 책이 그렇게 재밌다는 걸 훈련소에서 알았다. 그렇게 훈련소에서 한 두권 읽다가 자대 배치를 받고 핸드폰이라는 신문물을 발견해서 초반에는 열심히 밀린 핸드폰을 하다가 그거마저 지쳐버려서 다시 또 책을 읽기 시작했다. 당직을 서야할 때나 주말에도 꽤 많이 읽었는데 지금 다시 생각하면 막상 기억에 남는 건 몇 개 없는 것 같다.\n- 우리는 모두 각자의 별에서 빛난다 - 이광형\n- 세컨드브레인 - 티아고포르테\n다음 휴가 때는 이 2권이라도 책 리뷰를 써볼까한다.\n### 운동\n요즘은 운동을 안하면 불안할 정도로 습관이 된 것 같다. 주변 형들이 군대를 다녀오면 남는 건 군적금과 몸밖에 없다고 하길래 시작했는데 여러모로 군생활을 버티게끔 해준 유일한 취미생활이 된 것 같다. 군생활에 현타가 올 때마다 운동하다보니 재미도 붙어서 주 5회 1시간 이상씩 꾸준히 하고 있다. 전역 후에도 유지할 수 있도록 해야겠다.\n### 코딩\n난 내가 군대에서도 코딩을 할 줄 알았다. 어떻게든 꾸역꾸역 할 줄 알았는데 지금 막상 돌아보면 별로 못한 것 같다. pc가 4대 밖에 없는 사지방에서 차가운 손 녹여가며 해봤는데 집중도 안되고 군e러닝도 하다보니까 당장 눈 앞에 놓인 학점 따기 바빴던 것 같다. 남은 기간 동안에는 군e러닝도 안들으니까 적어도 코테준비를 해야겠다.\n### 군e러닝\n군복무를 하면서 군e러닝을 들을 수 있다. 각 학교에서 군 휴학생을 위해 몇몇 강의들을 개설해주는데 나는 23-1에는 **소비의문화와역사**, 23-2에는 그 놈의 **실용한자**를 수강했다. 타 학교에 비해 중앙대가 개설해주는 강의가 별로 없어서 아쉽긴 했지만 실용한자가 군e러닝으로 들을 수 있어서 다행이었다. 아직 실용한자를 수강하지 않은 중대 미필분들은 군대에서 끝내버리세요 :)\n\n생각보다 뺏기는 시간도 많았고 시험에, 과제에 준비해야할 것들은 군 휴학생이라고 배려해주는 건 별로 없지만 그래도 무의미하게 군생활을 보내지 않고 학점이라도 채운 것 같다.\n### 창업아이디어경진대회\n23년 2월, 8월 2번에 걸쳐서 창업아이디어경진대회에 나갔다. 물론 포상휴가에 눈이 멀어 나갔지만 그래도 반복되는 군생활 가운데 새로운 바람을 불어넣어준 활동이었다. 2월에는 본선에서 떨어져서 8월에 좀 더 열심히 준비해서 다시 도전했다. 이 활동이 어떤 지식의 도약을 일으켜 준 건 아니었지만 지금 생각해보면 군복무하면서 이거저거 시도해보면서 바쁘게 생활한 것 같아서 뿌듯하다.\n\n![[presentation.png]]\n## 2024년 목표\n군대에 있으면서 '개발자로서 나' 라는 부분에 대해 생각을 많이 해오고 있다. 혼자 고민할 수 있는 시간이 많다보니 이런저런 생각을 하곤 하는데 요즘 난 나라는 개발자가 뭘 좋아하는지, 무엇을 잘하고 어떤 일을 할 때 행복해하는지 고민을 하고 있는 것 같다.\n\n사실 내가 스스로를 개발자라고 칭할 수 있나? 라는 생각이 들기도 한다. 아직 내 이름을 걸고 보여줄 수 있는 프로젝트도 없고 이룬 게 별로 없는 것 같아서 조바심도 나고 얼른 다시 학교로 가고 싶다는 생각이 든다.\n\n그래서 2024년의 목표는 커리어 성장과 가치 높이기다. 내년이면 올해보다 회고할 게 많은 내가 되면 좋겠다. 그때까지 옵시디언으로 꾸준히 기록을 해나가면서 유의미한 한 해를 보내고 싶다.\n\n이렇게 보니 군생활하면서 후회하지 않을 정도로 열심히 산 것 같다. 내년 이맘때도 1년 동안 정말 열심히 살았구나라는 생각을 할 수 있길 바라며 23년 회고와 24년 목표를 기록해본다.\n"},{"excerpt":"😄 Introduction Hi! I'm Minjun Choi, I constantly reflect on whether the services I create are solving problems effectively and making a positive impact on the community I belong to. With this mindset…","fields":{"slug":"/readme/"},"frontmatter":{"date":"2024년 01월 01일 22:01","title":"README","tags":null},"rawMarkdownBody":"## 😄 Introduction  \nHi! I'm **Minjun Choi**, I constantly reflect on whether the services I create are solving problems effectively and making a positive impact on the community I belong to. With this mindset I strive to develop better solutions and become a developer who makes a meaningful contribution to society. You can check out my [blog](https://minjun.blog/)!\n\n## ✏️ Education \n* [Software (Computer Science & Engineering)](https://cse.cau.ac.kr/main.php), Chung-Ang University (2021.03. ~ )\n  \n## 💻 Activity\n* CAU ZeroPage 31st Regular Member (2021.03. ~ )\n* CAU ZeroPage 32nd vice-President (2022.03. ~ 2023.02.)\n* GDSC CAU 1st Member (2021.06. ~ 2022.07.)\n* GDG on Campus CAU 4th Core Member (2024.09. ~ )\n* CECOM Member (2024.09. ~ )\n* Undergraduate researcher at [HCSLAB of Chung-Ang Univ.](https://sites.google.com/view/hcslab-cau/home?authuser=0) (2024.09. ~ ) \n\n## 🛠️ Tech Skill\n* Framework | Spring, Nuxt, Flutter\n* Language | Java, python, C, C++, Dart\n* ETC | git, Firebase, k8s, docker\n\n## 🚀 Toy Project\n* [ZeroPage Portal Page](https://github.com/ZeroPage/ZP-portal-page) with Nuxt\n\n## 📖 Study\n* Flutter, Design Pattern Study in ZeroPage (2021.09. ~ 2021.11.)\n* Data Structure Study in ZeroPage (2022.03. ~ 2022.06.)\n* Spring, Kotlin Study in ZeroPage (2022.04 ~ 2022.07.)\n* Computer Structure Study in ZeroPage (2022.09. ~ 2022.12.)\n* Spring Study in GDG CAU (2024.10. ~ )\n* Kubernetes Study in GDG CAU (2024.10. ~ )"},{"excerpt":"기존 블로그에서 이전해온 글입니다. 지난 회고: retrospect-2022-1 들어가기 전에 어느덧 연말이 다가왔다. 상반기 회고를 쓴 게 엊그제 같은데 다시금 회고를 써야한다는 것을 깨닫고 나서야 연말이 다가왔음을 느꼈다.\n2022년 하반기 회고를 작성하기 전에, 지난 9월에 작성했던 상반기 회고를 다시 읽어봤다. 내가 무슨 생각을 해왔었는지, 하반기…","fields":{"slug":"/retrospect-2022-2/"},"frontmatter":{"date":"2022년 12월 23일 12:12","title":"2022년 하반기 회고","tags":["회고"]},"rawMarkdownBody":"\n*[기존 블로그](https://choiminjun.netlify.app/blog/retrospect-2022-2)에서 이전해온 글입니다.*\n\n지난 회고: [[retrospect-2022-1]]\n\n## 들어가기 전에\n어느덧 연말이 다가왔다. 상반기 회고를 쓴 게 엊그제 같은데 다시금 회고를 써야한다는 것을 깨닫고 나서야 연말이 다가왔음을 느꼈다.\n2022년 하반기 회고를 작성하기 전에, 지난 9월에 작성했던 [상반기 회고](https://minjun.blog/retrospect-2022-1)를 다시 읽어봤다. 내가 무슨 생각을 해왔었는지, 하반기에 새운 목표들은 잘 이루었는지 확인해봤다. 다 읽고 가장 먼저 생각이 든 건, **내 사고의 기록은 더 구체적으로, 목표는 더더욱 구체적으로 적어야겠다는 것이**었다. 나름 한 학기 동안 내가 느꼈던 것들을 자세히 적었다고 생각했는데 지금 다시 보니 그 순간의 기억을 다시 불러내기엔 조금 부족한 것 같다. 이번 회고는 보다 더 다양한 내 기억들을 저장하고자 한다.\n\n## 학교 수업\n이번 학기엔 전공 수업이 5개였다. 컴퓨터구조, 컴퓨터통신, 객체지향프로그래밍, 오토마타와 형식언어, 데이터베이스설계, 이렇게 총 5개를 들었다. 생각보다 전공 수업을 5개나 듣는 건 쉬운 일이 아니었다. 강의 자체를 오프라인으로 오랜시간동안 듣는 게 너무도 오랜만이었기 때문에 학기 초에는 몸이 적응하기 힘들었었다. 그럼에도 난 시간을 쪼개면 내 개인 개발 공부를 할 수 있는 시간이 있을거라고 생각했는데 학교 수업을 너무 재밌있게 들어서 그런지 그 둘을 병행하기엔 물리적으로 불가능했었다. \n\n![[Computer-Architecture.jpg]]\n\n\n특히 컴퓨터구조와 컴퓨터통신 과목을 배우면서 검은색화면 뒤로, 우리 눈에 보이지 않는 방식으로 일어나고 있는 일들을 얕게나마 알아가는 과정이 흥미로웠다. 컴퓨터구조를 공부하면서 수업 자료 이외에도 원서도 많이 읽었는데, 학교 강의에서는 다뤄주지 않는 내용들도 궁금해하고 찾아보면서 잠시나마 대학원에 가면 어떨까.. 하는 생각을 했다. 나도 저런 책을 쓸 만큼의 연구를 해보고 싶기도 했고, 책을 읽으면서 나라면 이런 문제를 다르게 접근하지 않았을까.. 혹은 더 효율적인 뱡향으로 풀 수 있지 않을까.. 하는 건방진 생각을 하기도 했다.\n\n## ZeroPage\n\n![[zp-angelscamp-site.jpg]]\n![[zp-지금그때-site.jpg]]\n\n\nZeroPage의 모든 굵지막한 행사들이 끝이 났다. 엔젤스캠프, 지금그때를 진행했고, 1월 초에 다같이 기년회를 할 예정이다. 그때가서도 말할 예정이지만, 나에게 ZeroPage는 가장 자극을 많이 받을 수 있는 곳이었다. 각자 자리에서 열심히 사는 그들을 보며 순수한 열정을 불태울 수 있는, 내가 학교 생활에서 가장 아끼던 부분이었다. \n\n기년회를 끝으로 공식적인 회장단 활동이 끝이 난다. 한 동아리의 회장단은 참 해야할 일이 많다는 걸 깨달은 한 해였지만, 그럼에도 너무 재미있었던 1년이었다. 사람 만나는 재미를 알게 되고 내 생각을 누군가와 공유한다는 느낌을 받을 수 있던 자리였다. \n\n1년 사이에 동아리에 대한 애정이 많이 커졌다. 내가 보고 듣고 느끼고 배운 게 많았던 곳이어서 그런지, 회장단이 끝난다는 게 왠지 모르게 시원섭섭한 느낌이다. 동아리 사람들에게 올해의 ZeroPage가 어떻게 기억될지는 모르겠지만, 다들 이 동아리로 하여금 나처럼 배우고 느낀 점이 많으면 그걸로 만족할 수 있을 것 같다.\n\n32대 회장단을 같이 이끌어온 친구들에게도 너무 수고했다고 고맙다고 전해주고 싶다.\n\n## 2023년\n적은 건 몇 개 없지만 모니터 앞에서는 몇 시간을 넘게 그동안의 시간들을 쭉 되새겨보았다. 올해는 공부도 열심히 하고 노는 것도 열심히 해서 그런지 시간이 너무 빠르다고 느껴질만큼 바쁘게, 재밌게 보낸 것 같다. 내년엔, 잠시 하던 걸 멈춰두고 2023년 1월 9일에 입대를 하기로 했다. 사실 공부도 더 하고 싶고, 학교 생활도 더 하고 싶고, 더 자극받고 성장하고 싶은데 갑작스럽게 가는 것 같아서 많이 아쉬운 건 사실이다. 하지만 더 늦어질 수도 없고 오히려 하고 싶은 게 너무나도 많아서 하루 빨리 가기로 결정을 하기도 했다. 전역 후에 하고 싶은 게 너무도 많기에, 좀 더 빨리 입대하고 좀 더 빨리 전역할 생각이다. \n\n군대에서의 계획은 아직 잘 모르겠다. 원래는 토플도 공부하고 알고리즘도 공부하겠다는 목표를 적으려고 했지만, 가봐야 생각이 정리될 수 있을 것 같다. 20살이 돼도 학교 수업과 별개로 열심히 자기 계발하고 공부했었다. 한 번쯤 쉬는 것도 나쁘지 않을 것 같다는 생각이 이 글을 쓰면서 문득 떠올랐다. 대신, 나한테 2023년은 어느때보다 느리게 가겠지만 그래도 인생에 있어서 의미없는 1년으로 만들지 말자는 게 내 작은 목표이다.\n\n## 2022년의 나\n나는 학교 수업 이외에도 이런 저런 활동 하는 것을 좋아하고, 사람들을 만나서 배우고 같이 공부하는 과정을 좋아하며 그로 인해 얻게 되는 시너지와 에너지를 좋아하는 사람이다. 하지만 올해에는 부족한 점도 있었다. \n\n어느 순간 팀플 과제를 하는 내 모습이 내가 원하던 모습이 아니었다는 것을 깨달았다. 성적에 대한 욕심 때문에 기분이 내 태도가 되어버린 순간들이 몇몇 있었다. 팀 프로젝트를 하면서 가장 아쉬운 순간은, 팀원들이 나만큼 이 과제에 진심이 아니었다는 걸 깨달은 순간이다. 데일 카네기는 인간관계의 기본원칙을 설명하면서 마지막으로 \"상대방에게 열렬한 욕망을 불러일으켜라.\"라고 한다. 수도 없이 읽은 구절인데 팀원들에게 미안하기도 하고 아직은 부족한 나에게 실망한 순간이었다. \n\n반대로 올해의 내가 잘한 점은, 나에게 집중할 수 있는 시간이 많았다는 것이다. 해외프로그램을 다녀온 이후로 나한테 보다 더 집중할 수 있었다. 관심과 욕심은 내가 성장할 수 있게하는 내 동력원인데 항상 그 관심의 영역에는 내가 없음을 깨달을 수 있었다. 내가 잘하고 못하는 게 무엇인지, 내 관심사와 시선은 어디로 향하는지 알 수 있었고 이외에도 감정적으로, 또 그 밖으로도 느낀 게 너무 많은 올해였다. \n\n## 마무리하며\n회고를 하면서 올해는 돌아봤는데 알차게, 또 후회없이 보낸 것 같아서 다행이었다. 나를 성장시킬 수 있었던 한 해였고, 동기부여가 많이 됐던 한 해였다. 다음 회고는 아마 24년 하반기 회고가 될 것 같은데 얼른 그 회고를 쓰는 날이 다가왔으면 좋겠다"},{"excerpt":"기존 블로그에서 이전해온 글입니다. What is 지금그때? ZeroPage.svg 현재 내가 32대 회장단으로 있는 중앙대학교 소프트웨어학부 학술동아리 ZeroPage에는 매년 주기적으로 열리는 행사가 크게 4개가 있다. 오늘은 마지막 행사인 '지금그때'를 진행했다. 이 행사는 졸업하신 선배분들과 재학생이 만나 선배분들의 그때와 우리들의 지금을 서로 공…","fields":{"slug":"/ZeroPage_지금그때_2022/"},"frontmatter":{"date":"2022년 11월 26일 20:11","title":"2022 ZeroPage 지금그때","tags":["ZeroPage"]},"rawMarkdownBody":"\n*[기존 블로그](https://choiminjun.netlify.app/blog/after-jigeumgeuddae)에서 이전해온 글입니다.*\n\n## What is 지금그때?\n![[ZeroPage.svg]]\n\n현재 내가 32대 회장단으로 있는 중앙대학교 소프트웨어학부 학술동아리 ZeroPage에는 매년 주기적으로 열리는 행사가 크게 4개가 있다. 오늘은 마지막 행사인 ['지금그때'](https://zp-portal.org/jigeumgeuddae/)를 진행했다. \n\n이 행사는 졸업하신 선배분들과 재학생이 만나 선배분들의 그때와 우리들의 지금을 서로 공유하고 엿볼 수 있는 자리다. 후배분들은 학업이나 학교생활에 대한 본인의 고민을 털어 놓을 수 있고 이에 대한 조언이나 선배분들의 경험을 들을 수 있다. 반대로 선배분들은 그런 질문들에 기꺼이 조언을 아끼지 않아주시고 요즘은 어떤 공부를 하는지, 학교 생활은 무엇이 달라졌는지 서로 이야기를 나눌 수 있는 자리이다.\n\n작년에도 내가 1학년일 때 이 행사를 참여했었는데 선배분들과 이야기를 하면서 학교 수업에서는 얻을 수 없던 이야기들을 나눌 수 있었고, 취업이나 대학원 뿐이 아니라 개발자라는 종류의 사람이 무엇인지, 앞으로의 공부 방향성을 어떻게 확립해나가야 하는지를 알 수 있었다.\n\n올해는 이 동아리의 회장단으로서 행사를 준비하고 운영하고 참여했다.\n\n### 진행 방법\n우선 간단히 아이스 브레이킹을 하고 본격적으로 시작이 됐다. 대략 한 시간씩 3타임이 운영이 됐고 각 타임에는 본인이 관심이 있는 주제가 있는 자리에 가서 편하게 대화를 하면 된다.\n\n자세한 타임테이블은 아래와 같다.\n| Time          | Activity       |\n| ------------- | -------------- |\n| 13:30 - 14:00 | 참가자 등록     |\n| 14:00 - 14:30 | 개회사          |\n| 14:30 - 15:00 | 아이스브레이킹  |\n| 15:00 - 16:00 | 월드카페 1부    |\n| 16:00 - 17:00 | 월드카페 2부    |\n| 14:30 - 15:00 | 월드카페 3부    |\n| 18:00         | 후기 및 폐막    |\n| 18:30         | 회식            |\n\n\n주제는 신청하신 분들이 원하는 것을 바탕으로 총 12개를 만들었다.\n- 무슨 공부를 해야하는가, 학부생때 해야할 것들에 대한 추천\n- 학교 수업을 따라가는 것이 중요한가\n- 졸업생으로서 가장 유용하게 생각하는 과목\n- 취업을 위해 준비해야할 것들\n- 대학원에 대한 조언\n- 관심 분야를 어떻게 정했는지\n- 지금 하는 일이 즐거운 이유\n- 컴퓨터 전공자는 어떤 유형으로 사회에 진출하는가\n- ZeroPage가 나에게 미친 영향\n- 시간, 멘탈 체력 등의 관리\n- 방학에는 무엇을 하는 게 좋은가\n- 개발자와 커뮤니케이션에 대해\n\n## 어떤 주제에 참여했는가\n꼭 한 타임에 한 주제에 머물러 있을 필요는 없었는데 자리에서 이야기를 하다보니 물어볼 것도 많았고 들을 내용도 많아서 총 3개의 주제에 참여를 했다.\n\n### 학교 수업을 따라가는 것이 중요한가\n첫 번째 타임에 참여한 주제다. 사실 이 주제는 내가 1학년 때부터 재학생 선배분들께 많이 물어보며 다녔고 이에 대한 답도 알지만, 오늘 처음 본 선배분들, 특히 현업에 종사하신 분들의 생각은 어떤지 궁금해서 자리를 찾아갔다.\n\n당연히, 다들 중요하다고 대답해주셨다. 근데 그거에 덧붙여서 이야기 해주신게 기억이 남았다. 내 기억에 남는대로 재해석을 하자면, 학교에서 배운 내용은 일종의 지도 같은 역할을 한다고 하셨다. 당장은 현업에서 쓰이지 않고 내가 필요로 하지는 않을 수도 있지만, 언젠가 내가 그 지식이 필요할 때 그 길을 찾는데 유리하다고 한다. 또한 본인이 취직을 하든, 연구를 하든 무엇을 할 지 아무도 알 수 없기에 기회비용일 수도 있지만 잘 만들어진 학교 커리큘럼을 따라가는 게 맞다고 하셨다.\n\n하지만 오히려 반대로 학점은 그리 중요하지 않았다. 대학원을 준비하지 않는 이상, 취업을 할 때는 학점보다는 그 과목을 본인이 자신의 말로 설명할 수 있는지, 얼만큼 자기의 지식으로 만들었는지를 판별하기 때문에 학점에 그리 목 메이지 않아도 된다고 한다.\n\n그래서 나는 요즘 기업에서 신입을 뽑을 때 학점보다는 프로젝트를 더 중요하게 생각하냐고 여쭤봤고, 거기 계신 세 분의 선배들 모두 얼추 맞다고 대답하셨다. 대신 우리들이 프로젝트를 통해서 어떤 특정한 모습을 뽑내려고 안해도 된다고 하셨다. 지원자들을 보면, 프로젝트를 통해 본인의 특장점을 억지로 어필하려는 모습이 보인다고 하는데 이러한 점보다는 오히려 **본인이 문제를 정의하고, 몰두하고, 해결해나가는 과정 속에서 생기는 고민이나 선택들에 대한 이유를 본인만의 생각으로 논리적이게 풀이할 수 있고 그 과정을 제시할 수 있으면 된다고 했다.** 단순히 예를 들자면, 왜 React를 안쓰고 Nuxt로 개발을 하는지에 대한 본인만의 생각이 있고 말을 할 수 있으면 그걸로 충분하다는 얘기다. 실제 현업에서도 예시와 경우가 많기 때문에 이런 상황에는 지원자가 어떤 이유로 왜 이런 선택을 하는지 알아가는 과정인 것이었다. 또 더불어서 **학교에서 배운 내용들을 본인의 프로젝트에 적용하려는 시도를 하면 좋을 것 같다고 하셨다.** 개념적이고 추상적인 CS 지식을 프로젝트에 적용하는 게 쉽지는 않지만 low level를 다루면서 양질의 프로젝트를 만들 수 있거나 문제를 해결할 수 있는 근본적인 해결책을 찾을 수도 있다고 하셨다.\n\n### 관심 분야를 어떻게 정했는지\n두 번째 타임에 참여한 주제다. 입학 전부터, 나는 문제를 찾아 공학적인 기술로 해결해나가는 것을 좋아했다. 그렇다보니 프로젝트성 공부를 지속했었다. 문제를 해결해나가는 과정에서 앱이 필요하면 앱 개발 공부를 했고, 웹이 필요할 것 같으면 그때부터 웹을 공부하기 시작했다. 필요성에 의해 공부를 하다보니 여러 분야를 어느정도 경험은 해봤지만 특정 분야에 대한 깊은 지식이나 내가 그 분야를 제대로 잘 안다고 말을 할 수는 없었던 것 같았다. 그래서 최근에는 내가 좋아하는 분야를 찾아서 깊게 파보고 싶다는 생각이 문득 들었고 선배분들은 어떻게 본인의 분야를 정했는지 궁금했다.\n\n여러 선배들의 조언을 정리하면 아래와 같다.\n\n우선 다양한 경험을 해봐야한다는 것이었다. 동아리 내에서 스터디를 하든, 더 몰입감 있게 공모전을 나가든 어느정도의 강제성을 부여한 채로 여러 분야를 접해야한다는 것이다. 사실 지금 관심 분야를 찾아도 실제 현업에 나가면 자신이 관심있어 하는 분야를 다루는 경우는 일부기 때문에 한 분야를 깊게 파는 것이 물론 개인의 성장에 도움은 되지만, 관심 분야를 못 정했다고 불안해할 필요는 없다고 하셨다. 다만 오래 방황을 할 경우에는 학교 공부를 더 열심히 해야한다고 하셨다. 학교에서 배우는 CS 지식이 현업에서 일하는 지금까지도 도움이 되기 때문에 기본 중에 기본이 되는 내용들은 탄탄히 쌓을 필요가 있다고 했다. \n\n사실 너무 당연한 얘기였다. 오히려 선배분께서 지금처럼 필요에 의해 찾아 공부하고 고민하는 시간이 필요한 게 당연하다고 하셨다. 그 말에 안심이 되기도 했고, 지금처럼 지치지 말고 여러 자극을 받으며 살아야겠다고 생각했다.\n### 방학에는 무엇을 하는 게 좋은가\n세 번째 타임에 참여한 주제다. 사실 세 번째 타임에는 조언을 들으러 간 게 아니라 1학년분들이 계셔서 고민을 들어주려고 갔었다. 그래봤자 1년 차이라 도움이 될 지는 모르겠지만, 그래도 쉬지 않고 바쁘게 1학년을 보냈다고 말할 수 있어서 좋았던 점, 또 아쉬웠던 점을 들려주려고 갔다.\n\n내가 말한 내용만 정리를 하면 아래와 같다.\n\n난 하나의 기술 스택을 공부해보거나, 학교에서 지원해주는 외부 프로그램을 해보라고 추천했었다. 경험에서 오는 차이만큼 확실한 게 없다고 생각을 해와서 방학만큼은 학기 중에 병행하기 어려웠던 개발공부를 하거나, 해외 프로그램에 참여하는 게 도움이 많이 될 것 같았다. 또한 본인이 졸업 전에 하고 싶은 것에 대한 계획을 세울 필요가 있다고 말해줬다. 교환학생만 해도, 적어도 1년 전부터는 어학성적을 준비해야한다. 외부 동아리도 코딩 테스트를 통과하려면 몇 달을 할애해야한다. 나도 이런 점에 있어서는 부족했고 아쉬웠기에 후배분들은 더 낫길 바라는 마음에 말해줬다.\n## 2022 지금그때 회고\n![[2022 지금그때.jpg]]\n\n올해에도 작년과 마찬가지로 여러 생각이 들었고 다양한 감정들을 느낄 수 있었다. 참여자로서, 또 이 행사를 준비했던 회장단으로서도 느낀점이 있었다. \n\n우선 장소가 급히 바뀌어 예상했던 방향대로 안흘러가서 좀 아쉬웠다. 그럼에도 다른 회장단들이 열심히 같이 준비해줘서 다행이었고 무사히 진행됐다는 점에서 뿌듯하기도 했다. 이럴 때마다 회장단하길 잘한 것 같다는 생각이 든다.\n\n1년동안 학교 생활을 하다보면 자연스럽게 진로에 관한 이런저런 고민들이 쌓이게 된다. 오히려 난 방향성 없게 입에 넣어주는 공부만 하면 안된다고 생각하고 본인이 학교를 다니면서 진로나, 학업, 개발 등 본인만의 여러 고민들이 생겨야한다고 생각한다. 나는 그럴 때마다 물어볼 곳이 없었는데 졸업을 하셔도 여전히 관심을 가져주시는 분들 덕분에 동아리 운영도 되고 나와 같은 재학생들의 고민이 조금은 덜어지는 것 같다. 선배분들께 질문을 하고, 이야기를 하다보면 내 로드맵을 잠시 먼 시점에서 관찰하는 느낌이 든다. 미로에서 잠시 나와 탈출구가 어딨는지 확인하는 느낌이었다. 평상시에 갖고 있던 여러 고민들이 하나하나 풀려서 그런가 다시금 방향성이 잡히고 새로운 자극을 찾은 느낌이 들었다.\n\n학부 차원에서 이런 이벤트를 유지를 못시켜서 더욱 동아리 선배분들께 감사하기도했다. 다만 아쉬운 건, 1학년분들도 나와 같은 기분을 느끼셨으면 했다. 듣는 것에만 익숙해진 분들이 꽤 있으셨는데 기회를 놓치지 않고 이런 저런 질문을 더 많이 했으면 어땟을까.. 라는 생각이 들었다.\n\n추가로 선배분들이 어떤 일을 하는지, 어느 분야를 공부하고 계신지 여쭤봤었는데 그럴 때마다 난 **대체 불가능 한 사람, 개발자를 위한 개발자**라는 타이틀을 내밀 수 있는 사림이 되어야겠다고 생각했다. 본인이 지금 무엇을 하고 있는지, 자신 있게 보여주고 설명하는 모습이 내가 바라는 모습이기도 했다. 지금 내가 하고자 하는 분야를 뚜렷히 못정해서 저런 생각이 들은 것 같기도 했다. 앞으로도 많은 자극들을 받으며 아직 접해보지 못한 것들을 경험해보고 싶었고, 지금 도움을 받은 만큼 나의 지금이 그때가 될 때 후배분들의 지금에 도움이 될 수 있는 사람이 되어야겠다는 생각을 했다.\n"},{"excerpt":"기존 블로그에서 이전해온 글입니다.  삽질 배경 내 개인페이지는 올해 초에 처음 개발되기 시작했었다. 그때도 markdown에 수식을 적용하기 위해 이것저것 시도해보다가 포기했었는데 며칠 전부터 스터디 페이지를 개발하면서 markdown에 수식을 적어야 할 일이 또 생기고 말았다. 문제 상황 본 페이지는 Nuxt content와 tailwindcss ty…","fields":{"slug":"/nuxt-katex/"},"frontmatter":{"date":"2022년 09월 13일 22:09","title":"Nuxt content에 Mathtype 사용하기","tags":["Nuxt","Katex"]},"rawMarkdownBody":"\n*[기존 블로그](https://choiminjun.netlify.app/blog/nuxt-katex)에서 이전해온 글입니다.*\n\n\n![[Nuxt.png]]\n## 삽질 배경\n내 개인페이지는 올해 초에 처음 개발되기 시작했었다. 그때도 markdown에 수식을 적용하기 위해 이것저것 시도해보다가 포기했었는데 며칠 전부터 [스터디 페이지](https://choiminjun.netlify.app/study/computer-architecture/0-1)를 개발하면서 markdown에 수식을 적어야 할 일이 또 생기고 말았다.\n\n### 문제 상황\n본 페이지는 Nuxt content와 tailwindcss typography로 개발되었는데 둘 다 markdown에서 수식을 기본적으로 지원해주지 않기 때문에 내가 추가적으로 \n플러그인이나 패키지를 다운받아 적용시켜줘야했다. 구글링을 하다보면 이 [GitHub Issue](https://github.com/nuxt/content/issues/102)가 그나마 제일 믿을 만한 정보가 많았는데 이 페이지뿐만 아니라 거의 모든 사이트들이 `rehype-katex`와 `remark-math` package를 다운받아 적용하라고 한다. 근데 문제는 `nuxt/content`, `rehype-katex`, `remark-math` package들이 새롭게 업데이트 되면서 서로 호환이 되도록 작업을 안해놨기 때문에 전부 다 최신 버전으로 다운 받아 사용할 경우 수식 적용 자체가 되지를 않는다. \n\n## 정답\n### 삽질 방법\n일단 Nuxt content에서 katex를 지원해주는 방법에 대한 거의 모든 글을 읽어봤을만큼 몇 시간동안 구글링을 해보고 모든 버전들끼리 조합을 해본 뒤에 정답을 찾았다. 또한 `nuxt/content`을 바꿔주게 되면 수식이 필요없는 파일들에게도 영향이 갈 수 있어서 `rehype-katex`, `remark-math` package들만 버전 조합을 찾아봤다. npm downgrade를 하면 쉬운데 에러가 많이 나서 매번 **노드 모듈**들을 지워주고 **package.json**을 수정한다음에 새롭게 모듈들을 깔아보면서 로컬에서 실행해보며 확인해주었다.\n\n### 결론\n\n```javascript\n\"dependencies\": {\n    \"@nuxt/content\": \"^1.15.1\",\n    \"rehype-katex\": \"^4.0.0\",\n    \"remark-math\": \"^4.0.0\",\n    \"katex\": \"^0.15.3\",\n  },\n``` \n<center>package.json</center>\n<br>\n\n우선 위에서부터 언급한 3가지 package들은 저 버전들로 설치를 해놔야 호환이 된다. 특히 `rehype-katex`는 5버전, `remark-math`는 4버전을 넘기면 안된다. 추가로 `katex` package도 필요한데, 이 package가 없으면 수식을 인식하긴하는데 우리가 원하는대로 깔끔하게 적용되지 않는다.\n\n\n\n```javascript\ncss: [\n    {\n      src: 'katex/dist/katex.min.css',\n      defer: true\n    },\n    \"@/assets/css/main.css\"\n  ],\ncontent: {\n    markdown: {\n      remarkPlugins: ['remark-math'],\n      rehypePlugins: ['rehype-katex']\n    },\n  },\n```\n<center>nuxt.config.js</center>\n<br>\n\n그리고 나서 **nuxt.config.js** 파일에 가서 위와 같이 적용을 시켜줘야한다.\n\n\n## 마무리\n아무리 구글링을 해도 답이 안나오길래 Github에 Nuxt content로 빌드된 페이지 레포 중에 markdown에서 수식을 지원해줄 수 있게 작업한 것들을 찾아봤다. 유일하게 한 개가 있었는데 그 레포에서는 `katex` package를 추가로 설치해서 적용해주길래 똑같이 적용시켜보았다. \n\n이럴 때 보면 확실히 Nuxt가 React에 비해 커뮤니티 활성도가 조금 낮은 듯하다. 지금은 Nuxt가 너무 익숙해져서 넘어갈 생각은 없지만 프로그래밍을 하는데에 있어 커뮤니티가 기여하는 점이 크다는 것을 알았다. \n\n적게 잡아도 5시간정도는 이 작업만 한 것 같다. 중간에 던질까 생각도 많았는데 모든 경우를 시도해보지 않으면 나중에 후회할 것 같아서 광기어린 눈으로 지구끝까지 삽질을 해보았다. 나처럼 Nuxt content에 mathtype을 적용하고자 하는 사람이 많을 것 같은데 도움이 됐으면 좋겠다.\n"},{"excerpt":"기존 블로그에서 이전해온 글입니다. 들어가기전에 이 글을 작성하는 오늘은 9월 5일, 하반기에 접어들고 벌써 2학년 2학기를 이제 막 시작하는 날이다.\n사실 회고를 작성해야겠다고 생각한 건 꽤 오래되었다. 내가 그동안 어떤 생각을 했고 어떻게 그것들을 달성해나갔는지 되돌아보는 것 자체만으로도 스스로 많은 자극이 되었기에 회고를 작성하는 습관을 들여야겠다고…","fields":{"slug":"/retrospect-2022-1/"},"frontmatter":{"date":"2022년 09월 05일 12:09","title":"2022년 상반기 회고","tags":["회고","ZeroPage","GDG"]},"rawMarkdownBody":"\n*[기존 블로그](https://choiminjun.netlify.app/blog/retrospect-2022-1)에서 이전해온 글입니다.*\n\n## 들어가기전에\n이 글을 작성하는 오늘은 9월 5일, 하반기에 접어들고 벌써 2학년 2학기를 이제 막 시작하는 날이다. \n사실 회고를 작성해야겠다고 생각한 건 꽤 오래되었다. 내가 그동안 어떤 생각을 했고 어떻게 그것들을 달성해나갔는지 되돌아보는 것 자체만으로도 스스로 많은 자극이 되었기에 회고를 작성하는 습관을 들여야겠다고 꾸준히 생각했었는데 내 마음에 들 때까지 내 페이지를 개발하는 게 우선인 것 같아서 조금 늦은 감이 없진 않지만 지금에서야 작성해보고자한다. \n\n## Google Developer Student Club CAU\n\n\n![[GDSC.svg]]\n\n\n\n### 열정적인 사람들을 만나며\n2021년 9월쯤, 우연히 학교 에브리타임에서 GDSC CAU 1기를 모집한다는 글을 보았다. 홍보글을 보았을 때 '이 동아리는 개발을 잘하는 사람만\n들어갈 수 있는 곳인가?' 라는 의문이 제일 먼저 들면서 나도 모르게 움츠러들었었다. 그런 나에게 반항심이라도 들었는지 떨어져도 본전이라는 마음으로, 한 편으로는 이 동아리를 통해 나도 개발을 잘하는 사람이라는 가치에 한 발자국 더 다가가고자 하는 마음으로 지원을 했고 운이 좋았는지는 모르겠지만 합격을 해서 1년을 열심히 활동하고 얼마전 수료식을 했다.\n\n21년도에 중앙대학교 소프트웨어학부에 입학을 하고 입학과 동시에 전부 비대면 수업을 들었던 나는 자연스레 학교 생활과는 멀어졌었고 학교 수업만 따라가고 있었다. 그러다가 처음으로 동아리라는 것을 해보고 환경의 중요성을 더욱 실감했던 것 같다. 온라인이었지만 정모에 나가고 스터디를 하고 프로젝트를 진행하면서 나와 같은 목표를 가진, 또 나와 같은 열정을 가진, 어쩌면 나보다도 더욱 큰 꿈을 가진 사람들을 만나면서 그들로부터 동기와 열정을 느끼고 나 또한 다시 내가 하고 싶었던 것들에 몰두할 수 있었다.\n\n### 나를 성장시키는 힘\n이 동아리를 통해 기술적으로 배운 것들도 많았지만 더욱 중요하게, 나라는 사람을 성장시킬 수 있는 방법을 깨달았다.\n그건 바로 **불편함에 익숙해져야한다는 것**이다. GDSC에서 나는 Flutter를 공부하고 앱 개발을 했는데 매 순간 고민의 연속이었고 기존에 내가 하던 것과는 완전 다른 느낌의 코딩이기에 쉬운 것이 하나 없었다. 이처럼 새로운 언어와 프레임워크를 접하면서 누구나 당연히 불편함을 느낄거라 생각을 한다. 하지만 그 불편함을 느끼는 과정이 학습의 동기가 되고 성장의 과정이라는 것을 배웠다. 2학년인 지금도 새롭게 배우고 접하는 것들이 많지만 앞으로도 다를 것 같지는 않아보였다. 중요한 건 그런 과정 속에서 나를 둘러싼 불편함을 받아드리고 적응하는 것임을 배울 수 있었다.\n\n또 다른 것으로는, **새로움에 주저하지 말자는 것**이다. 아무것도 모르는 1학년 학부생이 무작정 동아리에 들어가고 FE/BE 경험도 없으면서 Flutter를 시작하는 것이 누가 보기엔 살짝 무모하다 할 수 있지만 그럼에도 생각을 실천으로 옮기는 것 또한 나를 성장시키는 방법이라고 생각했다. 처음 동아리에 들어갔을 때 내가 유일한 1학년이었다. '내가 잘 따라갈 수 있을까' 걱정도 했지만 새로움에 도전하는 걸 어느순간 내가 즐기고 있음을 느꼈던 것 같다. 처음에는 쉬운 것조차 어떻게 하는지 몰라서 많이 헤매고 시도때도 없이 선배들한테 질문을 했는데 지금 생각해도 본인 일처럼 친절하게 알려준 선배들께 감사하다.\n\n## ZeroPage | 중앙대학교 소프트웨어학부 학술연구회\n\n![[ZeroPage.svg]]\n### 회장단 상반기 회고\nGDSC에서 가깝게 지낸 사람들이 대부분 중앙대학교 소프트웨어학부 학술연구회인 ZeroPage 소속이었다. 그들과 지내면서 자연스레 나도 ZeroPage에 가입을 했고 작년 하반기에 열심히 활동을 하면서 이 동아리를 이어나가고자 올해 초 회장단에 지원을 했다.\n\n회장단으로 한 학기를 보내고 되돌아봤을 때 잘한 점도 있는 것 같고 아쉬운 점도 몇몇 있는 것 같다. 우선 대면으로 조금씩 허용되면서 그동안의 행사들과 동아리 분위기를 바꾸고자 나름대로 노력을 했다. 최근에는 Devils Camp를 대면으로 진행했는데 마침 내가 그때 코로나에 걸려 못 간 게 아쉬웠다. 또한 동아리를 유지하기 위해서는 회원들을 꾸준히 모집하는 것도 중요한데 그래도 노력한만큼 동아리가 유지되고 있는 것 같아서 다행인 것 같다.\n\n최근에 후배분들 중 한 분이 동아리 회장단을 하는 게 부담스럽지 않냐고 물어봐주셨다. 30년 넘게 유지되고 있는 동아리라 초반에는 부담도 됐지만 지금은 조금이나마 편해진 것 같다. 그럼에도 불구하고 나는 그 후배분께 본인이 애정을 쏟고 싶은 곳이 있다면 회장단만큼 유대감을 크게 느낄 수 있는 방법이 몇 없을 거라고 말을 해줬다. 매주 정모를 하고 함께 스터디를 해나가면서 같이 성장해나가는 기분은 말로 설명할 수 없을 무언가가 있는 것 같다고 말이다. 아직 상반기밖에 안지났지만 여전히 하루하루 느끼는 게 많은 것 같다. 요즘 하는 생각은 '**어렵지 않은 사람이 되자**'이다. 여러 사람을 만나며 소통을 해나가는 과정 속에서 처음의 진입장벽을 허무는 게 중요한 것 같다. 그래서 앞으로는 스터디도 더 자주 개최하고 보다 활동적인 동아리를 만들려고 계획 중이다. \n\n\n## 해외인턴프로그램\n얼마 전, 여름방학에 미국 LA로 한 달간 인턴프로그램을 다녀왔다. 본 프로그램을 통해 창업이라는 개념에 벽이 조금은 허물어진 것 같고, 진지하게 교환학생에 대해서 생각을 해보았다. 다른 문화 속에서 내가 좋아하는 분야를 공부해보고 싶다. 대학원을 해외로 가는 방법도 있지만, 그건 차후에 내가 공부하고 싶은 분야를 뚜렷이 찾으면 고민해볼 것 같다. \n\n## 운동\n내 책상 바로 옆에 풀업을 할 수 있는 치닝디핑(턱걸이 기구)과 덤벨이 있다. 작년 초부터 지금까지 못해도 일주일에 3번이상 꾸준히 운동을 해오고 있는데 점점 개수가 느는 게 보인다. 책상에 앉아있는 시간이 많아질 수록 체력 또한 중요하다고 생각해서 눈에 보이면 일단 하나 당기고 본다. 앞으로는 더 바빠질 것을 대비해서 오전 시간을 최대한 활용해보고자 한다. \n\n## 앞으로의 목표\n지난 한 학기, 크게는 1년을 돌아보며 나는 다양한 사람들과 만나면서 다양한 방면으로 성장하고 있음을 느꼈다. 이렇게 회고를 하다보니 뿌듯하기도 하고 새롭게 자극받는 기분이 든다. 2학년 2학기를 시작하고 있는 지금, 전공을 5개나 듣고 있지만 또 새로운 것에 도전하고 새로운 환경에서 또 다른 사람들을 만나보고 싶다는 생각이 드는 요즘이다. 아직 정확히 무엇을 더 할지는 모르겠지만 올해 하반기에는 좀 더 많은 자극을 받으며 열심히 살고 싶다. "}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}